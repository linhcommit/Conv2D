// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module initializeBuffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        in_data_address0,
        in_data_ce0,
        in_data_q0,
        index_row_out,
        kernel_size_row,
        kernel_size_col
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
output  [13:0] in_data_address0;
output   in_data_ce0;
input  [31:0] in_data_q0;
input  [30:0] index_row_out;
input  [31:0] kernel_size_row;
input  [31:0] kernel_size_col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[13:0] in_data_address0;
reg in_data_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] smax_cast_fu_189_p1;
reg   [31:0] smax_cast_reg_396;
wire   [30:0] ik_row_2_fu_202_p2;
reg   [30:0] ik_row_2_reg_404;
wire    ap_CS_fsm_state2;
wire   [31:0] i_buffer_1_fu_208_p2;
reg   [31:0] i_buffer_1_reg_409;
wire   [0:0] tmp_s_fu_197_p2;
wire  signed [14:0] tmp_18_fu_372_p2;
reg  signed [14:0] tmp_18_reg_414;
wire   [31:0] tmp_33_fu_293_p3;
reg   [31:0] tmp_33_reg_420;
wire   [0:0] tmp_34_fu_301_p2;
reg   [0:0] tmp_34_reg_425;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_19_fu_320_p2;
reg   [31:0] tmp_19_reg_434;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_17_1_fu_337_p2;
wire   [31:0] tmp_19_1_fu_356_p2;
reg   [31:0] tmp_19_1_reg_447;
wire   [31:0] ik_col_2_1_fu_362_p2;
reg   [31:0] ik_col_2_1_reg_452;
reg   [31:0] i_buffer_reg_125;
reg   [30:0] ik_row_reg_137;
reg  signed [31:0] i_buffer_s_reg_148;
wire    ap_CS_fsm_state5;
reg   [31:0] ik_col_reg_159;
wire  signed [63:0] tmp_22_cast_fu_315_p1;
wire  signed [63:0] tmp_20_fu_326_p1;
wire  signed [63:0] tmp_23_cast_fu_351_p1;
wire  signed [63:0] tmp_20_1_fu_368_p1;
wire   [0:0] tmp_fu_171_p2;
wire   [30:0] tmp_24_fu_177_p1;
wire   [30:0] smax_fu_181_p3;
wire   [31:0] ik_row_cast_fu_193_p1;
wire   [14:0] tmp_26_fu_216_p1;
wire   [14:0] tmp_25_fu_213_p1;
wire   [31:0] kernel_size_col_op_o_fu_233_p2;
wire   [31:0] p_neg_fu_246_p2;
wire   [30:0] p_lshr_fu_251_p4;
wire   [0:0] tmp_29_fu_238_p3;
wire   [30:0] p_neg_t_fu_261_p2;
wire   [30:0] tmp_30_fu_267_p4;
wire   [0:0] tmp_28_fu_226_p3;
wire   [30:0] tmp_31_fu_277_p3;
wire   [30:0] tmp_32_fu_285_p3;
wire   [14:0] tmp_35_fu_306_p1;
(* use_dsp48 = "no" *) wire   [14:0] tmp_21_fu_310_p2;
wire   [31:0] ik_col_2_s_fu_331_p2;
wire   [14:0] tmp_36_fu_342_p1;
(* use_dsp48 = "no" *) wire   [14:0] tmp_22_fu_346_p2;
wire   [7:0] tmp_18_fu_372_p0;
wire  signed [14:0] tmp_18_fu_372_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

conv2D_mul_mul_8nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
conv2D_mul_mul_8nbkb_U1(
    .din0(tmp_18_fu_372_p0),
    .din1(tmp_18_fu_372_p1),
    .dout(tmp_18_fu_372_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_17_1_fu_337_p2 == 1'd0) | (tmp_34_reg_425 == 1'd1)))) begin
        i_buffer_reg_125 <= i_buffer_1_reg_409;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_buffer_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_buffer_s_reg_148 <= tmp_19_1_reg_447;
    end else if (((tmp_s_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_buffer_s_reg_148 <= i_buffer_reg_125;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ik_col_reg_159 <= ik_col_2_1_reg_452;
    end else if (((tmp_s_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ik_col_reg_159 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_17_1_fu_337_p2 == 1'd0) | (tmp_34_reg_425 == 1'd1)))) begin
        ik_row_reg_137 <= ik_row_2_reg_404;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ik_row_reg_137 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_buffer_1_reg_409 <= i_buffer_1_fu_208_p2;
        tmp_18_reg_414 <= tmp_18_fu_372_p2;
        tmp_33_reg_420[31 : 1] <= tmp_33_fu_293_p3[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_425 == 1'd0) & (tmp_17_1_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ik_col_2_1_reg_452 <= ik_col_2_1_fu_362_p2;
        tmp_19_1_reg_447 <= tmp_19_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ik_row_2_reg_404 <= ik_row_2_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        smax_cast_reg_396[30 : 0] <= smax_cast_fu_189_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_reg_425 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_19_reg_434 <= tmp_19_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_34_reg_425 <= tmp_34_fu_301_p2;
    end
end

always @ (*) begin
    if ((((tmp_s_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_s_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_r_address0 = tmp_20_1_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_address0 = tmp_20_fu_326_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((tmp_34_reg_425 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_data_address0 = tmp_23_cast_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_data_address0 = tmp_22_cast_fu_315_p1;
    end else begin
        in_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        in_data_ce0 = 1'b1;
    end else begin
        in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((tmp_17_1_fu_337_p2 == 1'd0) | (tmp_34_reg_425 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign buffer_r_d0 = in_data_q0;

assign i_buffer_1_fu_208_p2 = (smax_cast_reg_396 + i_buffer_reg_125);

assign ik_col_2_1_fu_362_p2 = (32'd2 + ik_col_reg_159);

assign ik_col_2_s_fu_331_p2 = (ik_col_reg_159 | 32'd1);

assign ik_row_2_fu_202_p2 = (ik_row_reg_137 + 31'd1);

assign ik_row_cast_fu_193_p1 = ik_row_reg_137;

assign kernel_size_col_op_o_fu_233_p2 = (32'd1 + kernel_size_col);

assign p_lshr_fu_251_p4 = {{p_neg_fu_246_p2[31:1]}};

assign p_neg_fu_246_p2 = (kernel_size_col ^ 32'd4294967295);

assign p_neg_t_fu_261_p2 = (31'd0 - p_lshr_fu_251_p4);

assign smax_cast_fu_189_p1 = smax_fu_181_p3;

assign smax_fu_181_p3 = ((tmp_fu_171_p2[0:0] === 1'b1) ? tmp_24_fu_177_p1 : 31'd0);

assign tmp_17_1_fu_337_p2 = (($signed(ik_col_2_s_fu_331_p2) < $signed(kernel_size_col)) ? 1'b1 : 1'b0);

assign tmp_18_fu_372_p0 = 15'd100;

assign tmp_18_fu_372_p1 = (tmp_26_fu_216_p1 + tmp_25_fu_213_p1);

assign tmp_19_1_fu_356_p2 = ($signed(32'd2) + $signed(i_buffer_s_reg_148));

assign tmp_19_fu_320_p2 = ($signed(32'd1) + $signed(i_buffer_s_reg_148));

assign tmp_20_1_fu_368_p1 = $signed(tmp_19_reg_434);

assign tmp_20_fu_326_p1 = i_buffer_s_reg_148;

assign tmp_21_fu_310_p2 = ($signed(tmp_18_reg_414) + $signed(tmp_35_fu_306_p1));

assign tmp_22_cast_fu_315_p1 = $signed(tmp_21_fu_310_p2);

assign tmp_22_fu_346_p2 = ($signed(tmp_18_reg_414) + $signed(tmp_36_fu_342_p1));

assign tmp_23_cast_fu_351_p1 = $signed(tmp_22_fu_346_p2);

assign tmp_24_fu_177_p1 = kernel_size_col[30:0];

assign tmp_25_fu_213_p1 = index_row_out[14:0];

assign tmp_26_fu_216_p1 = ik_row_reg_137[14:0];

assign tmp_28_fu_226_p3 = kernel_size_col[32'd31];

assign tmp_29_fu_238_p3 = kernel_size_col_op_o_fu_233_p2[32'd31];

assign tmp_30_fu_267_p4 = {{kernel_size_col_op_o_fu_233_p2[31:1]}};

assign tmp_31_fu_277_p3 = ((tmp_29_fu_238_p3[0:0] === 1'b1) ? p_neg_t_fu_261_p2 : tmp_30_fu_267_p4);

assign tmp_32_fu_285_p3 = ((tmp_28_fu_226_p3[0:0] === 1'b1) ? 31'd0 : tmp_31_fu_277_p3);

assign tmp_33_fu_293_p3 = {{tmp_32_fu_285_p3}, {1'd0}};

assign tmp_34_fu_301_p2 = ((ik_col_reg_159 == tmp_33_reg_420) ? 1'b1 : 1'b0);

assign tmp_35_fu_306_p1 = ik_col_reg_159[14:0];

assign tmp_36_fu_342_p1 = ik_col_2_s_fu_331_p2[14:0];

assign tmp_fu_171_p2 = (($signed(kernel_size_col) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_197_p2 = (($signed(ik_row_cast_fu_193_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    smax_cast_reg_396[31] <= 1'b0;
    tmp_33_reg_420[0] <= 1'b0;
end

endmodule //initializeBuffer
