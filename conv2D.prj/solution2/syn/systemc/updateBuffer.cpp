// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "updateBuffer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic updateBuffer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic updateBuffer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> updateBuffer::ap_ST_fsm_state1 = "1";
const sc_lv<7> updateBuffer::ap_ST_fsm_state2 = "10";
const sc_lv<7> updateBuffer::ap_ST_fsm_state3 = "100";
const sc_lv<7> updateBuffer::ap_ST_fsm_state4 = "1000";
const sc_lv<7> updateBuffer::ap_ST_fsm_state5 = "10000";
const sc_lv<7> updateBuffer::ap_ST_fsm_state6 = "100000";
const sc_lv<7> updateBuffer::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> updateBuffer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> updateBuffer::ap_const_lv32_1 = "1";
const sc_lv<1> updateBuffer::ap_const_lv1_1 = "1";
const sc_lv<32> updateBuffer::ap_const_lv32_2 = "10";
const sc_lv<1> updateBuffer::ap_const_lv1_0 = "0";
const sc_lv<32> updateBuffer::ap_const_lv32_3 = "11";
const sc_lv<32> updateBuffer::ap_const_lv32_4 = "100";
const sc_lv<31> updateBuffer::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> updateBuffer::ap_const_lv32_6 = "110";
const sc_lv<32> updateBuffer::ap_const_lv32_5 = "101";
const sc_lv<32> updateBuffer::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<31> updateBuffer::ap_const_lv31_1 = "1";
const sc_lv<32> updateBuffer::ap_const_lv32_1F = "11111";
const sc_lv<15> updateBuffer::ap_const_lv15_64 = "1100100";
const bool updateBuffer::ap_const_boolean_1 = true;

updateBuffer::updateBuffer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv2D_ama_addmulcud_U12 = new conv2D_ama_addmulcud<1,1,15,15,8,15,15>("conv2D_ama_addmulcud_U12");
    conv2D_ama_addmulcud_U12->din0(grp_fu_392_p0);
    conv2D_ama_addmulcud_U12->din1(grp_fu_392_p1);
    conv2D_ama_addmulcud_U12->din2(grp_fu_392_p2);
    conv2D_ama_addmulcud_U12->din3(tmp_3_reg_431);
    conv2D_ama_addmulcud_U12->dout(grp_fu_392_p4);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_225_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_225_p2 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_320_p1 );
    sensitive << ( tmp_10_fu_331_p1 );
    sensitive << ( tmp_9_1_fu_380_p1 );
    sensitive << ( tmp_10_1_fu_384_p1 );
    sensitive << ( tmp_14_fu_388_p1 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buffer_r_d0);
    sensitive << ( buffer_r_q0 );
    sensitive << ( in_data_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( tmp_2_reg_427 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_392_p0);
    sensitive << ( index_row_out );
    sensitive << ( tmp_2_reg_427 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_1_fu_342_p2 );

    SC_METHOD(thread_grp_fu_392_p1);
    sensitive << ( tmp_2_reg_427 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_1_fu_342_p2 );
    sensitive << ( ik_row_reg_158 );

    SC_METHOD(thread_grp_fu_392_p2);
    sensitive << ( tmp_2_reg_427 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_1_fu_342_p2 );

    SC_METHOD(thread_ik_col_1_1_fu_358_p2);
    sensitive << ( ik_col_reg_182 );

    SC_METHOD(thread_ik_col_1_s_fu_336_p2);
    sensitive << ( ik_col_reg_182 );

    SC_METHOD(thread_ik_row_1_fu_230_p2);
    sensitive << ( ik_row_reg_158 );

    SC_METHOD(thread_ik_row_cast_fu_221_p1);
    sensitive << ( ik_row_reg_158 );

    SC_METHOD(thread_in_data_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_17_cast_fu_371_p1 );

    SC_METHOD(thread_in_data_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_next_mul_fu_216_p2);
    sensitive << ( kernel_size_col );
    sensitive << ( phi_mul_reg_170 );

    SC_METHOD(thread_p_lshr_fu_261_p4);
    sensitive << ( p_neg_fu_256_p2 );

    SC_METHOD(thread_p_neg_fu_256_p2);
    sensitive << ( kernel_size_col );

    SC_METHOD(thread_p_neg_t_fu_271_p2);
    sensitive << ( p_lshr_fu_261_p4 );

    SC_METHOD(thread_tmp_10_1_fu_384_p1);
    sensitive << ( tmp_1_5_reg_477 );

    SC_METHOD(thread_tmp_10_fu_331_p1);
    sensitive << ( tmp_s_fu_325_p2 );

    SC_METHOD(thread_tmp_11_fu_249_p3);
    sensitive << ( kernel_size_col );

    SC_METHOD(thread_tmp_12_fu_277_p4);
    sensitive << ( kernel_size_col );

    SC_METHOD(thread_tmp_13_fu_375_p2);
    sensitive << ( tmp_reg_420 );
    sensitive << ( phi_mul_reg_170 );

    SC_METHOD(thread_tmp_14_fu_388_p1);
    sensitive << ( tmp_13_reg_492 );

    SC_METHOD(thread_tmp_15_fu_286_p3);
    sensitive << ( tmp_11_fu_249_p3 );
    sensitive << ( p_neg_t_fu_271_p2 );
    sensitive << ( tmp_12_fu_277_p4 );

    SC_METHOD(thread_tmp_17_cast_fu_371_p1);
    sensitive << ( grp_fu_392_p4 );

    SC_METHOD(thread_tmp_18_fu_294_p3);
    sensitive << ( tmp_5_fu_242_p3 );
    sensitive << ( tmp_15_fu_286_p3 );

    SC_METHOD(thread_tmp_19_fu_302_p3);
    sensitive << ( tmp_18_fu_294_p3 );

    SC_METHOD(thread_tmp_1_5_fu_352_p2);
    sensitive << ( phi_mul_reg_170 );
    sensitive << ( ik_col_1_s_fu_336_p2 );

    SC_METHOD(thread_tmp_1_fu_200_p2);
    sensitive << ( index_col_out );
    sensitive << ( kernel_size_col );

    SC_METHOD(thread_tmp_20_fu_310_p2);
    sensitive << ( tmp_19_reg_455 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ik_col_reg_182 );

    SC_METHOD(thread_tmp_2_fu_206_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( col_in );
    sensitive << ( tmp_1_fu_200_p2 );

    SC_METHOD(thread_tmp_3_fu_212_p1);
    sensitive << ( tmp_1_fu_200_p2 );

    SC_METHOD(thread_tmp_4_fu_225_p2);
    sensitive << ( kernel_size_row );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ik_row_cast_fu_221_p1 );

    SC_METHOD(thread_tmp_5_fu_242_p3);
    sensitive << ( tmp_reg_420 );

    SC_METHOD(thread_tmp_6_1_fu_342_p2);
    sensitive << ( tmp_reg_420 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ik_col_1_s_fu_336_p2 );

    SC_METHOD(thread_tmp_7_fu_236_p2);
    sensitive << ( phi_mul_reg_170 );

    SC_METHOD(thread_tmp_8_1_fu_347_p2);
    sensitive << ( tmp_7_reg_449 );
    sensitive << ( ik_col_1_s_fu_336_p2 );

    SC_METHOD(thread_tmp_8_fu_315_p2);
    sensitive << ( tmp_7_reg_449 );
    sensitive << ( ik_col_reg_182 );

    SC_METHOD(thread_tmp_9_1_fu_380_p1);
    sensitive << ( tmp_8_1_reg_472 );

    SC_METHOD(thread_tmp_9_fu_320_p1);
    sensitive << ( tmp_8_fu_315_p2 );

    SC_METHOD(thread_tmp_fu_194_p2);
    sensitive << ( kernel_size_col );

    SC_METHOD(thread_tmp_s_fu_325_p2);
    sensitive << ( phi_mul_reg_170 );
    sensitive << ( ik_col_reg_182 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_225_p2 );
    sensitive << ( tmp_20_reg_460 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_1_fu_342_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "updateBuffer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "(port)buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_d0, "(port)buffer_r_d0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, in_data_address0, "(port)in_data_address0");
    sc_trace(mVcdFile, in_data_ce0, "(port)in_data_ce0");
    sc_trace(mVcdFile, in_data_q0, "(port)in_data_q0");
    sc_trace(mVcdFile, index_row_out, "(port)index_row_out");
    sc_trace(mVcdFile, index_col_out, "(port)index_col_out");
    sc_trace(mVcdFile, kernel_size_row, "(port)kernel_size_row");
    sc_trace(mVcdFile, kernel_size_col, "(port)kernel_size_col");
    sc_trace(mVcdFile, col_in, "(port)col_in");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_194_p2, "tmp_fu_194_p2");
    sc_trace(mVcdFile, tmp_reg_420, "tmp_reg_420");
    sc_trace(mVcdFile, tmp_2_fu_206_p2, "tmp_2_fu_206_p2");
    sc_trace(mVcdFile, tmp_2_reg_427, "tmp_2_reg_427");
    sc_trace(mVcdFile, tmp_3_fu_212_p1, "tmp_3_fu_212_p1");
    sc_trace(mVcdFile, tmp_3_reg_431, "tmp_3_reg_431");
    sc_trace(mVcdFile, next_mul_fu_216_p2, "next_mul_fu_216_p2");
    sc_trace(mVcdFile, next_mul_reg_436, "next_mul_reg_436");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ik_row_1_fu_230_p2, "ik_row_1_fu_230_p2");
    sc_trace(mVcdFile, ik_row_1_reg_444, "ik_row_1_reg_444");
    sc_trace(mVcdFile, tmp_7_fu_236_p2, "tmp_7_fu_236_p2");
    sc_trace(mVcdFile, tmp_7_reg_449, "tmp_7_reg_449");
    sc_trace(mVcdFile, tmp_4_fu_225_p2, "tmp_4_fu_225_p2");
    sc_trace(mVcdFile, tmp_19_fu_302_p3, "tmp_19_fu_302_p3");
    sc_trace(mVcdFile, tmp_19_reg_455, "tmp_19_reg_455");
    sc_trace(mVcdFile, tmp_20_fu_310_p2, "tmp_20_fu_310_p2");
    sc_trace(mVcdFile, tmp_20_reg_460, "tmp_20_reg_460");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_8_1_fu_347_p2, "tmp_8_1_fu_347_p2");
    sc_trace(mVcdFile, tmp_8_1_reg_472, "tmp_8_1_reg_472");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_6_1_fu_342_p2, "tmp_6_1_fu_342_p2");
    sc_trace(mVcdFile, tmp_1_5_fu_352_p2, "tmp_1_5_fu_352_p2");
    sc_trace(mVcdFile, tmp_1_5_reg_477, "tmp_1_5_reg_477");
    sc_trace(mVcdFile, ik_col_1_1_fu_358_p2, "ik_col_1_1_fu_358_p2");
    sc_trace(mVcdFile, ik_col_1_1_reg_482, "ik_col_1_1_reg_482");
    sc_trace(mVcdFile, tmp_13_fu_375_p2, "tmp_13_fu_375_p2");
    sc_trace(mVcdFile, tmp_13_reg_492, "tmp_13_reg_492");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ik_row_reg_158, "ik_row_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phi_mul_reg_170, "phi_mul_reg_170");
    sc_trace(mVcdFile, ik_col_reg_182, "ik_col_reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_9_fu_320_p1, "tmp_9_fu_320_p1");
    sc_trace(mVcdFile, tmp_10_fu_331_p1, "tmp_10_fu_331_p1");
    sc_trace(mVcdFile, tmp_17_cast_fu_371_p1, "tmp_17_cast_fu_371_p1");
    sc_trace(mVcdFile, tmp_9_1_fu_380_p1, "tmp_9_1_fu_380_p1");
    sc_trace(mVcdFile, tmp_10_1_fu_384_p1, "tmp_10_1_fu_384_p1");
    sc_trace(mVcdFile, tmp_14_fu_388_p1, "tmp_14_fu_388_p1");
    sc_trace(mVcdFile, tmp_1_fu_200_p2, "tmp_1_fu_200_p2");
    sc_trace(mVcdFile, ik_row_cast_fu_221_p1, "ik_row_cast_fu_221_p1");
    sc_trace(mVcdFile, p_neg_fu_256_p2, "p_neg_fu_256_p2");
    sc_trace(mVcdFile, p_lshr_fu_261_p4, "p_lshr_fu_261_p4");
    sc_trace(mVcdFile, tmp_11_fu_249_p3, "tmp_11_fu_249_p3");
    sc_trace(mVcdFile, p_neg_t_fu_271_p2, "p_neg_t_fu_271_p2");
    sc_trace(mVcdFile, tmp_12_fu_277_p4, "tmp_12_fu_277_p4");
    sc_trace(mVcdFile, tmp_5_fu_242_p3, "tmp_5_fu_242_p3");
    sc_trace(mVcdFile, tmp_15_fu_286_p3, "tmp_15_fu_286_p3");
    sc_trace(mVcdFile, tmp_18_fu_294_p3, "tmp_18_fu_294_p3");
    sc_trace(mVcdFile, tmp_8_fu_315_p2, "tmp_8_fu_315_p2");
    sc_trace(mVcdFile, tmp_s_fu_325_p2, "tmp_s_fu_325_p2");
    sc_trace(mVcdFile, ik_col_1_s_fu_336_p2, "ik_col_1_s_fu_336_p2");
    sc_trace(mVcdFile, grp_fu_392_p4, "grp_fu_392_p4");
    sc_trace(mVcdFile, grp_fu_392_p0, "grp_fu_392_p0");
    sc_trace(mVcdFile, grp_fu_392_p1, "grp_fu_392_p1");
    sc_trace(mVcdFile, grp_fu_392_p2, "grp_fu_392_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

updateBuffer::~updateBuffer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete conv2D_ama_addmulcud_U12;
}

void updateBuffer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ik_col_reg_182 = ik_col_1_1_reg_482.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_1))) {
        ik_col_reg_182 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ik_row_reg_158 = ik_row_1_reg_444.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ik_row_reg_158 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul_reg_170 = next_mul_reg_436.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_170 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_20_reg_460.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_1_fu_342_p2.read()))) {
        ik_col_1_1_reg_482 = ik_col_1_1_fu_358_p2.read();
        tmp_1_5_reg_477 = tmp_1_5_fu_352_p2.read();
        tmp_8_1_reg_472 = tmp_8_1_fu_347_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ik_row_1_reg_444 = ik_row_1_fu_230_p2.read();
        next_mul_reg_436 = next_mul_fu_216_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_1_fu_342_p2.read()) && 
   esl_seteq<1,1,1>(tmp_2_reg_427.read(), ap_const_lv1_1)) || 
  (esl_seteq<1,1,1>(tmp_2_reg_427.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, tmp_20_reg_460.read()))))) {
        tmp_13_reg_492 = tmp_13_fu_375_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_1))) {
        tmp_19_reg_455 = tmp_19_fu_302_p3.read();
        tmp_7_reg_449 = tmp_7_fu_236_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_20_reg_460 = tmp_20_fu_310_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_2_reg_427 = tmp_2_fu_206_p2.read();
        tmp_3_reg_431 = tmp_3_fu_212_p1.read();
        tmp_reg_420 = tmp_fu_194_p2.read();
    }
}

void updateBuffer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void updateBuffer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void updateBuffer::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void updateBuffer::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void updateBuffer::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void updateBuffer::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void updateBuffer::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void updateBuffer::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void updateBuffer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void updateBuffer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void updateBuffer::thread_buffer_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        buffer_r_address0 =  (sc_lv<5>) (tmp_14_fu_388_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buffer_r_address0 =  (sc_lv<5>) (tmp_10_1_fu_384_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_r_address0 =  (sc_lv<5>) (tmp_9_1_fu_380_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_r_address0 =  (sc_lv<5>) (tmp_10_fu_331_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_r_address0 =  (sc_lv<5>) (tmp_9_fu_320_p1.read());
    } else {
        buffer_r_address0 = "XXXXX";
    }
}

void updateBuffer::thread_buffer_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void updateBuffer::thread_buffer_r_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        buffer_r_d0 = in_data_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        buffer_r_d0 = buffer_r_q0.read();
    } else {
        buffer_r_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void updateBuffer::thread_buffer_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_20_reg_460.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(tmp_2_reg_427.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void updateBuffer::thread_grp_fu_392_p0() {
    grp_fu_392_p0 = index_row_out.read().range(15-1, 0);
}

void updateBuffer::thread_grp_fu_392_p1() {
    grp_fu_392_p1 = ik_row_reg_158.read().range(15-1, 0);
}

void updateBuffer::thread_grp_fu_392_p2() {
    grp_fu_392_p2 =  (sc_lv<8>) (ap_const_lv15_64);
}

void updateBuffer::thread_ik_col_1_1_fu_358_p2() {
    ik_col_1_1_fu_358_p2 = (!ik_col_reg_182.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_biguint<32>(ik_col_reg_182.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void updateBuffer::thread_ik_col_1_s_fu_336_p2() {
    ik_col_1_s_fu_336_p2 = (ik_col_reg_182.read() | ap_const_lv32_1);
}

void updateBuffer::thread_ik_row_1_fu_230_p2() {
    ik_row_1_fu_230_p2 = (!ik_row_reg_158.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ik_row_reg_158.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void updateBuffer::thread_ik_row_cast_fu_221_p1() {
    ik_row_cast_fu_221_p1 = esl_zext<32,31>(ik_row_reg_158.read());
}

void updateBuffer::thread_in_data_address0() {
    in_data_address0 =  (sc_lv<14>) (tmp_17_cast_fu_371_p1.read());
}

void updateBuffer::thread_in_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_data_ce0 = ap_const_logic_1;
    } else {
        in_data_ce0 = ap_const_logic_0;
    }
}

void updateBuffer::thread_next_mul_fu_216_p2() {
    next_mul_fu_216_p2 = (!phi_mul_reg_170.read().is_01() || !kernel_size_col.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_170.read()) + sc_biguint<32>(kernel_size_col.read()));
}

void updateBuffer::thread_p_lshr_fu_261_p4() {
    p_lshr_fu_261_p4 = p_neg_fu_256_p2.read().range(31, 1);
}

void updateBuffer::thread_p_neg_fu_256_p2() {
    p_neg_fu_256_p2 = (!ap_const_lv32_0.is_01() || !kernel_size_col.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(kernel_size_col.read()));
}

void updateBuffer::thread_p_neg_t_fu_271_p2() {
    p_neg_t_fu_271_p2 = (!ap_const_lv31_0.is_01() || !p_lshr_fu_261_p4.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_0) - sc_biguint<31>(p_lshr_fu_261_p4.read()));
}

void updateBuffer::thread_tmp_10_1_fu_384_p1() {
    tmp_10_1_fu_384_p1 = esl_sext<64,32>(tmp_1_5_reg_477.read());
}

void updateBuffer::thread_tmp_10_fu_331_p1() {
    tmp_10_fu_331_p1 = esl_sext<64,32>(tmp_s_fu_325_p2.read());
}

void updateBuffer::thread_tmp_11_fu_249_p3() {
    tmp_11_fu_249_p3 = kernel_size_col.read().range(31, 31);
}

void updateBuffer::thread_tmp_12_fu_277_p4() {
    tmp_12_fu_277_p4 = kernel_size_col.read().range(31, 1);
}

void updateBuffer::thread_tmp_13_fu_375_p2() {
    tmp_13_fu_375_p2 = (!tmp_reg_420.read().is_01() || !phi_mul_reg_170.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_reg_420.read()) + sc_biguint<32>(phi_mul_reg_170.read()));
}

void updateBuffer::thread_tmp_14_fu_388_p1() {
    tmp_14_fu_388_p1 = esl_sext<64,32>(tmp_13_reg_492.read());
}

void updateBuffer::thread_tmp_15_fu_286_p3() {
    tmp_15_fu_286_p3 = (!tmp_11_fu_249_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_11_fu_249_p3.read()[0].to_bool())? p_neg_t_fu_271_p2.read(): tmp_12_fu_277_p4.read());
}

void updateBuffer::thread_tmp_17_cast_fu_371_p1() {
    tmp_17_cast_fu_371_p1 = esl_sext<64,15>(grp_fu_392_p4.read());
}

void updateBuffer::thread_tmp_18_fu_294_p3() {
    tmp_18_fu_294_p3 = (!tmp_5_fu_242_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_5_fu_242_p3.read()[0].to_bool())? ap_const_lv31_0: tmp_15_fu_286_p3.read());
}

void updateBuffer::thread_tmp_19_fu_302_p3() {
    tmp_19_fu_302_p3 = esl_concat<31,1>(tmp_18_fu_294_p3.read(), ap_const_lv1_0);
}

void updateBuffer::thread_tmp_1_5_fu_352_p2() {
    tmp_1_5_fu_352_p2 = (!ik_col_1_s_fu_336_p2.read().is_01() || !phi_mul_reg_170.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ik_col_1_s_fu_336_p2.read()) + sc_biguint<32>(phi_mul_reg_170.read()));
}

void updateBuffer::thread_tmp_1_fu_200_p2() {
    tmp_1_fu_200_p2 = (!index_col_out.read().is_01() || !kernel_size_col.read().is_01())? sc_lv<32>(): (sc_biguint<32>(index_col_out.read()) + sc_biguint<32>(kernel_size_col.read()));
}

void updateBuffer::thread_tmp_20_fu_310_p2() {
    tmp_20_fu_310_p2 = (!ik_col_reg_182.read().is_01() || !tmp_19_reg_455.read().is_01())? sc_lv<1>(): sc_lv<1>(ik_col_reg_182.read() == tmp_19_reg_455.read());
}

void updateBuffer::thread_tmp_2_fu_206_p2() {
    tmp_2_fu_206_p2 = (!tmp_1_fu_200_p2.read().is_01() || !col_in.read().is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_1_fu_200_p2.read()) < sc_bigint<32>(col_in.read()));
}

void updateBuffer::thread_tmp_3_fu_212_p1() {
    tmp_3_fu_212_p1 = tmp_1_fu_200_p2.read().range(15-1, 0);
}

void updateBuffer::thread_tmp_4_fu_225_p2() {
    tmp_4_fu_225_p2 = (!ik_row_cast_fu_221_p1.read().is_01() || !kernel_size_row.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ik_row_cast_fu_221_p1.read()) < sc_bigint<32>(kernel_size_row.read()));
}

void updateBuffer::thread_tmp_5_fu_242_p3() {
    tmp_5_fu_242_p3 = tmp_reg_420.read().range(31, 31);
}

void updateBuffer::thread_tmp_6_1_fu_342_p2() {
    tmp_6_1_fu_342_p2 = (!ik_col_1_s_fu_336_p2.read().is_01() || !tmp_reg_420.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ik_col_1_s_fu_336_p2.read()) < sc_bigint<32>(tmp_reg_420.read()));
}

void updateBuffer::thread_tmp_7_fu_236_p2() {
    tmp_7_fu_236_p2 = (!phi_mul_reg_170.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_170.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void updateBuffer::thread_tmp_8_1_fu_347_p2() {
    tmp_8_1_fu_347_p2 = (!tmp_7_reg_449.read().is_01() || !ik_col_1_s_fu_336_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_reg_449.read()) + sc_biguint<32>(ik_col_1_s_fu_336_p2.read()));
}

void updateBuffer::thread_tmp_8_fu_315_p2() {
    tmp_8_fu_315_p2 = (!tmp_7_reg_449.read().is_01() || !ik_col_reg_182.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_reg_449.read()) + sc_biguint<32>(ik_col_reg_182.read()));
}

void updateBuffer::thread_tmp_9_1_fu_380_p1() {
    tmp_9_1_fu_380_p1 = esl_sext<64,32>(tmp_8_1_reg_472.read());
}

void updateBuffer::thread_tmp_9_fu_320_p1() {
    tmp_9_fu_320_p1 = esl_sext<64,32>(tmp_8_fu_315_p2.read());
}

void updateBuffer::thread_tmp_fu_194_p2() {
    tmp_fu_194_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !kernel_size_col.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(kernel_size_col.read()));
}

void updateBuffer::thread_tmp_s_fu_325_p2() {
    tmp_s_fu_325_p2 = (!ik_col_reg_182.read().is_01() || !phi_mul_reg_170.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ik_col_reg_182.read()) + sc_biguint<32>(phi_mul_reg_170.read()));
}

void updateBuffer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_1_fu_342_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_20_reg_460.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

