-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=6991,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1770,HLS_SYN_LUT=3006,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_reg_404 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_227_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_reg_410 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_row_out_1_fu_242_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_1_reg_418 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_initializeBuffer_fu_188_ap_ready : STD_LOGIC;
    signal grp_initializeBuffer_fu_188_ap_done : STD_LOGIC;
    signal tmp_44_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal index_col_out_1_s_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_col_out_1_s_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_updateBuffer_fu_174_ap_ready : STD_LOGIC;
    signal grp_updateBuffer_fu_174_ap_done : STD_LOGIC;
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal index_col_out_1_1_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_col_out_1_1_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateConvolution_fu_164_ap_start : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_ap_done : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_ap_idle : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_ap_ready : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_calculateConvolution_fu_164_buffer_r_ce0 : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateConvolution_fu_164_kernel_ce0 : STD_LOGIC;
    signal grp_calculateConvolution_fu_164_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_174_ap_start : STD_LOGIC;
    signal grp_updateBuffer_fu_174_ap_idle : STD_LOGIC;
    signal grp_updateBuffer_fu_174_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_updateBuffer_fu_174_buffer_r_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_174_buffer_r_we0 : STD_LOGIC;
    signal grp_updateBuffer_fu_174_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_174_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateBuffer_fu_174_in_data_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_174_index_col_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_188_ap_start : STD_LOGIC;
    signal grp_initializeBuffer_fu_188_ap_idle : STD_LOGIC;
    signal grp_initializeBuffer_fu_188_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_initializeBuffer_fu_188_buffer_r_ce0 : STD_LOGIC;
    signal grp_initializeBuffer_fu_188_buffer_r_we0 : STD_LOGIC;
    signal grp_initializeBuffer_fu_188_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_188_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_initializeBuffer_fu_188_in_data_ce0 : STD_LOGIC;
    signal index_row_out_reg_129 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_141 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_col_out_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_calculateConvolution_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_updateBuffer_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_initializeBuffer_fu_188_ap_start_reg : STD_LOGIC := '0';
    signal tmp_19_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_cast_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_row_out_cast_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_op_op_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_273_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_39_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_283_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_40_fu_289_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_fu_248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_299_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_fu_307_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_45_fu_328_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_332_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_46_fu_359_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_362_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component calculateConvolution IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component updateBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        index_col_out : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component initializeBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component conv2D_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0);

    grp_calculateConvolution_fu_164 : component calculateConvolution
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calculateConvolution_fu_164_ap_start,
        ap_done => grp_calculateConvolution_fu_164_ap_done,
        ap_idle => grp_calculateConvolution_fu_164_ap_idle,
        ap_ready => grp_calculateConvolution_fu_164_ap_ready,
        buffer_r_address0 => grp_calculateConvolution_fu_164_buffer_r_address0,
        buffer_r_ce0 => grp_calculateConvolution_fu_164_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        kernel_address0 => grp_calculateConvolution_fu_164_kernel_address0,
        kernel_ce0 => grp_calculateConvolution_fu_164_kernel_ce0,
        kernel_q0 => kernel_q0,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        ap_return => grp_calculateConvolution_fu_164_ap_return);

    grp_updateBuffer_fu_174 : component updateBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateBuffer_fu_174_ap_start,
        ap_done => grp_updateBuffer_fu_174_ap_done,
        ap_idle => grp_updateBuffer_fu_174_ap_idle,
        ap_ready => grp_updateBuffer_fu_174_ap_ready,
        buffer_r_address0 => grp_updateBuffer_fu_174_buffer_r_address0,
        buffer_r_ce0 => grp_updateBuffer_fu_174_buffer_r_ce0,
        buffer_r_we0 => grp_updateBuffer_fu_174_buffer_r_we0,
        buffer_r_d0 => grp_updateBuffer_fu_174_buffer_r_d0,
        buffer_r_q0 => buffer_q0,
        in_data_address0 => grp_updateBuffer_fu_174_in_data_address0,
        in_data_ce0 => grp_updateBuffer_fu_174_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_129,
        index_col_out => grp_updateBuffer_fu_174_index_col_out,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        col_in => col_in);

    grp_initializeBuffer_fu_188 : component initializeBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initializeBuffer_fu_188_ap_start,
        ap_done => grp_initializeBuffer_fu_188_ap_done,
        ap_idle => grp_initializeBuffer_fu_188_ap_idle,
        ap_ready => grp_initializeBuffer_fu_188_ap_ready,
        buffer_r_address0 => grp_initializeBuffer_fu_188_buffer_r_address0,
        buffer_r_ce0 => grp_initializeBuffer_fu_188_buffer_r_ce0,
        buffer_r_we0 => grp_initializeBuffer_fu_188_buffer_r_we0,
        buffer_r_d0 => grp_initializeBuffer_fu_188_buffer_r_d0,
        in_data_address0 => grp_initializeBuffer_fu_188_in_data_address0,
        in_data_ce0 => grp_initializeBuffer_fu_188_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_129,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_calculateConvolution_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calculateConvolution_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((tmp_44_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_calculateConvolution_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateConvolution_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_calculateConvolution_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initializeBuffer_fu_188_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initializeBuffer_fu_188_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_19_fu_237_p2 = ap_const_lv1_1))) then 
                    grp_initializeBuffer_fu_188_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initializeBuffer_fu_188_ap_ready = ap_const_logic_1)) then 
                    grp_initializeBuffer_fu_188_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateBuffer_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateBuffer_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_updateBuffer_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateBuffer_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_updateBuffer_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    index_col_out_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_updateBuffer_fu_174_ap_done = ap_const_logic_1))) then 
                index_col_out_reg_152 <= index_col_out_1_1_reg_441;
            elsif (((grp_initializeBuffer_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_col_out_reg_152 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_row_out_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done) and ((tmp_44_reg_428 = ap_const_lv1_1) or (tmp_25_1_fu_348_p2 = ap_const_lv1_0)))) then 
                index_row_out_reg_129 <= index_row_out_1_reg_418;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_row_out_reg_129 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done) and ((tmp_44_reg_428 = ap_const_lv1_1) or (tmp_25_1_fu_348_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_141 <= next_mul_reg_410;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_141 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_25_1_fu_348_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                index_col_out_1_1_reg_441 <= index_col_out_1_1_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                    index_col_out_1_s_reg_432(31 downto 1) <= index_col_out_1_s_fu_342_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_row_out_1_reg_418 <= index_row_out_1_fu_242_p2;
                next_mul_reg_410 <= next_mul_fu_227_p2;
                tmp_37_reg_404 <= tmp_37_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_18_reg_396 <= tmp_18_fu_217_p2;
                tmp_s_reg_391 <= tmp_s_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_initializeBuffer_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_43_reg_423(31 downto 1) <= tmp_43_fu_315_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_44_reg_428 <= tmp_44_fu_323_p2;
            end if;
        end if;
    end process;
    tmp_43_reg_423(0) <= '0';
    index_col_out_1_s_reg_432(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_initializeBuffer_fu_188_ap_done, tmp_44_fu_323_p2, tmp_44_reg_428, ap_CS_fsm_state4, ap_CS_fsm_state7, grp_updateBuffer_fu_174_ap_done, ap_block_state7_on_subcall_done, tmp_25_1_fu_348_p2, grp_calculateConvolution_fu_164_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state9, tmp_19_fu_237_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_19_fu_237_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_initializeBuffer_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_44_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done) and ((tmp_44_reg_428 = ap_const_lv1_1) or (tmp_25_1_fu_348_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_25_1_fu_348_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_updateBuffer_fu_174_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state7_on_subcall_done_assign_proc : process(tmp_44_reg_428, grp_updateBuffer_fu_174_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((tmp_44_reg_428 = ap_const_lv1_0) and (grp_updateBuffer_fu_174_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_19_fu_237_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_19_fu_237_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_19_fu_237_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_19_fu_237_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_calculateConvolution_fu_164_buffer_r_address0, grp_updateBuffer_fu_174_buffer_r_address0, grp_initializeBuffer_fu_188_buffer_r_address0, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_address0 <= grp_initializeBuffer_fu_188_buffer_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            buffer_address0 <= grp_updateBuffer_fu_174_buffer_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_address0 <= grp_calculateConvolution_fu_164_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_calculateConvolution_fu_164_buffer_r_ce0, grp_updateBuffer_fu_174_buffer_r_ce0, grp_initializeBuffer_fu_188_buffer_r_ce0, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_ce0 <= grp_initializeBuffer_fu_188_buffer_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            buffer_ce0 <= grp_updateBuffer_fu_174_buffer_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_ce0 <= grp_calculateConvolution_fu_164_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_updateBuffer_fu_174_buffer_r_d0, grp_initializeBuffer_fu_188_buffer_r_d0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_d0 <= grp_initializeBuffer_fu_188_buffer_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            buffer_d0 <= grp_updateBuffer_fu_174_buffer_r_d0;
        else 
            buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_updateBuffer_fu_174_buffer_r_we0, grp_initializeBuffer_fu_188_buffer_r_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_we0 <= grp_initializeBuffer_fu_188_buffer_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            buffer_we0 <= grp_updateBuffer_fu_174_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculateConvolution_fu_164_ap_start <= grp_calculateConvolution_fu_164_ap_start_reg;
    grp_initializeBuffer_fu_188_ap_start <= grp_initializeBuffer_fu_188_ap_start_reg;
    grp_updateBuffer_fu_174_ap_start <= grp_updateBuffer_fu_174_ap_start_reg;

    grp_updateBuffer_fu_174_index_col_out_assign_proc : process(tmp_44_reg_428, index_col_out_1_s_reg_432, ap_CS_fsm_state7, index_col_out_reg_152, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_updateBuffer_fu_174_index_col_out <= index_col_out_1_s_reg_432;
        elsif (((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_updateBuffer_fu_174_index_col_out <= index_col_out_reg_152;
        else 
            grp_updateBuffer_fu_174_index_col_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_address0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_updateBuffer_fu_174_in_data_address0, grp_initializeBuffer_fu_188_in_data_address0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_address0 <= grp_initializeBuffer_fu_188_in_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            in_data_address0 <= grp_updateBuffer_fu_174_in_data_address0;
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(ap_CS_fsm_state3, tmp_44_reg_428, ap_CS_fsm_state7, grp_updateBuffer_fu_174_in_data_ce0, grp_initializeBuffer_fu_188_in_data_ce0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= grp_initializeBuffer_fu_188_in_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_44_reg_428 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            in_data_ce0 <= grp_updateBuffer_fu_174_in_data_ce0;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_1_1_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(index_col_out_reg_152));
    index_col_out_1_s_fu_342_p2 <= (index_col_out_reg_152 or ap_const_lv32_1);
    index_row_out_1_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(index_row_out_reg_129));
    index_row_out_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_row_out_reg_129),32));
    kernel_address0 <= grp_calculateConvolution_fu_164_kernel_address0;

    kernel_ce0_assign_proc : process(grp_calculateConvolution_fu_164_kernel_ce0, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            kernel_ce0 <= grp_calculateConvolution_fu_164_kernel_ce0;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul_reg_141));

    out_data_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, tmp_25_cast_fu_337_p1, tmp_27_cast_fu_367_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_data_address0 <= tmp_27_cast_fu_367_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_data_address0 <= tmp_25_cast_fu_337_p1(14 - 1 downto 0);
        else 
            out_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_data_ce0_assign_proc : process(grp_calculateConvolution_fu_164_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1)))) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= grp_calculateConvolution_fu_164_ap_return;

    out_data_we0_assign_proc : process(grp_calculateConvolution_fu_164_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_164_ap_done = ap_const_logic_1)))) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_fu_273_p4 <= p_neg_fu_268_p2(31 downto 1);
    p_neg_fu_268_p2 <= (tmp_18_reg_396 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_273_p4));
    tmp_17_fu_211_p2 <= std_logic_vector(unsigned(col_in) + unsigned(ap_const_lv32_1));
    tmp_18_fu_217_p2 <= std_logic_vector(unsigned(tmp_17_fu_211_p2) - unsigned(kernel_size_col));
    tmp_18_op_op_fu_255_p2 <= std_logic_vector(unsigned(tmp_18_reg_396) + unsigned(ap_const_lv32_1));
    tmp_19_fu_237_p2 <= "1" when (signed(index_row_out_cast_fu_233_p1) < signed(tmp_s_reg_391)) else "0";
    tmp_24_fu_332_p2 <= std_logic_vector(unsigned(tmp_37_reg_404) + unsigned(tmp_45_fu_328_p1));
    tmp_25_1_fu_348_p2 <= "1" when (signed(index_col_out_1_s_fu_342_p2) < signed(tmp_18_reg_396)) else "0";
    tmp_25_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_332_p2),64));
    tmp_26_fu_362_p2 <= std_logic_vector(unsigned(tmp_37_reg_404) + unsigned(tmp_46_fu_359_p1));
    tmp_27_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_362_p2),64));
    tmp_37_fu_223_p1 <= phi_mul_reg_141(15 - 1 downto 0);
    tmp_38_fu_248_p3 <= tmp_18_reg_396(31 downto 31);
    tmp_39_fu_260_p3 <= tmp_18_op_op_fu_255_p2(31 downto 31);
    tmp_40_fu_289_p4 <= tmp_18_op_op_fu_255_p2(31 downto 1);
    tmp_41_fu_299_p3 <= 
        p_neg_t_fu_283_p2 when (tmp_39_fu_260_p3(0) = '1') else 
        tmp_40_fu_289_p4;
    tmp_42_fu_307_p3 <= 
        ap_const_lv31_0 when (tmp_38_fu_248_p3(0) = '1') else 
        tmp_41_fu_299_p3;
    tmp_43_fu_315_p3 <= (tmp_42_fu_307_p3 & ap_const_lv1_0);
    tmp_44_fu_323_p2 <= "1" when (index_col_out_reg_152 = tmp_43_reg_423) else "0";
    tmp_45_fu_328_p1 <= index_col_out_reg_152(15 - 1 downto 0);
    tmp_46_fu_359_p1 <= index_col_out_1_s_reg_432(15 - 1 downto 0);
    tmp_fu_199_p2 <= std_logic_vector(unsigned(row_in) + unsigned(ap_const_lv32_1));
    tmp_s_fu_205_p2 <= std_logic_vector(unsigned(tmp_fu_199_p2) - unsigned(kernel_size_row));
end behav;
