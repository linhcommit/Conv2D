-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity initializeBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of initializeBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal smax_cast_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_2_fu_202_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_2_reg_404 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_buffer_1_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_1_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_372_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_reg_414 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_33_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_19_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_17_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_1_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_2_1_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_2_1_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_reg_137 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_s_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ik_col_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_177_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_181_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_cast_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_216_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_213_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal kernel_size_col_op_o_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_251_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_261_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_fu_267_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_28_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_277_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_32_fu_285_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_fu_306_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_310_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_21_fu_310_p2 : signal is "no";
    signal ik_col_2_s_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_342_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_fu_346_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of tmp_22_fu_346_p2 : signal is "no";
    signal tmp_18_fu_372_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_372_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component conv2D_mul_mul_8nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    conv2D_mul_mul_8nbkb_U1 : component conv2D_mul_mul_8nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => tmp_18_fu_372_p0,
        din1 => tmp_18_fu_372_p1,
        dout => tmp_18_fu_372_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_buffer_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_17_1_fu_337_p2 = ap_const_lv1_0) or (tmp_34_reg_425 = ap_const_lv1_1)))) then 
                i_buffer_reg_125 <= i_buffer_1_reg_409;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_buffer_reg_125 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_buffer_s_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_buffer_s_reg_148 <= tmp_19_1_reg_447;
            elsif (((tmp_s_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_buffer_s_reg_148 <= i_buffer_reg_125;
            end if; 
        end if;
    end process;

    ik_col_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ik_col_reg_159 <= ik_col_2_1_reg_452;
            elsif (((tmp_s_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_159 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_row_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_17_1_fu_337_p2 = ap_const_lv1_0) or (tmp_34_reg_425 = ap_const_lv1_1)))) then 
                ik_row_reg_137 <= ik_row_2_reg_404;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ik_row_reg_137 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_buffer_1_reg_409 <= i_buffer_1_fu_208_p2;
                tmp_18_reg_414 <= tmp_18_fu_372_p2;
                    tmp_33_reg_420(31 downto 1) <= tmp_33_fu_293_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_425 = ap_const_lv1_0) and (tmp_17_1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ik_col_2_1_reg_452 <= ik_col_2_1_fu_362_p2;
                tmp_19_1_reg_447 <= tmp_19_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_2_reg_404 <= ik_row_2_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    smax_cast_reg_396(30 downto 0) <= smax_cast_fu_189_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_425 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_19_reg_434 <= tmp_19_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_34_reg_425 <= tmp_34_fu_301_p2;
            end if;
        end if;
    end process;
    smax_cast_reg_396(31) <= '0';
    tmp_33_reg_420(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_197_p2, tmp_34_reg_425, ap_CS_fsm_state4, tmp_17_1_fu_337_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_17_1_fu_337_p2 = ap_const_lv1_0) or (tmp_34_reg_425 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_197_p2)
    begin
        if ((((tmp_s_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_197_p2)
    begin
        if (((tmp_s_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_20_fu_326_p1, tmp_20_1_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_address0 <= tmp_20_1_fu_368_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_address0 <= tmp_20_fu_326_p1(5 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= in_data_q0;

    buffer_r_we0_assign_proc : process(tmp_34_reg_425, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((tmp_34_reg_425 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_buffer_1_fu_208_p2 <= std_logic_vector(unsigned(smax_cast_reg_396) + unsigned(i_buffer_reg_125));
    ik_col_2_1_fu_362_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(ik_col_reg_159));
    ik_col_2_s_fu_331_p2 <= (ik_col_reg_159 or ap_const_lv32_1);
    ik_row_2_fu_202_p2 <= std_logic_vector(unsigned(ik_row_reg_137) + unsigned(ap_const_lv31_1));
    ik_row_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_137),32));

    in_data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_22_cast_fu_315_p1, tmp_23_cast_fu_351_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_address0 <= tmp_23_cast_fu_351_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_address0 <= tmp_22_cast_fu_315_p1(14 - 1 downto 0);
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_size_col_op_o_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(kernel_size_col));
    p_lshr_fu_251_p4 <= p_neg_fu_246_p2(31 downto 1);
    p_neg_fu_246_p2 <= (kernel_size_col xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_251_p4));
    smax_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_181_p3),32));
    smax_fu_181_p3 <= 
        tmp_24_fu_177_p1 when (tmp_fu_171_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_17_1_fu_337_p2 <= "1" when (signed(ik_col_2_s_fu_331_p2) < signed(kernel_size_col)) else "0";
    tmp_18_fu_372_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    tmp_18_fu_372_p1 <= std_logic_vector(unsigned(tmp_26_fu_216_p1) + unsigned(tmp_25_fu_213_p1));
    tmp_19_1_fu_356_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(i_buffer_s_reg_148));
    tmp_19_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_buffer_s_reg_148));
        tmp_20_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_reg_434),64));

        tmp_20_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_buffer_s_reg_148),64));

    tmp_21_fu_310_p2 <= std_logic_vector(signed(tmp_18_reg_414) + signed(tmp_35_fu_306_p1));
        tmp_22_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_310_p2),64));

    tmp_22_fu_346_p2 <= std_logic_vector(signed(tmp_18_reg_414) + signed(tmp_36_fu_342_p1));
        tmp_23_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_346_p2),64));

    tmp_24_fu_177_p1 <= kernel_size_col(31 - 1 downto 0);
    tmp_25_fu_213_p1 <= index_row_out(15 - 1 downto 0);
    tmp_26_fu_216_p1 <= ik_row_reg_137(15 - 1 downto 0);
    tmp_28_fu_226_p3 <= kernel_size_col(31 downto 31);
    tmp_29_fu_238_p3 <= kernel_size_col_op_o_fu_233_p2(31 downto 31);
    tmp_30_fu_267_p4 <= kernel_size_col_op_o_fu_233_p2(31 downto 1);
    tmp_31_fu_277_p3 <= 
        p_neg_t_fu_261_p2 when (tmp_29_fu_238_p3(0) = '1') else 
        tmp_30_fu_267_p4;
    tmp_32_fu_285_p3 <= 
        ap_const_lv31_0 when (tmp_28_fu_226_p3(0) = '1') else 
        tmp_31_fu_277_p3;
    tmp_33_fu_293_p3 <= (tmp_32_fu_285_p3 & ap_const_lv1_0);
    tmp_34_fu_301_p2 <= "1" when (ik_col_reg_159 = tmp_33_reg_420) else "0";
    tmp_35_fu_306_p1 <= ik_col_reg_159(15 - 1 downto 0);
    tmp_36_fu_342_p1 <= ik_col_2_s_fu_331_p2(15 - 1 downto 0);
    tmp_fu_171_p2 <= "1" when (signed(kernel_size_col) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_197_p2 <= "1" when (signed(ik_row_cast_fu_193_p1) < signed(kernel_size_row)) else "0";
end behav;
