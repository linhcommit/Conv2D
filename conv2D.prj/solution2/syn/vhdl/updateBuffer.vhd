-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity updateBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
    index_col_out : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of updateBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_212_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_reg_431 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ik_row_1_fu_230_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_1_reg_444 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_302_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_1_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_1_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_1_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_5_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_1_1_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_1_1_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ik_row_reg_158 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phi_mul_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_1_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_cast_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_261_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_271_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_277_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_286_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_294_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_1_s_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component conv2D_ama_addmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    conv2D_ama_addmulcud_U12 : component conv2D_ama_addmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 8,
        din3_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        din2 => grp_fu_392_p2,
        din3 => tmp_3_reg_431,
        dout => grp_fu_392_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ik_col_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ik_col_reg_182 <= ik_col_1_1_reg_482;
            elsif (((tmp_4_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_182 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_row_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                ik_row_reg_158 <= ik_row_1_reg_444;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ik_row_reg_158 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul_reg_170 <= next_mul_reg_436;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_170 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_reg_460 = ap_const_lv1_0) and (tmp_6_1_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ik_col_1_1_reg_482 <= ik_col_1_1_fu_358_p2;
                tmp_1_5_reg_477 <= tmp_1_5_fu_352_p2;
                tmp_8_1_reg_472 <= tmp_8_1_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_1_reg_444 <= ik_row_1_fu_230_p2;
                next_mul_reg_436 <= next_mul_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((tmp_20_reg_460 = ap_const_lv1_1) and (tmp_2_reg_427 = ap_const_lv1_1)) or ((tmp_6_1_fu_342_p2 = ap_const_lv1_0) and (tmp_2_reg_427 = ap_const_lv1_1))))) then
                tmp_13_reg_492 <= tmp_13_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_19_reg_455(31 downto 1) <= tmp_19_fu_302_p3(31 downto 1);
                tmp_7_reg_449 <= tmp_7_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_20_reg_460 <= tmp_20_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_2_reg_427 <= tmp_2_fu_206_p2;
                tmp_3_reg_431 <= tmp_3_fu_212_p1;
                tmp_reg_420 <= tmp_fu_194_p2;
            end if;
        end if;
    end process;
    tmp_19_reg_455(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_4_fu_225_p2, tmp_20_reg_460, ap_CS_fsm_state4, tmp_6_1_fu_342_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_4_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_6_1_fu_342_p2 = ap_const_lv1_0) or (tmp_20_reg_460 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_4_fu_225_p2)
    begin
        if ((((tmp_4_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_4_fu_225_p2)
    begin
        if (((tmp_4_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_9_fu_320_p1, tmp_10_fu_331_p1, tmp_9_1_fu_380_p1, tmp_10_1_fu_384_p1, tmp_14_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_r_address0 <= tmp_14_fu_388_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_r_address0 <= tmp_10_1_fu_384_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_address0 <= tmp_9_1_fu_380_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_address0 <= tmp_10_fu_331_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_address0 <= tmp_9_fu_320_p1(5 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_d0_assign_proc : process(buffer_r_q0, in_data_q0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_r_d0 <= in_data_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_r_d0 <= buffer_r_q0;
        else 
            buffer_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(tmp_2_reg_427, tmp_20_reg_460, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_20_reg_460 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_2_reg_427 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_392_p0 <= index_row_out(15 - 1 downto 0);
    grp_fu_392_p1 <= ik_row_reg_158(15 - 1 downto 0);
    grp_fu_392_p2 <= ap_const_lv15_64(8 - 1 downto 0);
    ik_col_1_1_fu_358_p2 <= std_logic_vector(unsigned(ik_col_reg_182) + unsigned(ap_const_lv32_2));
    ik_col_1_s_fu_336_p2 <= (ik_col_reg_182 or ap_const_lv32_1);
    ik_row_1_fu_230_p2 <= std_logic_vector(unsigned(ik_row_reg_158) + unsigned(ap_const_lv31_1));
    ik_row_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_158),32));
    in_data_address0 <= tmp_17_cast_fu_371_p1(14 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_216_p2 <= std_logic_vector(unsigned(phi_mul_reg_170) + unsigned(kernel_size_col));
    p_lshr_fu_261_p4 <= p_neg_fu_256_p2(31 downto 1);
    p_neg_fu_256_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(kernel_size_col));
    p_neg_t_fu_271_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_261_p4));
        tmp_10_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_5_reg_477),64));

        tmp_10_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_325_p2),64));

    tmp_11_fu_249_p3 <= kernel_size_col(31 downto 31);
    tmp_12_fu_277_p4 <= kernel_size_col(31 downto 1);
    tmp_13_fu_375_p2 <= std_logic_vector(unsigned(tmp_reg_420) + unsigned(phi_mul_reg_170));
        tmp_14_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_492),64));

    tmp_15_fu_286_p3 <= 
        p_neg_t_fu_271_p2 when (tmp_11_fu_249_p3(0) = '1') else 
        tmp_12_fu_277_p4;
        tmp_17_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_392_p4),64));

    tmp_18_fu_294_p3 <= 
        ap_const_lv31_0 when (tmp_5_fu_242_p3(0) = '1') else 
        tmp_15_fu_286_p3;
    tmp_19_fu_302_p3 <= (tmp_18_fu_294_p3 & ap_const_lv1_0);
    tmp_1_5_fu_352_p2 <= std_logic_vector(unsigned(ik_col_1_s_fu_336_p2) + unsigned(phi_mul_reg_170));
    tmp_1_fu_200_p2 <= std_logic_vector(unsigned(index_col_out) + unsigned(kernel_size_col));
    tmp_20_fu_310_p2 <= "1" when (ik_col_reg_182 = tmp_19_reg_455) else "0";
    tmp_2_fu_206_p2 <= "1" when (signed(tmp_1_fu_200_p2) < signed(col_in)) else "0";
    tmp_3_fu_212_p1 <= tmp_1_fu_200_p2(15 - 1 downto 0);
    tmp_4_fu_225_p2 <= "1" when (signed(ik_row_cast_fu_221_p1) < signed(kernel_size_row)) else "0";
    tmp_5_fu_242_p3 <= tmp_reg_420(31 downto 31);
    tmp_6_1_fu_342_p2 <= "1" when (signed(ik_col_1_s_fu_336_p2) < signed(tmp_reg_420)) else "0";
    tmp_7_fu_236_p2 <= std_logic_vector(unsigned(phi_mul_reg_170) + unsigned(ap_const_lv32_1));
    tmp_8_1_fu_347_p2 <= std_logic_vector(unsigned(tmp_7_reg_449) + unsigned(ik_col_1_s_fu_336_p2));
    tmp_8_fu_315_p2 <= std_logic_vector(unsigned(tmp_7_reg_449) + unsigned(ik_col_reg_182));
        tmp_9_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_1_reg_472),64));

        tmp_9_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_315_p2),64));

    tmp_fu_194_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(kernel_size_col));
    tmp_s_fu_325_p2 <= std_logic_vector(unsigned(ik_col_reg_182) + unsigned(phi_mul_reg_170));
end behav;
