// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=6991,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1770,HLS_SYN_LUT=3006,HLS_VERSION=2018_3}" *)

module conv2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_address0,
        in_data_ce0,
        in_data_q0,
        out_data_address0,
        out_data_ce0,
        out_data_we0,
        out_data_d0,
        row_in,
        col_in,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_size_row,
        kernel_size_col
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] in_data_address0;
output   in_data_ce0;
input  [31:0] in_data_q0;
output  [13:0] out_data_address0;
output   out_data_ce0;
output   out_data_we0;
output  [31:0] out_data_d0;
input  [31:0] row_in;
input  [31:0] col_in;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
input  [31:0] kernel_size_row;
input  [31:0] kernel_size_col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] in_data_address0;
reg in_data_ce0;
reg[13:0] out_data_address0;
reg out_data_ce0;
reg out_data_we0;
reg kernel_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_s_fu_205_p2;
reg   [31:0] tmp_s_reg_391;
wire   [31:0] tmp_18_fu_217_p2;
reg   [31:0] tmp_18_reg_396;
wire   [14:0] tmp_37_fu_223_p1;
reg   [14:0] tmp_37_reg_404;
wire    ap_CS_fsm_state2;
wire   [37:0] next_mul_fu_227_p2;
reg   [37:0] next_mul_reg_410;
wire   [30:0] index_row_out_1_fu_242_p2;
reg   [30:0] index_row_out_1_reg_418;
wire   [31:0] tmp_43_fu_315_p3;
reg   [31:0] tmp_43_reg_423;
wire    ap_CS_fsm_state3;
wire    grp_initializeBuffer_fu_188_ap_ready;
wire    grp_initializeBuffer_fu_188_ap_done;
wire   [0:0] tmp_44_fu_323_p2;
reg   [0:0] tmp_44_reg_428;
wire    ap_CS_fsm_state4;
wire   [31:0] index_col_out_1_s_fu_342_p2;
reg   [31:0] index_col_out_1_s_reg_432;
wire    ap_CS_fsm_state7;
wire    grp_updateBuffer_fu_174_ap_ready;
wire    grp_updateBuffer_fu_174_ap_done;
reg    ap_block_state7_on_subcall_done;
wire   [31:0] index_col_out_1_1_fu_353_p2;
reg   [31:0] index_col_out_1_1_reg_441;
wire   [0:0] tmp_25_1_fu_348_p2;
reg   [4:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [31:0] buffer_d0;
wire   [31:0] buffer_q0;
wire    grp_calculateConvolution_fu_164_ap_start;
wire    grp_calculateConvolution_fu_164_ap_done;
wire    grp_calculateConvolution_fu_164_ap_idle;
wire    grp_calculateConvolution_fu_164_ap_ready;
wire   [4:0] grp_calculateConvolution_fu_164_buffer_r_address0;
wire    grp_calculateConvolution_fu_164_buffer_r_ce0;
wire   [9:0] grp_calculateConvolution_fu_164_kernel_address0;
wire    grp_calculateConvolution_fu_164_kernel_ce0;
wire   [31:0] grp_calculateConvolution_fu_164_ap_return;
wire    grp_updateBuffer_fu_174_ap_start;
wire    grp_updateBuffer_fu_174_ap_idle;
wire   [4:0] grp_updateBuffer_fu_174_buffer_r_address0;
wire    grp_updateBuffer_fu_174_buffer_r_ce0;
wire    grp_updateBuffer_fu_174_buffer_r_we0;
wire   [31:0] grp_updateBuffer_fu_174_buffer_r_d0;
wire   [13:0] grp_updateBuffer_fu_174_in_data_address0;
wire    grp_updateBuffer_fu_174_in_data_ce0;
reg   [31:0] grp_updateBuffer_fu_174_index_col_out;
wire    grp_initializeBuffer_fu_188_ap_start;
wire    grp_initializeBuffer_fu_188_ap_idle;
wire   [4:0] grp_initializeBuffer_fu_188_buffer_r_address0;
wire    grp_initializeBuffer_fu_188_buffer_r_ce0;
wire    grp_initializeBuffer_fu_188_buffer_r_we0;
wire   [31:0] grp_initializeBuffer_fu_188_buffer_r_d0;
wire   [13:0] grp_initializeBuffer_fu_188_in_data_address0;
wire    grp_initializeBuffer_fu_188_in_data_ce0;
reg   [30:0] index_row_out_reg_129;
reg   [37:0] phi_mul_reg_141;
reg   [31:0] index_col_out_reg_152;
wire    ap_CS_fsm_state11;
reg    grp_calculateConvolution_fu_164_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg    grp_updateBuffer_fu_174_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
reg    grp_initializeBuffer_fu_188_ap_start_reg;
wire   [0:0] tmp_19_fu_237_p2;
wire   [63:0] tmp_25_cast_fu_337_p1;
wire   [63:0] tmp_27_cast_fu_367_p1;
wire   [31:0] tmp_fu_199_p2;
wire   [31:0] tmp_17_fu_211_p2;
wire   [31:0] index_row_out_cast_fu_233_p1;
wire   [31:0] tmp_18_op_op_fu_255_p2;
wire   [31:0] p_neg_fu_268_p2;
wire   [30:0] p_lshr_fu_273_p4;
wire   [0:0] tmp_39_fu_260_p3;
wire   [30:0] p_neg_t_fu_283_p2;
wire   [30:0] tmp_40_fu_289_p4;
wire   [0:0] tmp_38_fu_248_p3;
wire   [30:0] tmp_41_fu_299_p3;
wire   [30:0] tmp_42_fu_307_p3;
wire   [14:0] tmp_45_fu_328_p1;
wire   [14:0] tmp_24_fu_332_p2;
wire   [14:0] tmp_46_fu_359_p1;
wire   [14:0] tmp_26_fu_362_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_calculateConvolution_fu_164_ap_start_reg = 1'b0;
#0 grp_updateBuffer_fu_174_ap_start_reg = 1'b0;
#0 grp_initializeBuffer_fu_188_ap_start_reg = 1'b0;
end

conv2D_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .q0(buffer_q0)
);

calculateConvolution grp_calculateConvolution_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_calculateConvolution_fu_164_ap_start),
    .ap_done(grp_calculateConvolution_fu_164_ap_done),
    .ap_idle(grp_calculateConvolution_fu_164_ap_idle),
    .ap_ready(grp_calculateConvolution_fu_164_ap_ready),
    .buffer_r_address0(grp_calculateConvolution_fu_164_buffer_r_address0),
    .buffer_r_ce0(grp_calculateConvolution_fu_164_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .kernel_address0(grp_calculateConvolution_fu_164_kernel_address0),
    .kernel_ce0(grp_calculateConvolution_fu_164_kernel_ce0),
    .kernel_q0(kernel_q0),
    .kernel_size_row(kernel_size_row),
    .kernel_size_col(kernel_size_col),
    .ap_return(grp_calculateConvolution_fu_164_ap_return)
);

updateBuffer grp_updateBuffer_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_updateBuffer_fu_174_ap_start),
    .ap_done(grp_updateBuffer_fu_174_ap_done),
    .ap_idle(grp_updateBuffer_fu_174_ap_idle),
    .ap_ready(grp_updateBuffer_fu_174_ap_ready),
    .buffer_r_address0(grp_updateBuffer_fu_174_buffer_r_address0),
    .buffer_r_ce0(grp_updateBuffer_fu_174_buffer_r_ce0),
    .buffer_r_we0(grp_updateBuffer_fu_174_buffer_r_we0),
    .buffer_r_d0(grp_updateBuffer_fu_174_buffer_r_d0),
    .buffer_r_q0(buffer_q0),
    .in_data_address0(grp_updateBuffer_fu_174_in_data_address0),
    .in_data_ce0(grp_updateBuffer_fu_174_in_data_ce0),
    .in_data_q0(in_data_q0),
    .index_row_out(index_row_out_reg_129),
    .index_col_out(grp_updateBuffer_fu_174_index_col_out),
    .kernel_size_row(kernel_size_row),
    .kernel_size_col(kernel_size_col),
    .col_in(col_in)
);

initializeBuffer grp_initializeBuffer_fu_188(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_initializeBuffer_fu_188_ap_start),
    .ap_done(grp_initializeBuffer_fu_188_ap_done),
    .ap_idle(grp_initializeBuffer_fu_188_ap_idle),
    .ap_ready(grp_initializeBuffer_fu_188_ap_ready),
    .buffer_r_address0(grp_initializeBuffer_fu_188_buffer_r_address0),
    .buffer_r_ce0(grp_initializeBuffer_fu_188_buffer_r_ce0),
    .buffer_r_we0(grp_initializeBuffer_fu_188_buffer_r_we0),
    .buffer_r_d0(grp_initializeBuffer_fu_188_buffer_r_d0),
    .in_data_address0(grp_initializeBuffer_fu_188_in_data_address0),
    .in_data_ce0(grp_initializeBuffer_fu_188_in_data_ce0),
    .in_data_q0(in_data_q0),
    .index_row_out(index_row_out_reg_129),
    .kernel_size_row(kernel_size_row),
    .kernel_size_col(kernel_size_col)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_calculateConvolution_fu_164_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((tmp_44_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_calculateConvolution_fu_164_ap_start_reg <= 1'b1;
        end else if ((grp_calculateConvolution_fu_164_ap_ready == 1'b1)) begin
            grp_calculateConvolution_fu_164_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_initializeBuffer_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (tmp_19_fu_237_p2 == 1'd1))) begin
            grp_initializeBuffer_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_initializeBuffer_fu_188_ap_ready == 1'b1)) begin
            grp_initializeBuffer_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_updateBuffer_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
            grp_updateBuffer_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_updateBuffer_fu_174_ap_ready == 1'b1)) begin
            grp_updateBuffer_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_updateBuffer_fu_174_ap_done == 1'b1))) begin
        index_col_out_reg_152 <= index_col_out_1_1_reg_441;
    end else if (((grp_initializeBuffer_fu_188_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        index_col_out_reg_152 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & ((tmp_44_reg_428 == 1'd1) | (tmp_25_1_fu_348_p2 == 1'd0)))) begin
        index_row_out_reg_129 <= index_row_out_1_reg_418;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_row_out_reg_129 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & ((tmp_44_reg_428 == 1'd1) | (tmp_25_1_fu_348_p2 == 1'd0)))) begin
        phi_mul_reg_141 <= next_mul_reg_410;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_141 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (tmp_25_1_fu_348_p2 == 1'd1) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        index_col_out_1_1_reg_441 <= index_col_out_1_1_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        index_col_out_1_s_reg_432[31 : 1] <= index_col_out_1_s_fu_342_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        index_row_out_1_reg_418 <= index_row_out_1_fu_242_p2;
        next_mul_reg_410 <= next_mul_fu_227_p2;
        tmp_37_reg_404 <= tmp_37_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_18_reg_396 <= tmp_18_fu_217_p2;
        tmp_s_reg_391 <= tmp_s_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_initializeBuffer_fu_188_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_43_reg_423[31 : 1] <= tmp_43_fu_315_p3[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_44_reg_428 <= tmp_44_fu_323_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_19_fu_237_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_19_fu_237_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address0 = grp_initializeBuffer_fu_188_buffer_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        buffer_address0 = grp_updateBuffer_fu_174_buffer_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_address0 = grp_calculateConvolution_fu_164_buffer_r_address0;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce0 = grp_initializeBuffer_fu_188_buffer_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        buffer_ce0 = grp_updateBuffer_fu_174_buffer_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_ce0 = grp_calculateConvolution_fu_164_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_d0 = grp_initializeBuffer_fu_188_buffer_r_d0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        buffer_d0 = grp_updateBuffer_fu_174_buffer_r_d0;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we0 = grp_initializeBuffer_fu_188_buffer_r_we0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        buffer_we0 = grp_updateBuffer_fu_174_buffer_r_we0;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_updateBuffer_fu_174_index_col_out = index_col_out_1_s_reg_432;
    end else if (((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_updateBuffer_fu_174_index_col_out = index_col_out_reg_152;
    end else begin
        grp_updateBuffer_fu_174_index_col_out = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_data_address0 = grp_initializeBuffer_fu_188_in_data_address0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        in_data_address0 = grp_updateBuffer_fu_174_in_data_address0;
    end else begin
        in_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_data_ce0 = grp_initializeBuffer_fu_188_in_data_ce0;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        in_data_ce0 = grp_updateBuffer_fu_174_in_data_ce0;
    end else begin
        in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        kernel_ce0 = grp_calculateConvolution_fu_164_kernel_ce0;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_data_address0 = tmp_27_cast_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_data_address0 = tmp_25_cast_fu_337_p1;
    end else begin
        out_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (grp_calculateConvolution_fu_164_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (grp_calculateConvolution_fu_164_ap_done == 1'b1)))) begin
        out_data_ce0 = 1'b1;
    end else begin
        out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (grp_calculateConvolution_fu_164_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (grp_calculateConvolution_fu_164_ap_done == 1'b1)))) begin
        out_data_we0 = 1'b1;
    end else begin
        out_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_19_fu_237_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_initializeBuffer_fu_188_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_44_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_calculateConvolution_fu_164_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & ((tmp_44_reg_428 == 1'd1) | (tmp_25_1_fu_348_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_44_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (tmp_25_1_fu_348_p2 == 1'd1) & (1'b0 == ap_block_state7_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_calculateConvolution_fu_164_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_updateBuffer_fu_174_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state7_on_subcall_done = ((tmp_44_reg_428 == 1'd0) & (grp_updateBuffer_fu_174_ap_done == 1'b0));
end

assign grp_calculateConvolution_fu_164_ap_start = grp_calculateConvolution_fu_164_ap_start_reg;

assign grp_initializeBuffer_fu_188_ap_start = grp_initializeBuffer_fu_188_ap_start_reg;

assign grp_updateBuffer_fu_174_ap_start = grp_updateBuffer_fu_174_ap_start_reg;

assign index_col_out_1_1_fu_353_p2 = (32'd2 + index_col_out_reg_152);

assign index_col_out_1_s_fu_342_p2 = (index_col_out_reg_152 | 32'd1);

assign index_row_out_1_fu_242_p2 = (31'd1 + index_row_out_reg_129);

assign index_row_out_cast_fu_233_p1 = index_row_out_reg_129;

assign kernel_address0 = grp_calculateConvolution_fu_164_kernel_address0;

assign next_mul_fu_227_p2 = (38'd100 + phi_mul_reg_141);

assign out_data_d0 = grp_calculateConvolution_fu_164_ap_return;

assign p_lshr_fu_273_p4 = {{p_neg_fu_268_p2[31:1]}};

assign p_neg_fu_268_p2 = (tmp_18_reg_396 ^ 32'd4294967295);

assign p_neg_t_fu_283_p2 = (31'd0 - p_lshr_fu_273_p4);

assign tmp_17_fu_211_p2 = (col_in + 32'd1);

assign tmp_18_fu_217_p2 = (tmp_17_fu_211_p2 - kernel_size_col);

assign tmp_18_op_op_fu_255_p2 = (tmp_18_reg_396 + 32'd1);

assign tmp_19_fu_237_p2 = (($signed(index_row_out_cast_fu_233_p1) < $signed(tmp_s_reg_391)) ? 1'b1 : 1'b0);

assign tmp_24_fu_332_p2 = (tmp_37_reg_404 + tmp_45_fu_328_p1);

assign tmp_25_1_fu_348_p2 = (($signed(index_col_out_1_s_fu_342_p2) < $signed(tmp_18_reg_396)) ? 1'b1 : 1'b0);

assign tmp_25_cast_fu_337_p1 = tmp_24_fu_332_p2;

assign tmp_26_fu_362_p2 = (tmp_37_reg_404 + tmp_46_fu_359_p1);

assign tmp_27_cast_fu_367_p1 = tmp_26_fu_362_p2;

assign tmp_37_fu_223_p1 = phi_mul_reg_141[14:0];

assign tmp_38_fu_248_p3 = tmp_18_reg_396[32'd31];

assign tmp_39_fu_260_p3 = tmp_18_op_op_fu_255_p2[32'd31];

assign tmp_40_fu_289_p4 = {{tmp_18_op_op_fu_255_p2[31:1]}};

assign tmp_41_fu_299_p3 = ((tmp_39_fu_260_p3[0:0] === 1'b1) ? p_neg_t_fu_283_p2 : tmp_40_fu_289_p4);

assign tmp_42_fu_307_p3 = ((tmp_38_fu_248_p3[0:0] === 1'b1) ? 31'd0 : tmp_41_fu_299_p3);

assign tmp_43_fu_315_p3 = {{tmp_42_fu_307_p3}, {1'd0}};

assign tmp_44_fu_323_p2 = ((index_col_out_reg_152 == tmp_43_reg_423) ? 1'b1 : 1'b0);

assign tmp_45_fu_328_p1 = index_col_out_reg_152[14:0];

assign tmp_46_fu_359_p1 = index_col_out_1_s_reg_432[14:0];

assign tmp_fu_199_p2 = (row_in + 32'd1);

assign tmp_s_fu_205_p2 = (tmp_fu_199_p2 - kernel_size_row);

always @ (posedge ap_clk) begin
    tmp_43_reg_423[0] <= 1'b0;
    index_col_out_1_s_reg_432[0] <= 1'b1;
end

endmodule //conv2D
