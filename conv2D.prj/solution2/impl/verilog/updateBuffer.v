// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module updateBuffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_q0,
        in_data_address0,
        in_data_ce0,
        in_data_q0,
        index_row_out,
        index_col_out,
        kernel_size_row,
        kernel_size_col,
        col_in
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] buffer_r_q0;
output  [13:0] in_data_address0;
output   in_data_ce0;
input  [31:0] in_data_q0;
input  [30:0] index_row_out;
input  [31:0] index_col_out;
input  [31:0] kernel_size_row;
input  [31:0] kernel_size_col;
input  [31:0] col_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[31:0] buffer_r_d0;
reg in_data_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_fu_194_p2;
reg   [31:0] tmp_reg_420;
wire   [0:0] tmp_2_fu_206_p2;
reg   [0:0] tmp_2_reg_427;
wire   [14:0] tmp_3_fu_212_p1;
reg   [14:0] tmp_3_reg_431;
wire   [31:0] next_mul_fu_216_p2;
reg   [31:0] next_mul_reg_436;
wire    ap_CS_fsm_state2;
wire   [30:0] ik_row_1_fu_230_p2;
reg   [30:0] ik_row_1_reg_444;
wire   [31:0] tmp_7_fu_236_p2;
reg   [31:0] tmp_7_reg_449;
wire   [0:0] tmp_4_fu_225_p2;
wire   [31:0] tmp_19_fu_302_p3;
reg   [31:0] tmp_19_reg_455;
wire   [0:0] tmp_20_fu_310_p2;
reg   [0:0] tmp_20_reg_460;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_8_1_fu_347_p2;
reg   [31:0] tmp_8_1_reg_472;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_6_1_fu_342_p2;
wire   [31:0] tmp_1_5_fu_352_p2;
reg   [31:0] tmp_1_5_reg_477;
wire   [31:0] ik_col_1_1_fu_358_p2;
reg   [31:0] ik_col_1_1_reg_482;
wire   [31:0] tmp_13_fu_375_p2;
reg   [31:0] tmp_13_reg_492;
wire    ap_CS_fsm_state5;
reg   [30:0] ik_row_reg_158;
wire    ap_CS_fsm_state7;
reg   [31:0] phi_mul_reg_170;
reg   [31:0] ik_col_reg_182;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_9_fu_320_p1;
wire  signed [63:0] tmp_10_fu_331_p1;
wire  signed [63:0] tmp_17_cast_fu_371_p1;
wire  signed [63:0] tmp_9_1_fu_380_p1;
wire  signed [63:0] tmp_10_1_fu_384_p1;
wire  signed [63:0] tmp_14_fu_388_p1;
wire   [31:0] tmp_1_fu_200_p2;
wire   [31:0] ik_row_cast_fu_221_p1;
wire   [31:0] p_neg_fu_256_p2;
wire   [30:0] p_lshr_fu_261_p4;
wire   [0:0] tmp_11_fu_249_p3;
wire   [30:0] p_neg_t_fu_271_p2;
wire   [30:0] tmp_12_fu_277_p4;
wire   [0:0] tmp_5_fu_242_p3;
wire   [30:0] tmp_15_fu_286_p3;
wire   [30:0] tmp_18_fu_294_p3;
wire   [31:0] tmp_8_fu_315_p2;
wire   [31:0] tmp_s_fu_325_p2;
wire   [31:0] ik_col_1_s_fu_336_p2;
wire  signed [14:0] grp_fu_392_p4;
wire   [14:0] grp_fu_392_p0;
wire   [14:0] grp_fu_392_p1;
wire   [7:0] grp_fu_392_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

conv2D_ama_addmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
conv2D_ama_addmulcud_U12(
    .din0(grp_fu_392_p0),
    .din1(grp_fu_392_p1),
    .din2(grp_fu_392_p2),
    .din3(tmp_3_reg_431),
    .dout(grp_fu_392_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ik_col_reg_182 <= ik_col_1_1_reg_482;
    end else if (((tmp_4_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ik_col_reg_182 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ik_row_reg_158 <= ik_row_1_reg_444;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ik_row_reg_158 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_170 <= next_mul_reg_436;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_170 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_reg_460 == 1'd0) & (tmp_6_1_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ik_col_1_1_reg_482 <= ik_col_1_1_fu_358_p2;
        tmp_1_5_reg_477 <= tmp_1_5_fu_352_p2;
        tmp_8_1_reg_472 <= tmp_8_1_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ik_row_1_reg_444 <= ik_row_1_fu_230_p2;
        next_mul_reg_436 <= next_mul_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((tmp_20_reg_460 == 1'd1) & (tmp_2_reg_427 == 1'd1)) | ((tmp_6_1_fu_342_p2 == 1'd0) & (tmp_2_reg_427 == 1'd1))))) begin
        tmp_13_reg_492 <= tmp_13_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_19_reg_455[31 : 1] <= tmp_19_fu_302_p3[31 : 1];
        tmp_7_reg_449 <= tmp_7_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_20_reg_460 <= tmp_20_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_2_reg_427 <= tmp_2_fu_206_p2;
        tmp_3_reg_431 <= tmp_3_fu_212_p1;
        tmp_reg_420 <= tmp_fu_194_p2;
    end
end

always @ (*) begin
    if ((((tmp_4_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_r_address0 = tmp_14_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_r_address0 = tmp_10_1_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_r_address0 = tmp_9_1_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_address0 = tmp_10_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_address0 = tmp_9_fu_320_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_r_d0 = in_data_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        buffer_r_d0 = buffer_r_q0;
    end else begin
        buffer_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((tmp_20_reg_460 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_2_reg_427 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_data_ce0 = 1'b1;
    end else begin
        in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_4_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((tmp_6_1_fu_342_p2 == 1'd0) | (tmp_20_reg_460 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_392_p0 = index_row_out[14:0];

assign grp_fu_392_p1 = ik_row_reg_158[14:0];

assign grp_fu_392_p2 = 15'd100;

assign ik_col_1_1_fu_358_p2 = (ik_col_reg_182 + 32'd2);

assign ik_col_1_s_fu_336_p2 = (ik_col_reg_182 | 32'd1);

assign ik_row_1_fu_230_p2 = (ik_row_reg_158 + 31'd1);

assign ik_row_cast_fu_221_p1 = ik_row_reg_158;

assign in_data_address0 = tmp_17_cast_fu_371_p1;

assign next_mul_fu_216_p2 = (phi_mul_reg_170 + kernel_size_col);

assign p_lshr_fu_261_p4 = {{p_neg_fu_256_p2[31:1]}};

assign p_neg_fu_256_p2 = (32'd0 - kernel_size_col);

assign p_neg_t_fu_271_p2 = (31'd0 - p_lshr_fu_261_p4);

assign tmp_10_1_fu_384_p1 = $signed(tmp_1_5_reg_477);

assign tmp_10_fu_331_p1 = $signed(tmp_s_fu_325_p2);

assign tmp_11_fu_249_p3 = kernel_size_col[32'd31];

assign tmp_12_fu_277_p4 = {{kernel_size_col[31:1]}};

assign tmp_13_fu_375_p2 = (tmp_reg_420 + phi_mul_reg_170);

assign tmp_14_fu_388_p1 = $signed(tmp_13_reg_492);

assign tmp_15_fu_286_p3 = ((tmp_11_fu_249_p3[0:0] === 1'b1) ? p_neg_t_fu_271_p2 : tmp_12_fu_277_p4);

assign tmp_17_cast_fu_371_p1 = grp_fu_392_p4;

assign tmp_18_fu_294_p3 = ((tmp_5_fu_242_p3[0:0] === 1'b1) ? 31'd0 : tmp_15_fu_286_p3);

assign tmp_19_fu_302_p3 = {{tmp_18_fu_294_p3}, {1'd0}};

assign tmp_1_5_fu_352_p2 = (ik_col_1_s_fu_336_p2 + phi_mul_reg_170);

assign tmp_1_fu_200_p2 = (index_col_out + kernel_size_col);

assign tmp_20_fu_310_p2 = ((ik_col_reg_182 == tmp_19_reg_455) ? 1'b1 : 1'b0);

assign tmp_2_fu_206_p2 = (($signed(tmp_1_fu_200_p2) < $signed(col_in)) ? 1'b1 : 1'b0);

assign tmp_3_fu_212_p1 = tmp_1_fu_200_p2[14:0];

assign tmp_4_fu_225_p2 = (($signed(ik_row_cast_fu_221_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

assign tmp_5_fu_242_p3 = tmp_reg_420[32'd31];

assign tmp_6_1_fu_342_p2 = (($signed(ik_col_1_s_fu_336_p2) < $signed(tmp_reg_420)) ? 1'b1 : 1'b0);

assign tmp_7_fu_236_p2 = (phi_mul_reg_170 + 32'd1);

assign tmp_8_1_fu_347_p2 = (tmp_7_reg_449 + ik_col_1_s_fu_336_p2);

assign tmp_8_fu_315_p2 = (tmp_7_reg_449 + ik_col_reg_182);

assign tmp_9_1_fu_380_p1 = $signed(tmp_8_1_reg_472);

assign tmp_9_fu_320_p1 = $signed(tmp_8_fu_315_p2);

assign tmp_fu_194_p2 = ($signed(32'd4294967295) + $signed(kernel_size_col));

assign tmp_s_fu_325_p2 = (ik_col_reg_182 + phi_mul_reg_170);

always @ (posedge ap_clk) begin
    tmp_19_reg_455[0] <= 1'b0;
end

endmodule //updateBuffer
