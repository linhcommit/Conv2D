-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateConvolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calculateConvolution is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_47_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_reg_417 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_219_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul2_reg_423 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_3_fu_239_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_3_reg_436 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_53_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_54_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_2_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_28_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_col_3_1_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_3_1_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ik_row_reg_128 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_151 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_1_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_lcssa_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ik_row_cast_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_size_col_op_o_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_270_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_49_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_280_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_50_fu_286_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_48_fu_245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_296_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_52_fu_304_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_24_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ik_col_3_s_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_1_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((tmp_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= sum_reg_116;
                end if; 
            end if;
        end if;
    end process;


    ik_col_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ik_col_reg_173 <= ik_col_3_1_reg_478;
            elsif (((tmp_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_173 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_row_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ik_row_reg_128 <= ik_row_3_reg_436;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ik_row_reg_128 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul1_reg_151 <= next_mul2_reg_423;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_151 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_139 <= next_mul_reg_428;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_139 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_1_lcssa_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_28_1_fu_362_p2 = ap_const_lv1_0))) then 
                sum_1_lcssa_reg_185 <= sum_2_fu_350_p2;
            elsif (((tmp_54_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_1_lcssa_reg_185 <= sum_1_reg_162;
            end if; 
        end if;
    end process;

    sum_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sum_1_reg_162 <= sum_2_1_fu_398_p2;
            elsif (((tmp_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_1_reg_162 <= sum_reg_116;
            end if; 
        end if;
    end process;

    sum_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_reg_116 <= sum_1_lcssa_reg_185;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_reg_116 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_1_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                ik_col_3_1_reg_478 <= ik_col_3_1_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_3_reg_436 <= ik_row_3_fu_239_p2;
                next_mul2_reg_423 <= next_mul2_fu_219_p2;
                next_mul_reg_428 <= next_mul_fu_225_p2;
                tmp_47_reg_417 <= tmp_47_fu_215_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_197 <= buffer_r_q0;
                reg_201 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_211 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum_2_reg_459 <= sum_2_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_53_reg_441(31 downto 1) <= tmp_53_fu_312_p3(31 downto 1);
            end if;
        end if;
    end process;
    tmp_53_reg_441(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_234_p2, ap_CS_fsm_state3, tmp_54_fu_320_p2, ap_CS_fsm_state6, tmp_28_1_fu_362_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_54_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_28_1_fu_362_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_234_p2)
    begin
        if ((((tmp_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_234_p2)
    begin
        if (((tmp_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, tmp_fu_234_p2, sum_reg_116, ap_return_preg)
    begin
        if (((tmp_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= sum_reg_116;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_25_fu_331_p1, tmp_30_1_fu_373_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_r_address0 <= tmp_30_1_fu_373_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_address0 <= tmp_25_fu_331_p1(5 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_205_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_201) * signed(reg_197))), 32));
    ik_col_3_1_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(ik_col_reg_173));
    ik_col_3_s_fu_356_p2 <= (ik_col_reg_173 or ap_const_lv32_1);
    ik_row_3_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ik_row_reg_128));
    ik_row_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_128),32));

    kernel_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_29_cast_fu_345_p1, tmp_30_cast_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address0 <= tmp_30_cast_fu_387_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= tmp_29_cast_fu_345_p1(10 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_size_col_op_o_fu_252_p2 <= std_logic_vector(unsigned(kernel_size_col) + unsigned(ap_const_lv32_1));
    next_mul2_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul1_reg_151));
    next_mul_fu_225_p2 <= std_logic_vector(unsigned(phi_mul_reg_139) + unsigned(kernel_size_col));
    p_lshr_fu_270_p4 <= p_neg_fu_265_p2(31 downto 1);
    p_neg_fu_265_p2 <= (kernel_size_col xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_270_p4));
    sum_2_1_fu_398_p2 <= std_logic_vector(unsigned(reg_211) + unsigned(sum_2_reg_459));
    sum_2_fu_350_p2 <= std_logic_vector(unsigned(reg_211) + unsigned(sum_1_reg_162));
    tmp_24_fu_325_p2 <= std_logic_vector(unsigned(ik_col_reg_173) + unsigned(phi_mul_reg_139));
        tmp_25_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_325_p2),64));

    tmp_28_1_fu_362_p2 <= "1" when (signed(ik_col_3_s_fu_356_p2) < signed(kernel_size_col)) else "0";
    tmp_28_fu_382_p2 <= std_logic_vector(unsigned(tmp_47_reg_417) + unsigned(tmp_56_fu_378_p1));
    tmp_29_1_fu_367_p2 <= std_logic_vector(unsigned(ik_col_3_s_fu_356_p2) + unsigned(phi_mul_reg_139));
    tmp_29_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_340_p2),64));
        tmp_30_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_1_fu_367_p2),64));

    tmp_30_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_382_p2),64));
    tmp_47_fu_215_p1 <= phi_mul1_reg_151(11 - 1 downto 0);
    tmp_48_fu_245_p3 <= kernel_size_col(31 downto 31);
    tmp_49_fu_257_p3 <= kernel_size_col_op_o_fu_252_p2(31 downto 31);
    tmp_50_fu_286_p4 <= kernel_size_col_op_o_fu_252_p2(31 downto 1);
    tmp_51_fu_296_p3 <= 
        p_neg_t_fu_280_p2 when (tmp_49_fu_257_p3(0) = '1') else 
        tmp_50_fu_286_p4;
    tmp_52_fu_304_p3 <= 
        ap_const_lv31_0 when (tmp_48_fu_245_p3(0) = '1') else 
        tmp_51_fu_296_p3;
    tmp_53_fu_312_p3 <= (tmp_52_fu_304_p3 & ap_const_lv1_0);
    tmp_54_fu_320_p2 <= "1" when (ik_col_reg_173 = tmp_53_reg_441) else "0";
    tmp_55_fu_336_p1 <= ik_col_reg_173(11 - 1 downto 0);
    tmp_56_fu_378_p1 <= ik_col_3_s_fu_356_p2(11 - 1 downto 0);
    tmp_fu_234_p2 <= "1" when (signed(ik_row_cast_fu_230_p1) < signed(kernel_size_row)) else "0";
    tmp_s_fu_340_p2 <= std_logic_vector(unsigned(tmp_47_reg_417) + unsigned(tmp_55_fu_336_p1));
end behav;
