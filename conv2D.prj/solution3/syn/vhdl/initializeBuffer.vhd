-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity initializeBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of initializeBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal smax_cast_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_2_fu_169_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_2_reg_262 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_buffer_2_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_2_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_233_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_272 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_2_fu_202_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_2_reg_280 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_17_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_buffer_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_reg_105 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_1_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_reg_127 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_24_cast_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_144_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_148_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_184_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_180_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_cast_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_208_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_212_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_24_fu_212_p2 : signal is "no";
    signal tmp_23_fu_233_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_233_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component conv2D_mul_mul_8nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    conv2D_mul_mul_8nbkb_U1 : component conv2D_mul_mul_8nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => tmp_23_fu_233_p0,
        din1 => tmp_23_fu_233_p1,
        dout => tmp_23_fu_233_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_buffer_1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_buffer_1_reg_116 <= tmp_19_fu_222_p2;
            elsif (((tmp_s_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_buffer_1_reg_116 <= i_buffer_reg_93;
            end if; 
        end if;
    end process;

    i_buffer_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_buffer_reg_93 <= i_buffer_2_reg_267;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_buffer_reg_93 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_col_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ik_col_reg_127 <= ik_col_2_reg_280;
            elsif (((tmp_s_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_127 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ik_row_reg_105 <= ik_row_2_reg_262;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ik_row_reg_105 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_buffer_2_reg_267 <= i_buffer_2_fu_175_p2;
                tmp_23_reg_272 <= tmp_23_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ik_col_2_reg_280 <= ik_col_2_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_2_reg_262 <= ik_row_2_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    smax_cast_reg_254(30 downto 0) <= smax_cast_fu_156_p1(30 downto 0);
            end if;
        end if;
    end process;
    smax_cast_reg_254(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_164_p2, ap_CS_fsm_state3, tmp_17_fu_197_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_17_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_164_p2)
    begin
        if ((((tmp_s_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_164_p2)
    begin
        if (((tmp_s_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= tmp_20_fu_228_p1(5 - 1 downto 0);

    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= in_data_q0;

    buffer_r_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_buffer_2_fu_175_p2 <= std_logic_vector(unsigned(i_buffer_reg_93) + unsigned(smax_cast_reg_254));
    ik_col_2_fu_202_p2 <= std_logic_vector(unsigned(ik_col_reg_127) + unsigned(ap_const_lv31_1));
    ik_col_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_reg_127),32));
    ik_row_2_fu_169_p2 <= std_logic_vector(unsigned(ik_row_reg_105) + unsigned(ap_const_lv31_1));
    ik_row_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_105),32));
    in_data_address0 <= tmp_24_cast_fu_217_p1(14 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    smax_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_148_p3),32));
    smax_fu_148_p3 <= 
        tmp_16_fu_144_p1 when (tmp_fu_138_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_16_fu_144_p1 <= kernel_size_col(31 - 1 downto 0);
    tmp_17_fu_197_p2 <= "1" when (signed(ik_col_cast_fu_193_p1) < signed(kernel_size_col)) else "0";
    tmp_19_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_buffer_1_reg_116));
        tmp_20_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_buffer_1_reg_116),64));

    tmp_21_fu_180_p1 <= ik_row_reg_105(15 - 1 downto 0);
    tmp_23_fu_233_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    tmp_23_fu_233_p1 <= std_logic_vector(unsigned(tmp_25_fu_184_p1) + unsigned(tmp_21_fu_180_p1));
        tmp_24_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_212_p2),64));

    tmp_24_fu_212_p2 <= std_logic_vector(signed(tmp_23_reg_272) + signed(tmp_27_fu_208_p1));
    tmp_25_fu_184_p1 <= index_row_out(15 - 1 downto 0);
    tmp_27_fu_208_p1 <= ik_col_reg_127(15 - 1 downto 0);
    tmp_fu_138_p2 <= "1" when (signed(kernel_size_col) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_164_p2 <= "1" when (signed(ik_row_cast_fu_160_p1) < signed(kernel_size_row)) else "0";
end behav;
