// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calculateConvolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_size_row,
        kernel_size_col,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
input  [31:0] kernel_size_row;
input  [31:0] kernel_size_col;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_r_ce0;
reg kernel_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_35_fu_141_p1;
reg   [10:0] tmp_35_reg_243;
wire    ap_CS_fsm_state2;
wire   [37:0] next_mul2_fu_145_p2;
reg   [37:0] next_mul2_reg_248;
wire   [31:0] next_mul_fu_151_p2;
reg   [31:0] next_mul_reg_253;
wire   [30:0] ik_row_3_fu_165_p2;
reg   [30:0] ik_row_3_reg_261;
wire   [30:0] ik_col_3_fu_180_p2;
reg   [30:0] ik_col_3_reg_269;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_28_fu_175_p2;
reg  signed [31:0] buffer_load_reg_284;
wire    ap_CS_fsm_state4;
reg  signed [31:0] kernel_load_reg_289;
wire   [31:0] tmp_32_fu_211_p2;
reg   [31:0] tmp_32_reg_294;
wire    ap_CS_fsm_state5;
reg   [30:0] ik_row_reg_88;
reg   [31:0] phi_mul_reg_99;
reg   [37:0] phi_mul1_reg_111;
reg   [30:0] ik_col_reg_122;
wire   [0:0] tmp_fu_160_p2;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_30_fu_192_p1;
wire   [63:0] tmp_36_cast_fu_206_p1;
reg   [31:0] sum_fu_46;
wire   [31:0] sum_1_fu_215_p2;
wire   [31:0] ik_row_cast_fu_156_p1;
wire   [31:0] ik_col_cast_fu_171_p1;
wire   [31:0] tmp_29_fu_186_p2;
wire   [10:0] tmp_37_fu_197_p1;
wire   [10:0] tmp_33_fu_201_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ik_col_reg_122 <= ik_col_3_reg_269;
    end else if (((tmp_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ik_col_reg_122 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ik_row_reg_88 <= ik_row_3_reg_261;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ik_row_reg_88 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_111 <= next_mul2_reg_248;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_111 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_99 <= next_mul_reg_253;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_99 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_fu_46 <= sum_1_fu_215_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_fu_46 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_load_reg_284 <= buffer_r_q0;
        kernel_load_reg_289 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ik_col_3_reg_269 <= ik_col_3_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ik_row_3_reg_261 <= ik_row_3_fu_165_p2;
        next_mul2_reg_248 <= next_mul2_fu_145_p2;
        next_mul_reg_253 <= next_mul_fu_151_p2;
        tmp_35_reg_243 <= tmp_35_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_32_reg_294 <= tmp_32_fu_211_p2;
    end
end

always @ (*) begin
    if ((((tmp_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_28_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = sum_fu_46;

assign buffer_r_address0 = tmp_30_fu_192_p1;

assign ik_col_3_fu_180_p2 = (ik_col_reg_122 + 31'd1);

assign ik_col_cast_fu_171_p1 = ik_col_reg_122;

assign ik_row_3_fu_165_p2 = (31'd1 + ik_row_reg_88);

assign ik_row_cast_fu_156_p1 = ik_row_reg_88;

assign kernel_address0 = tmp_36_cast_fu_206_p1;

assign next_mul2_fu_145_p2 = (38'd100 + phi_mul1_reg_111);

assign next_mul_fu_151_p2 = (phi_mul_reg_99 + kernel_size_col);

assign sum_1_fu_215_p2 = (sum_fu_46 + tmp_32_reg_294);

assign tmp_28_fu_175_p2 = (($signed(ik_col_cast_fu_171_p1) < $signed(kernel_size_col)) ? 1'b1 : 1'b0);

assign tmp_29_fu_186_p2 = (ik_col_cast_fu_171_p1 + phi_mul_reg_99);

assign tmp_30_fu_192_p1 = $signed(tmp_29_fu_186_p2);

assign tmp_32_fu_211_p2 = ($signed(kernel_load_reg_289) * $signed(buffer_load_reg_284));

assign tmp_33_fu_201_p2 = (tmp_35_reg_243 + tmp_37_fu_197_p1);

assign tmp_35_fu_141_p1 = phi_mul1_reg_111[10:0];

assign tmp_36_cast_fu_206_p1 = tmp_33_fu_201_p2;

assign tmp_37_fu_197_p1 = ik_col_reg_122[10:0];

assign tmp_fu_160_p2 = (($signed(ik_row_cast_fu_156_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

endmodule //calculateConvolution
