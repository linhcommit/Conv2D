// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _initializeBuffer_HH_
#define _initializeBuffer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv2D_mul_mul_8nbkb.h"

namespace ap_rtl {

struct initializeBuffer : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > buffer_r_address0;
    sc_out< sc_logic > buffer_r_ce0;
    sc_out< sc_logic > buffer_r_we0;
    sc_out< sc_lv<32> > buffer_r_d0;
    sc_out< sc_lv<14> > in_data_address0;
    sc_out< sc_logic > in_data_ce0;
    sc_in< sc_lv<32> > in_data_q0;
    sc_in< sc_lv<31> > index_row_out;
    sc_in< sc_lv<32> > kernel_size_row;
    sc_in< sc_lv<32> > kernel_size_col;


    // Module declarations
    initializeBuffer(sc_module_name name);
    SC_HAS_PROCESS(initializeBuffer);

    ~initializeBuffer();

    sc_trace_file* mVcdFile;

    conv2D_mul_mul_8nbkb<1,1,8,15,15>* conv2D_mul_mul_8nbkb_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > smax_cast_fu_156_p1;
    sc_signal< sc_lv<32> > smax_cast_reg_254;
    sc_signal< sc_lv<31> > ik_row_2_fu_169_p2;
    sc_signal< sc_lv<31> > ik_row_2_reg_262;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_buffer_2_fu_175_p2;
    sc_signal< sc_lv<32> > i_buffer_2_reg_267;
    sc_signal< sc_lv<1> > tmp_s_fu_164_p2;
    sc_signal< sc_lv<15> > tmp_23_fu_233_p2;
    sc_signal< sc_lv<15> > tmp_23_reg_272;
    sc_signal< sc_lv<31> > ik_col_2_fu_202_p2;
    sc_signal< sc_lv<31> > ik_col_2_reg_280;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_17_fu_197_p2;
    sc_signal< sc_lv<32> > tmp_19_fu_222_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_buffer_reg_93;
    sc_signal< sc_lv<31> > ik_row_reg_105;
    sc_signal< sc_lv<32> > i_buffer_1_reg_116;
    sc_signal< sc_lv<31> > ik_col_reg_127;
    sc_signal< sc_lv<64> > tmp_24_cast_fu_217_p1;
    sc_signal< sc_lv<64> > tmp_20_fu_228_p1;
    sc_signal< sc_lv<1> > tmp_fu_138_p2;
    sc_signal< sc_lv<31> > tmp_16_fu_144_p1;
    sc_signal< sc_lv<31> > smax_fu_148_p3;
    sc_signal< sc_lv<32> > ik_row_cast_fu_160_p1;
    sc_signal< sc_lv<15> > tmp_25_fu_184_p1;
    sc_signal< sc_lv<15> > tmp_21_fu_180_p1;
    sc_signal< sc_lv<32> > ik_col_cast_fu_193_p1;
    sc_signal< sc_lv<15> > tmp_27_fu_208_p1;
    sc_signal< sc_lv<15> > tmp_24_fu_212_p2;
    sc_signal< sc_lv<8> > tmp_23_fu_233_p0;
    sc_signal< sc_lv<15> > tmp_23_fu_233_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<15> ap_const_lv15_64;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_buffer_r_address0();
    void thread_buffer_r_ce0();
    void thread_buffer_r_d0();
    void thread_buffer_r_we0();
    void thread_i_buffer_2_fu_175_p2();
    void thread_ik_col_2_fu_202_p2();
    void thread_ik_col_cast_fu_193_p1();
    void thread_ik_row_2_fu_169_p2();
    void thread_ik_row_cast_fu_160_p1();
    void thread_in_data_address0();
    void thread_in_data_ce0();
    void thread_smax_cast_fu_156_p1();
    void thread_smax_fu_148_p3();
    void thread_tmp_16_fu_144_p1();
    void thread_tmp_17_fu_197_p2();
    void thread_tmp_19_fu_222_p2();
    void thread_tmp_20_fu_228_p1();
    void thread_tmp_21_fu_180_p1();
    void thread_tmp_23_fu_233_p0();
    void thread_tmp_23_fu_233_p1();
    void thread_tmp_24_cast_fu_217_p1();
    void thread_tmp_24_fu_212_p2();
    void thread_tmp_25_fu_184_p1();
    void thread_tmp_27_fu_208_p1();
    void thread_tmp_fu_138_p2();
    void thread_tmp_s_fu_164_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
