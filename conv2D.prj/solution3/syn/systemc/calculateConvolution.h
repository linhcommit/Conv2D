// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _calculateConvolution_HH_
#define _calculateConvolution_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct calculateConvolution : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > buffer_r_address0;
    sc_out< sc_logic > buffer_r_ce0;
    sc_in< sc_lv<32> > buffer_r_q0;
    sc_out< sc_lv<10> > kernel_address0;
    sc_out< sc_logic > kernel_ce0;
    sc_in< sc_lv<32> > kernel_q0;
    sc_in< sc_lv<32> > kernel_size_row;
    sc_in< sc_lv<32> > kernel_size_col;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    calculateConvolution(sc_module_name name);
    SC_HAS_PROCESS(calculateConvolution);

    ~calculateConvolution();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > tmp_35_fu_141_p1;
    sc_signal< sc_lv<11> > tmp_35_reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<38> > next_mul2_fu_145_p2;
    sc_signal< sc_lv<38> > next_mul2_reg_248;
    sc_signal< sc_lv<32> > next_mul_fu_151_p2;
    sc_signal< sc_lv<32> > next_mul_reg_253;
    sc_signal< sc_lv<31> > ik_row_3_fu_165_p2;
    sc_signal< sc_lv<31> > ik_row_3_reg_261;
    sc_signal< sc_lv<31> > ik_col_3_fu_180_p2;
    sc_signal< sc_lv<31> > ik_col_3_reg_269;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_28_fu_175_p2;
    sc_signal< sc_lv<32> > buffer_load_reg_284;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > kernel_load_reg_289;
    sc_signal< sc_lv<32> > tmp_32_fu_211_p2;
    sc_signal< sc_lv<32> > tmp_32_reg_294;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<31> > ik_row_reg_88;
    sc_signal< sc_lv<32> > phi_mul_reg_99;
    sc_signal< sc_lv<38> > phi_mul1_reg_111;
    sc_signal< sc_lv<31> > ik_col_reg_122;
    sc_signal< sc_lv<1> > tmp_fu_160_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_30_fu_192_p1;
    sc_signal< sc_lv<64> > tmp_36_cast_fu_206_p1;
    sc_signal< sc_lv<32> > sum_fu_46;
    sc_signal< sc_lv<32> > sum_1_fu_215_p2;
    sc_signal< sc_lv<32> > ik_row_cast_fu_156_p1;
    sc_signal< sc_lv<32> > ik_col_cast_fu_171_p1;
    sc_signal< sc_lv<32> > tmp_29_fu_186_p2;
    sc_signal< sc_lv<11> > tmp_37_fu_197_p1;
    sc_signal< sc_lv<11> > tmp_33_fu_201_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<38> ap_const_lv38_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<38> ap_const_lv38_64;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_buffer_r_address0();
    void thread_buffer_r_ce0();
    void thread_ik_col_3_fu_180_p2();
    void thread_ik_col_cast_fu_171_p1();
    void thread_ik_row_3_fu_165_p2();
    void thread_ik_row_cast_fu_156_p1();
    void thread_kernel_address0();
    void thread_kernel_ce0();
    void thread_next_mul2_fu_145_p2();
    void thread_next_mul_fu_151_p2();
    void thread_sum_1_fu_215_p2();
    void thread_tmp_28_fu_175_p2();
    void thread_tmp_29_fu_186_p2();
    void thread_tmp_30_fu_192_p1();
    void thread_tmp_32_fu_211_p2();
    void thread_tmp_33_fu_201_p2();
    void thread_tmp_35_fu_141_p1();
    void thread_tmp_36_cast_fu_206_p1();
    void thread_tmp_37_fu_197_p1();
    void thread_tmp_fu_160_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
