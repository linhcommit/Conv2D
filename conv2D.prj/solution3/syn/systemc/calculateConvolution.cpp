// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "calculateConvolution.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic calculateConvolution::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic calculateConvolution::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> calculateConvolution::ap_ST_fsm_state1 = "1";
const sc_lv<6> calculateConvolution::ap_ST_fsm_state2 = "10";
const sc_lv<6> calculateConvolution::ap_ST_fsm_state3 = "100";
const sc_lv<6> calculateConvolution::ap_ST_fsm_state4 = "1000";
const sc_lv<6> calculateConvolution::ap_ST_fsm_state5 = "10000";
const sc_lv<6> calculateConvolution::ap_ST_fsm_state6 = "100000";
const sc_lv<32> calculateConvolution::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> calculateConvolution::ap_const_lv32_1 = "1";
const sc_lv<32> calculateConvolution::ap_const_lv32_2 = "10";
const sc_lv<1> calculateConvolution::ap_const_lv1_1 = "1";
const sc_lv<32> calculateConvolution::ap_const_lv32_3 = "11";
const sc_lv<32> calculateConvolution::ap_const_lv32_4 = "100";
const sc_lv<31> calculateConvolution::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> calculateConvolution::ap_const_lv1_0 = "0";
const sc_lv<38> calculateConvolution::ap_const_lv38_0 = "00000000000000000000000000000000000000";
const sc_lv<32> calculateConvolution::ap_const_lv32_5 = "101";
const sc_lv<38> calculateConvolution::ap_const_lv38_64 = "1100100";
const sc_lv<31> calculateConvolution::ap_const_lv31_1 = "1";
const bool calculateConvolution::ap_const_boolean_1 = true;

calculateConvolution::calculateConvolution(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_160_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_160_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_160_p2 );
    sensitive << ( sum_fu_46 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_30_fu_192_p1 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ik_col_3_fu_180_p2);
    sensitive << ( ik_col_reg_122 );

    SC_METHOD(thread_ik_col_cast_fu_171_p1);
    sensitive << ( ik_col_reg_122 );

    SC_METHOD(thread_ik_row_3_fu_165_p2);
    sensitive << ( ik_row_reg_88 );

    SC_METHOD(thread_ik_row_cast_fu_156_p1);
    sensitive << ( ik_row_reg_88 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_36_cast_fu_206_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_next_mul2_fu_145_p2);
    sensitive << ( phi_mul1_reg_111 );

    SC_METHOD(thread_next_mul_fu_151_p2);
    sensitive << ( kernel_size_col );
    sensitive << ( phi_mul_reg_99 );

    SC_METHOD(thread_sum_1_fu_215_p2);
    sensitive << ( tmp_32_reg_294 );
    sensitive << ( sum_fu_46 );

    SC_METHOD(thread_tmp_28_fu_175_p2);
    sensitive << ( kernel_size_col );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ik_col_cast_fu_171_p1 );

    SC_METHOD(thread_tmp_29_fu_186_p2);
    sensitive << ( phi_mul_reg_99 );
    sensitive << ( ik_col_cast_fu_171_p1 );

    SC_METHOD(thread_tmp_30_fu_192_p1);
    sensitive << ( tmp_29_fu_186_p2 );

    SC_METHOD(thread_tmp_32_fu_211_p2);
    sensitive << ( buffer_load_reg_284 );
    sensitive << ( kernel_load_reg_289 );

    SC_METHOD(thread_tmp_33_fu_201_p2);
    sensitive << ( tmp_35_reg_243 );
    sensitive << ( tmp_37_fu_197_p1 );

    SC_METHOD(thread_tmp_35_fu_141_p1);
    sensitive << ( phi_mul1_reg_111 );

    SC_METHOD(thread_tmp_36_cast_fu_206_p1);
    sensitive << ( tmp_33_fu_201_p2 );

    SC_METHOD(thread_tmp_37_fu_197_p1);
    sensitive << ( ik_col_reg_122 );

    SC_METHOD(thread_tmp_fu_160_p2);
    sensitive << ( kernel_size_row );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ik_row_cast_fu_156_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_28_fu_175_p2 );
    sensitive << ( tmp_fu_160_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "calculateConvolution_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, kernel_size_row, "(port)kernel_size_row");
    sc_trace(mVcdFile, kernel_size_col, "(port)kernel_size_col");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_35_fu_141_p1, "tmp_35_fu_141_p1");
    sc_trace(mVcdFile, tmp_35_reg_243, "tmp_35_reg_243");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul2_fu_145_p2, "next_mul2_fu_145_p2");
    sc_trace(mVcdFile, next_mul2_reg_248, "next_mul2_reg_248");
    sc_trace(mVcdFile, next_mul_fu_151_p2, "next_mul_fu_151_p2");
    sc_trace(mVcdFile, next_mul_reg_253, "next_mul_reg_253");
    sc_trace(mVcdFile, ik_row_3_fu_165_p2, "ik_row_3_fu_165_p2");
    sc_trace(mVcdFile, ik_row_3_reg_261, "ik_row_3_reg_261");
    sc_trace(mVcdFile, ik_col_3_fu_180_p2, "ik_col_3_fu_180_p2");
    sc_trace(mVcdFile, ik_col_3_reg_269, "ik_col_3_reg_269");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_28_fu_175_p2, "tmp_28_fu_175_p2");
    sc_trace(mVcdFile, buffer_load_reg_284, "buffer_load_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, kernel_load_reg_289, "kernel_load_reg_289");
    sc_trace(mVcdFile, tmp_32_fu_211_p2, "tmp_32_fu_211_p2");
    sc_trace(mVcdFile, tmp_32_reg_294, "tmp_32_reg_294");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ik_row_reg_88, "ik_row_reg_88");
    sc_trace(mVcdFile, phi_mul_reg_99, "phi_mul_reg_99");
    sc_trace(mVcdFile, phi_mul1_reg_111, "phi_mul1_reg_111");
    sc_trace(mVcdFile, ik_col_reg_122, "ik_col_reg_122");
    sc_trace(mVcdFile, tmp_fu_160_p2, "tmp_fu_160_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_30_fu_192_p1, "tmp_30_fu_192_p1");
    sc_trace(mVcdFile, tmp_36_cast_fu_206_p1, "tmp_36_cast_fu_206_p1");
    sc_trace(mVcdFile, sum_fu_46, "sum_fu_46");
    sc_trace(mVcdFile, sum_1_fu_215_p2, "sum_1_fu_215_p2");
    sc_trace(mVcdFile, ik_row_cast_fu_156_p1, "ik_row_cast_fu_156_p1");
    sc_trace(mVcdFile, ik_col_cast_fu_171_p1, "ik_col_cast_fu_171_p1");
    sc_trace(mVcdFile, tmp_29_fu_186_p2, "tmp_29_fu_186_p2");
    sc_trace(mVcdFile, tmp_37_fu_197_p1, "tmp_37_fu_197_p1");
    sc_trace(mVcdFile, tmp_33_fu_201_p2, "tmp_33_fu_201_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

calculateConvolution::~calculateConvolution() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void calculateConvolution::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ik_col_reg_122 = ik_col_3_reg_269.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_160_p2.read()))) {
        ik_col_reg_122 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_28_fu_175_p2.read(), ap_const_lv1_0))) {
        ik_row_reg_88 = ik_row_3_reg_261.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ik_row_reg_88 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_28_fu_175_p2.read(), ap_const_lv1_0))) {
        phi_mul1_reg_111 = next_mul2_reg_248.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_111 = ap_const_lv38_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_28_fu_175_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_99 = next_mul_reg_253.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_99 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sum_fu_46 = sum_1_fu_215_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sum_fu_46 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_load_reg_284 = buffer_r_q0.read();
        kernel_load_reg_289 = kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ik_col_3_reg_269 = ik_col_3_fu_180_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ik_row_3_reg_261 = ik_row_3_fu_165_p2.read();
        next_mul2_reg_248 = next_mul2_fu_145_p2.read();
        next_mul_reg_253 = next_mul_fu_151_p2.read();
        tmp_35_reg_243 = tmp_35_fu_141_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_32_reg_294 = tmp_32_fu_211_p2.read();
    }
}

void calculateConvolution::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void calculateConvolution::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void calculateConvolution::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void calculateConvolution::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void calculateConvolution::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void calculateConvolution::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void calculateConvolution::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_160_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void calculateConvolution::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void calculateConvolution::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_160_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void calculateConvolution::thread_ap_return() {
    ap_return = sum_fu_46.read();
}

void calculateConvolution::thread_buffer_r_address0() {
    buffer_r_address0 =  (sc_lv<5>) (tmp_30_fu_192_p1.read());
}

void calculateConvolution::thread_buffer_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void calculateConvolution::thread_ik_col_3_fu_180_p2() {
    ik_col_3_fu_180_p2 = (!ik_col_reg_122.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ik_col_reg_122.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void calculateConvolution::thread_ik_col_cast_fu_171_p1() {
    ik_col_cast_fu_171_p1 = esl_zext<32,31>(ik_col_reg_122.read());
}

void calculateConvolution::thread_ik_row_3_fu_165_p2() {
    ik_row_3_fu_165_p2 = (!ap_const_lv31_1.is_01() || !ik_row_reg_88.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(ik_row_reg_88.read()));
}

void calculateConvolution::thread_ik_row_cast_fu_156_p1() {
    ik_row_cast_fu_156_p1 = esl_zext<32,31>(ik_row_reg_88.read());
}

void calculateConvolution::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<10>) (tmp_36_cast_fu_206_p1.read());
}

void calculateConvolution::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void calculateConvolution::thread_next_mul2_fu_145_p2() {
    next_mul2_fu_145_p2 = (!ap_const_lv38_64.is_01() || !phi_mul1_reg_111.read().is_01())? sc_lv<38>(): (sc_biguint<38>(ap_const_lv38_64) + sc_biguint<38>(phi_mul1_reg_111.read()));
}

void calculateConvolution::thread_next_mul_fu_151_p2() {
    next_mul_fu_151_p2 = (!phi_mul_reg_99.read().is_01() || !kernel_size_col.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_99.read()) + sc_biguint<32>(kernel_size_col.read()));
}

void calculateConvolution::thread_sum_1_fu_215_p2() {
    sum_1_fu_215_p2 = (!sum_fu_46.read().is_01() || !tmp_32_reg_294.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_fu_46.read()) + sc_biguint<32>(tmp_32_reg_294.read()));
}

void calculateConvolution::thread_tmp_28_fu_175_p2() {
    tmp_28_fu_175_p2 = (!ik_col_cast_fu_171_p1.read().is_01() || !kernel_size_col.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ik_col_cast_fu_171_p1.read()) < sc_bigint<32>(kernel_size_col.read()));
}

void calculateConvolution::thread_tmp_29_fu_186_p2() {
    tmp_29_fu_186_p2 = (!ik_col_cast_fu_171_p1.read().is_01() || !phi_mul_reg_99.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ik_col_cast_fu_171_p1.read()) + sc_biguint<32>(phi_mul_reg_99.read()));
}

void calculateConvolution::thread_tmp_30_fu_192_p1() {
    tmp_30_fu_192_p1 = esl_sext<64,32>(tmp_29_fu_186_p2.read());
}

void calculateConvolution::thread_tmp_32_fu_211_p2() {
    tmp_32_fu_211_p2 = (!kernel_load_reg_289.read().is_01() || !buffer_load_reg_284.read().is_01())? sc_lv<32>(): sc_bigint<32>(kernel_load_reg_289.read()) * sc_bigint<32>(buffer_load_reg_284.read());
}

void calculateConvolution::thread_tmp_33_fu_201_p2() {
    tmp_33_fu_201_p2 = (!tmp_35_reg_243.read().is_01() || !tmp_37_fu_197_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_35_reg_243.read()) + sc_biguint<11>(tmp_37_fu_197_p1.read()));
}

void calculateConvolution::thread_tmp_35_fu_141_p1() {
    tmp_35_fu_141_p1 = phi_mul1_reg_111.read().range(11-1, 0);
}

void calculateConvolution::thread_tmp_36_cast_fu_206_p1() {
    tmp_36_cast_fu_206_p1 = esl_zext<64,11>(tmp_33_fu_201_p2.read());
}

void calculateConvolution::thread_tmp_37_fu_197_p1() {
    tmp_37_fu_197_p1 = ik_col_reg_122.read().range(11-1, 0);
}

void calculateConvolution::thread_tmp_fu_160_p2() {
    tmp_fu_160_p2 = (!ik_row_cast_fu_156_p1.read().is_01() || !kernel_size_row.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ik_row_cast_fu_156_p1.read()) < sc_bigint<32>(kernel_size_row.read()));
}

void calculateConvolution::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_160_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_28_fu_175_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

