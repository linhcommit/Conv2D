// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module updateBuffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_q0,
        in_data_address0,
        in_data_ce0,
        in_data_q0,
        index_row_out,
        index_col_out,
        kernel_size_row,
        kernel_size_col,
        col_in
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] buffer_r_q0;
output  [13:0] in_data_address0;
output   in_data_ce0;
input  [31:0] in_data_q0;
input  [30:0] index_row_out;
input  [30:0] index_col_out;
input  [31:0] kernel_size_row;
input  [31:0] kernel_size_col;
input  [31:0] col_in;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[31:0] buffer_r_d0;
reg in_data_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_fu_165_p2;
reg   [31:0] tmp_reg_292;
wire   [0:0] tmp_2_fu_177_p2;
reg   [0:0] tmp_2_reg_298;
wire   [14:0] tmp_3_fu_183_p1;
reg   [14:0] tmp_3_reg_302;
wire   [31:0] next_mul_fu_187_p2;
reg   [31:0] next_mul_reg_307;
wire    ap_CS_fsm_state2;
wire   [30:0] ik_row_1_fu_201_p2;
reg   [30:0] ik_row_1_reg_315;
wire   [30:0] ik_col_1_fu_216_p2;
reg   [30:0] ik_col_1_reg_323;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_6_fu_211_p2;
wire   [31:0] tmp_s_fu_237_p2;
reg   [31:0] tmp_s_reg_333;
wire   [31:0] tmp_13_fu_254_p2;
reg   [31:0] tmp_13_reg_343;
reg   [30:0] ik_row_reg_126;
wire    ap_CS_fsm_state5;
reg   [31:0] phi_mul_reg_138;
reg   [30:0] ik_col_reg_150;
wire   [0:0] tmp_4_fu_196_p2;
wire    ap_CS_fsm_state4;
wire  signed [63:0] tmp_9_fu_232_p1;
wire  signed [63:0] tmp_17_cast_fu_250_p1;
wire  signed [63:0] tmp_10_fu_259_p1;
wire  signed [63:0] tmp_14_fu_263_p1;
wire   [31:0] index_col_out_cast_fu_161_p1;
wire   [31:0] tmp_1_fu_171_p2;
wire   [31:0] ik_row_cast_fu_192_p1;
wire   [31:0] ik_col_cast_fu_207_p1;
wire   [31:0] tmp1_cast_fu_222_p1;
wire   [31:0] tmp_8_fu_226_p2;
wire  signed [14:0] grp_fu_267_p4;
wire   [14:0] grp_fu_267_p0;
wire   [14:0] grp_fu_267_p1;
wire   [7:0] grp_fu_267_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

conv2D_ama_addmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
conv2D_ama_addmulcud_U12(
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .din2(grp_fu_267_p2),
    .din3(tmp_3_reg_302),
    .dout(grp_fu_267_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ik_col_reg_150 <= ik_col_1_reg_323;
    end else if (((tmp_4_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ik_col_reg_150 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ik_row_reg_126 <= ik_row_1_reg_315;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ik_row_reg_126 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul_reg_138 <= next_mul_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_138 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ik_col_1_reg_323 <= ik_col_1_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ik_row_1_reg_315 <= ik_row_1_fu_201_p2;
        next_mul_reg_307 <= next_mul_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_211_p2 == 1'd0) & (tmp_2_reg_298 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_13_reg_343 <= tmp_13_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_2_reg_298 <= tmp_2_fu_177_p2;
        tmp_3_reg_302 <= tmp_3_fu_183_p1;
        tmp_reg_292 <= tmp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_s_reg_333 <= tmp_s_fu_237_p2;
    end
end

always @ (*) begin
    if ((((tmp_4_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_r_address0 = tmp_14_fu_263_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_address0 = tmp_10_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_address0 = tmp_9_fu_232_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_r_d0 = in_data_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_d0 = buffer_r_q0;
    end else begin
        buffer_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((tmp_2_reg_298 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_data_ce0 = 1'b1;
    end else begin
        in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_4_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_6_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_267_p0 = index_row_out[14:0];

assign grp_fu_267_p1 = ik_row_reg_126[14:0];

assign grp_fu_267_p2 = 15'd100;

assign ik_col_1_fu_216_p2 = (ik_col_reg_150 + 31'd1);

assign ik_col_cast_fu_207_p1 = ik_col_reg_150;

assign ik_row_1_fu_201_p2 = (ik_row_reg_126 + 31'd1);

assign ik_row_cast_fu_192_p1 = ik_row_reg_126;

assign in_data_address0 = tmp_17_cast_fu_250_p1;

assign index_col_out_cast_fu_161_p1 = index_col_out;

assign next_mul_fu_187_p2 = (phi_mul_reg_138 + kernel_size_col);

assign tmp1_cast_fu_222_p1 = ik_col_1_fu_216_p2;

assign tmp_10_fu_259_p1 = $signed(tmp_s_reg_333);

assign tmp_13_fu_254_p2 = (tmp_reg_292 + phi_mul_reg_138);

assign tmp_14_fu_263_p1 = $signed(tmp_13_reg_343);

assign tmp_17_cast_fu_250_p1 = grp_fu_267_p4;

assign tmp_1_fu_171_p2 = (kernel_size_col + index_col_out_cast_fu_161_p1);

assign tmp_2_fu_177_p2 = (($signed(tmp_1_fu_171_p2) < $signed(col_in)) ? 1'b1 : 1'b0);

assign tmp_3_fu_183_p1 = tmp_1_fu_171_p2[14:0];

assign tmp_4_fu_196_p2 = (($signed(ik_row_cast_fu_192_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

assign tmp_6_fu_211_p2 = (($signed(ik_col_cast_fu_207_p1) < $signed(tmp_reg_292)) ? 1'b1 : 1'b0);

assign tmp_8_fu_226_p2 = (tmp1_cast_fu_222_p1 + phi_mul_reg_138);

assign tmp_9_fu_232_p1 = $signed(tmp_8_fu_226_p2);

assign tmp_fu_165_p2 = ($signed(32'd4294967295) + $signed(kernel_size_col));

assign tmp_s_fu_237_p2 = (ik_col_cast_fu_207_p1 + phi_mul_reg_138);

endmodule //updateBuffer
