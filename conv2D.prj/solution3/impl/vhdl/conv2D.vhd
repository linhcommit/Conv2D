-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=4846,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1337,HLS_SYN_LUT=1683,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_201_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_reg_284 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_205_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_reg_289 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_row_out_1_fu_220_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_1_reg_297 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_1_fu_235_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_1_reg_305 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_142_ap_start : STD_LOGIC;
    signal grp_updateBuffer_fu_142_ap_done : STD_LOGIC;
    signal grp_updateBuffer_fu_142_ap_idle : STD_LOGIC;
    signal grp_updateBuffer_fu_142_ap_ready : STD_LOGIC;
    signal grp_updateBuffer_fu_142_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_updateBuffer_fu_142_buffer_r_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_142_buffer_r_we0 : STD_LOGIC;
    signal grp_updateBuffer_fu_142_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_142_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateBuffer_fu_142_in_data_ce0 : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_ap_start : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_ap_done : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_ap_idle : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_ap_ready : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_calculateConvolution_fu_156_buffer_r_ce0 : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateConvolution_fu_156_kernel_ce0 : STD_LOGIC;
    signal grp_calculateConvolution_fu_156_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_166_ap_start : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_ap_done : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_ap_idle : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_ap_ready : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_initializeBuffer_fu_166_buffer_r_ce0 : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_buffer_r_we0 : STD_LOGIC;
    signal grp_initializeBuffer_fu_166_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_166_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_initializeBuffer_fu_166_in_data_ce0 : STD_LOGIC;
    signal index_row_out_reg_107 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_25_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_119 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_col_out_reg_130 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_updateBuffer_fu_142_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_calculateConvolution_fu_156_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_initializeBuffer_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal tmp_23_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_row_out_cast_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_col_out_cast_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_241_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_245_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component updateBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        index_col_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateConvolution IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component initializeBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component conv2D_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0);

    grp_updateBuffer_fu_142 : component updateBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateBuffer_fu_142_ap_start,
        ap_done => grp_updateBuffer_fu_142_ap_done,
        ap_idle => grp_updateBuffer_fu_142_ap_idle,
        ap_ready => grp_updateBuffer_fu_142_ap_ready,
        buffer_r_address0 => grp_updateBuffer_fu_142_buffer_r_address0,
        buffer_r_ce0 => grp_updateBuffer_fu_142_buffer_r_ce0,
        buffer_r_we0 => grp_updateBuffer_fu_142_buffer_r_we0,
        buffer_r_d0 => grp_updateBuffer_fu_142_buffer_r_d0,
        buffer_r_q0 => buffer_q0,
        in_data_address0 => grp_updateBuffer_fu_142_in_data_address0,
        in_data_ce0 => grp_updateBuffer_fu_142_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_107,
        index_col_out => index_col_out_reg_130,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        col_in => col_in);

    grp_calculateConvolution_fu_156 : component calculateConvolution
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calculateConvolution_fu_156_ap_start,
        ap_done => grp_calculateConvolution_fu_156_ap_done,
        ap_idle => grp_calculateConvolution_fu_156_ap_idle,
        ap_ready => grp_calculateConvolution_fu_156_ap_ready,
        buffer_r_address0 => grp_calculateConvolution_fu_156_buffer_r_address0,
        buffer_r_ce0 => grp_calculateConvolution_fu_156_buffer_r_ce0,
        buffer_r_q0 => buffer_q0,
        kernel_address0 => grp_calculateConvolution_fu_156_kernel_address0,
        kernel_ce0 => grp_calculateConvolution_fu_156_kernel_ce0,
        kernel_q0 => kernel_q0,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        ap_return => grp_calculateConvolution_fu_156_ap_return);

    grp_initializeBuffer_fu_166 : component initializeBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initializeBuffer_fu_166_ap_start,
        ap_done => grp_initializeBuffer_fu_166_ap_done,
        ap_idle => grp_initializeBuffer_fu_166_ap_idle,
        ap_ready => grp_initializeBuffer_fu_166_ap_ready,
        buffer_r_address0 => grp_initializeBuffer_fu_166_buffer_r_address0,
        buffer_r_ce0 => grp_initializeBuffer_fu_166_buffer_r_ce0,
        buffer_r_we0 => grp_initializeBuffer_fu_166_buffer_r_we0,
        buffer_r_d0 => grp_initializeBuffer_fu_166_buffer_r_d0,
        in_data_address0 => grp_initializeBuffer_fu_166_in_data_address0,
        in_data_ce0 => grp_initializeBuffer_fu_166_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_107,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_calculateConvolution_fu_156_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calculateConvolution_fu_156_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_25_fu_230_p2 = ap_const_lv1_1))) then 
                    grp_calculateConvolution_fu_156_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateConvolution_fu_156_ap_ready = ap_const_logic_1)) then 
                    grp_calculateConvolution_fu_156_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initializeBuffer_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initializeBuffer_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_23_fu_215_p2 = ap_const_lv1_1))) then 
                    grp_initializeBuffer_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initializeBuffer_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_initializeBuffer_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateBuffer_fu_142_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateBuffer_fu_142_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_updateBuffer_fu_142_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateBuffer_fu_142_ap_ready = ap_const_logic_1)) then 
                    grp_updateBuffer_fu_142_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    index_col_out_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_142_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                index_col_out_reg_130 <= index_col_out_1_reg_305;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_initializeBuffer_fu_166_ap_done = ap_const_logic_1))) then 
                index_col_out_reg_130 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_row_out_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_25_fu_230_p2 = ap_const_lv1_0))) then 
                index_row_out_reg_107 <= index_row_out_1_reg_297;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_row_out_reg_107 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_25_fu_230_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_119 <= next_mul_reg_289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_119 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                index_col_out_1_reg_305 <= index_col_out_1_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_row_out_1_reg_297 <= index_row_out_1_fu_220_p2;
                next_mul_reg_289 <= next_mul_fu_205_p2;
                tmp_29_reg_284 <= tmp_29_fu_201_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_22_reg_279 <= tmp_22_fu_195_p2;
                tmp_s_reg_274 <= tmp_s_fu_183_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_updateBuffer_fu_142_ap_done, grp_calculateConvolution_fu_156_ap_done, grp_initializeBuffer_fu_166_ap_done, tmp_25_fu_230_p2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_23_fu_215_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_23_fu_215_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_initializeBuffer_fu_166_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_25_fu_230_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_156_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_updateBuffer_fu_142_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_23_fu_215_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_23_fu_215_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_23_fu_215_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_23_fu_215_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(grp_updateBuffer_fu_142_buffer_r_address0, grp_calculateConvolution_fu_156_buffer_r_address0, grp_initializeBuffer_fu_166_buffer_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_address0 <= grp_initializeBuffer_fu_166_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= grp_calculateConvolution_fu_156_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_address0 <= grp_updateBuffer_fu_142_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(grp_updateBuffer_fu_142_buffer_r_ce0, grp_calculateConvolution_fu_156_buffer_r_ce0, grp_initializeBuffer_fu_166_buffer_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_ce0 <= grp_initializeBuffer_fu_166_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_ce0 <= grp_calculateConvolution_fu_156_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_ce0 <= grp_updateBuffer_fu_142_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(grp_updateBuffer_fu_142_buffer_r_d0, grp_initializeBuffer_fu_166_buffer_r_d0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_d0 <= grp_initializeBuffer_fu_166_buffer_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_d0 <= grp_updateBuffer_fu_142_buffer_r_d0;
        else 
            buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(grp_updateBuffer_fu_142_buffer_r_we0, grp_initializeBuffer_fu_166_buffer_r_we0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_we0 <= grp_initializeBuffer_fu_166_buffer_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_we0 <= grp_updateBuffer_fu_142_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculateConvolution_fu_156_ap_start <= grp_calculateConvolution_fu_156_ap_start_reg;
    grp_initializeBuffer_fu_166_ap_start <= grp_initializeBuffer_fu_166_ap_start_reg;
    grp_updateBuffer_fu_142_ap_start <= grp_updateBuffer_fu_142_ap_start_reg;

    in_data_address0_assign_proc : process(grp_updateBuffer_fu_142_in_data_address0, grp_initializeBuffer_fu_166_in_data_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_address0 <= grp_initializeBuffer_fu_166_in_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_data_address0 <= grp_updateBuffer_fu_142_in_data_address0;
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(grp_updateBuffer_fu_142_in_data_ce0, grp_initializeBuffer_fu_166_in_data_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= grp_initializeBuffer_fu_166_in_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_data_ce0 <= grp_updateBuffer_fu_142_in_data_ce0;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_1_fu_235_p2 <= std_logic_vector(unsigned(index_col_out_reg_130) + unsigned(ap_const_lv31_1));
    index_col_out_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_col_out_reg_130),32));
    index_row_out_1_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(index_row_out_reg_107));
    index_row_out_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_row_out_reg_107),32));
    kernel_address0 <= grp_calculateConvolution_fu_156_kernel_address0;
    kernel_ce0 <= grp_calculateConvolution_fu_156_kernel_ce0;
    next_mul_fu_205_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul_reg_119));
    out_data_address0 <= tmp_30_cast_fu_250_p1(14 - 1 downto 0);

    out_data_ce0_assign_proc : process(grp_calculateConvolution_fu_156_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_156_ap_done = ap_const_logic_1))) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= grp_calculateConvolution_fu_156_ap_return;

    out_data_we0_assign_proc : process(grp_calculateConvolution_fu_156_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_calculateConvolution_fu_156_ap_done = ap_const_logic_1))) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_189_p2 <= std_logic_vector(unsigned(col_in) + unsigned(ap_const_lv32_1));
    tmp_22_fu_195_p2 <= std_logic_vector(unsigned(tmp_21_fu_189_p2) - unsigned(kernel_size_col));
    tmp_23_fu_215_p2 <= "1" when (signed(index_row_out_cast_fu_211_p1) < signed(tmp_s_reg_274)) else "0";
    tmp_25_fu_230_p2 <= "1" when (signed(index_col_out_cast_fu_226_p1) < signed(tmp_22_reg_279)) else "0";
    tmp_28_fu_245_p2 <= std_logic_vector(unsigned(tmp_29_reg_284) + unsigned(tmp_31_fu_241_p1));
    tmp_29_fu_201_p1 <= phi_mul_reg_119(15 - 1 downto 0);
    tmp_30_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_245_p2),64));
    tmp_31_fu_241_p1 <= index_col_out_reg_130(15 - 1 downto 0);
    tmp_fu_177_p2 <= std_logic_vector(unsigned(row_in) + unsigned(ap_const_lv32_1));
    tmp_s_fu_183_p2 <= std_logic_vector(unsigned(tmp_fu_177_p2) - unsigned(kernel_size_row));
end behav;
