-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateConvolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calculateConvolution is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_35_fu_141_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_reg_243 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_145_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul2_reg_248 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_3_fu_165_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_3_reg_261 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_3_fu_180_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_3_reg_269 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_28_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_load_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_load_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ik_row_reg_88 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_111 : STD_LOGIC_VECTOR (37 downto 0);
    signal ik_col_reg_122 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_30_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_cast_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_cast_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_197_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ik_col_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ik_col_reg_122 <= ik_col_3_reg_269;
            elsif (((tmp_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_122 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ik_row_reg_88 <= ik_row_3_reg_261;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ik_row_reg_88 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_111 <= next_mul2_reg_248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_111 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_99 <= next_mul_reg_253;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_99 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_fu_46 <= sum_1_fu_215_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_fu_46 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                buffer_load_reg_284 <= buffer_r_q0;
                kernel_load_reg_289 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ik_col_3_reg_269 <= ik_col_3_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_3_reg_261 <= ik_row_3_fu_165_p2;
                next_mul2_reg_248 <= next_mul2_fu_145_p2;
                next_mul_reg_253 <= next_mul_fu_151_p2;
                tmp_35_reg_243 <= tmp_35_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_32_reg_294 <= tmp_32_fu_211_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_28_fu_175_p2, tmp_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_28_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_160_p2)
    begin
        if ((((tmp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_160_p2)
    begin
        if (((tmp_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_fu_46;
    buffer_r_address0 <= tmp_30_fu_192_p1(5 - 1 downto 0);

    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ik_col_3_fu_180_p2 <= std_logic_vector(unsigned(ik_col_reg_122) + unsigned(ap_const_lv31_1));
    ik_col_cast_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_reg_122),32));
    ik_row_3_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ik_row_reg_88));
    ik_row_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_88),32));
    kernel_address0 <= tmp_36_cast_fu_206_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_145_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul1_reg_111));
    next_mul_fu_151_p2 <= std_logic_vector(unsigned(phi_mul_reg_99) + unsigned(kernel_size_col));
    sum_1_fu_215_p2 <= std_logic_vector(unsigned(sum_fu_46) + unsigned(tmp_32_reg_294));
    tmp_28_fu_175_p2 <= "1" when (signed(ik_col_cast_fu_171_p1) < signed(kernel_size_col)) else "0";
    tmp_29_fu_186_p2 <= std_logic_vector(unsigned(ik_col_cast_fu_171_p1) + unsigned(phi_mul_reg_99));
        tmp_30_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_186_p2),64));

    tmp_32_fu_211_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_289) * signed(buffer_load_reg_284))), 32));
    tmp_33_fu_201_p2 <= std_logic_vector(unsigned(tmp_35_reg_243) + unsigned(tmp_37_fu_197_p1));
    tmp_35_fu_141_p1 <= phi_mul1_reg_111(11 - 1 downto 0);
    tmp_36_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_201_p2),64));
    tmp_37_fu_197_p1 <= ik_col_reg_122(11 - 1 downto 0);
    tmp_fu_160_p2 <= "1" when (signed(ik_row_cast_fu_156_p1) < signed(kernel_size_row)) else "0";
end behav;
