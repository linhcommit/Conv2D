-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity updateBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
    index_col_out : IN STD_LOGIC_VECTOR (30 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of updateBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_reg_302 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ik_row_1_fu_199_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_1_reg_315 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_1_fu_214_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_1_reg_323 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_reg_124 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal phi_mul_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_reg_148 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_col_out_cast_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_cast_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component conv2D_ama_addmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    conv2D_ama_addmulbkb_U1 : component conv2D_ama_addmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 8,
        din3_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        din2 => grp_fu_267_p2,
        din3 => tmp_3_reg_302,
        dout => grp_fu_267_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ik_col_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ik_col_reg_148 <= ik_col_1_reg_323;
            elsif (((tmp_4_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_col_reg_148 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ik_row_reg_124 <= ik_row_1_reg_315;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ik_row_reg_124 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul_reg_136 <= next_mul_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_136 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ik_col_1_reg_323 <= ik_col_1_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ik_row_1_reg_315 <= ik_row_1_fu_199_p2;
                next_mul_reg_307 <= next_mul_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_209_p2 = ap_const_lv1_0) and (tmp_2_reg_298 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_13_reg_343 <= tmp_13_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_2_reg_298 <= tmp_2_fu_175_p2;
                tmp_3_reg_302 <= tmp_3_fu_181_p1;
                tmp_reg_292 <= tmp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_s_reg_333 <= tmp_s_fu_237_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_6_fu_209_p2, tmp_4_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_4_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_6_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_4_fu_194_p2)
    begin
        if ((((tmp_4_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_4_fu_194_p2)
    begin
        if (((tmp_4_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, tmp_9_fu_232_p1, tmp_10_fu_259_p1, tmp_14_fu_263_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_address0 <= tmp_14_fu_263_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_address0 <= tmp_10_fu_259_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_address0 <= tmp_9_fu_232_p1(5 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_d0_assign_proc : process(buffer_r_q0, in_data_q0, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_d0 <= in_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_r_d0 <= buffer_r_q0;
        else 
            buffer_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(tmp_2_reg_298, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_2_reg_298 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_267_p0 <= ik_row_reg_124(15 - 1 downto 0);
    grp_fu_267_p1 <= index_row_out(15 - 1 downto 0);
    grp_fu_267_p2 <= ap_const_lv15_64(8 - 1 downto 0);
    ik_col_1_fu_214_p2 <= std_logic_vector(unsigned(ik_col_reg_148) + unsigned(ap_const_lv31_1));
    ik_col_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_reg_148),32));
    ik_row_1_fu_199_p2 <= std_logic_vector(unsigned(ik_row_reg_124) + unsigned(ap_const_lv31_1));
    ik_row_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_reg_124),32));
    in_data_address0 <= tmp_17_cast_fu_250_p1(14 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_col_out),32));
    next_mul_fu_185_p2 <= std_logic_vector(unsigned(phi_mul_reg_136) + unsigned(kernel_size_col));
    tmp1_fu_220_p2 <= std_logic_vector(unsigned(ik_col_cast_fu_205_p1) + unsigned(ap_const_lv32_1));
        tmp_10_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_333),64));

    tmp_13_fu_254_p2 <= std_logic_vector(unsigned(tmp_reg_292) + unsigned(phi_mul_reg_136));
        tmp_14_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_343),64));

        tmp_17_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_267_p4),64));

    tmp_1_fu_169_p2 <= std_logic_vector(unsigned(kernel_size_col) + unsigned(index_col_out_cast_fu_159_p1));
    tmp_2_fu_175_p2 <= "1" when (signed(tmp_1_fu_169_p2) < signed(col_in)) else "0";
    tmp_3_fu_181_p1 <= tmp_1_fu_169_p2(15 - 1 downto 0);
    tmp_4_fu_194_p2 <= "1" when (signed(ik_row_cast_fu_190_p1) < signed(kernel_size_row)) else "0";
    tmp_6_fu_209_p2 <= "1" when (signed(ik_col_cast_fu_205_p1) < signed(tmp_reg_292)) else "0";
    tmp_8_fu_226_p2 <= std_logic_vector(unsigned(tmp1_fu_220_p2) + unsigned(phi_mul_reg_136));
        tmp_9_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_226_p2),64));

    tmp_fu_163_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(kernel_size_col));
    tmp_s_fu_237_p2 <= std_logic_vector(unsigned(phi_mul_reg_136) + unsigned(ik_col_cast_fu_205_p1));
end behav;
