-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Output_Row_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_Output_Row_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal tmp_s_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_i_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_i_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_363_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_611 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul4_fu_367_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul4_reg_616 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_row_out_fu_382_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_reg_624 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_fu_397_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_reg_632 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_buffer_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_4_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_570_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_reg_642 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_fu_431_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_reg_650 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_17_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal index_col_out_1_fu_471_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_1_reg_668 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_32_fu_477_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_reg_673 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul2_fu_481_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul2_reg_678 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_2_fu_501_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_2_reg_691 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_2_fu_530_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_2_reg_699 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_25_i_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_load_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal kernel_load_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sum_1_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_303_ap_start : STD_LOGIC;
    signal grp_updateBuffer_fu_303_ap_done : STD_LOGIC;
    signal grp_updateBuffer_fu_303_ap_idle : STD_LOGIC;
    signal grp_updateBuffer_fu_303_ap_ready : STD_LOGIC;
    signal grp_updateBuffer_fu_303_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_updateBuffer_fu_303_buffer_r_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_303_buffer_r_we0 : STD_LOGIC;
    signal grp_updateBuffer_fu_303_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_303_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateBuffer_fu_303_in_data_ce0 : STD_LOGIC;
    signal index_row_out_assign_reg_153 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul3_reg_165 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_buffer_i_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_row_i_reg_188 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_1_i_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_i_reg_210 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_reg_221 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_i1_reg_246 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_269 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_1_i_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_col_i5_reg_292 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_updateBuffer_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal tmp_26_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_i_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_347_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_i_fu_351_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_cast_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_cast_i_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_412_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_408_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_cast_i_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_437_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_441_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_26_fu_441_p2 : signal is "no";
    signal index_col_out_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_cast_i2_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_507_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_511_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_cast_i6_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_i_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_547_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_551_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_570_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_570_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component updateBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        index_col_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_mul_mul_8ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Loop_Output_Row_pcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component Loop_Output_Row_pcud
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0);

    grp_updateBuffer_fu_303 : component updateBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateBuffer_fu_303_ap_start,
        ap_done => grp_updateBuffer_fu_303_ap_done,
        ap_idle => grp_updateBuffer_fu_303_ap_idle,
        ap_ready => grp_updateBuffer_fu_303_ap_ready,
        buffer_r_address0 => grp_updateBuffer_fu_303_buffer_r_address0,
        buffer_r_ce0 => grp_updateBuffer_fu_303_buffer_r_ce0,
        buffer_r_we0 => grp_updateBuffer_fu_303_buffer_r_we0,
        buffer_r_d0 => grp_updateBuffer_fu_303_buffer_r_d0,
        buffer_r_q0 => buffer_q0,
        in_data_address0 => grp_updateBuffer_fu_303_in_data_address0,
        in_data_ce0 => grp_updateBuffer_fu_303_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_assign_reg_153,
        index_col_out => index_col_out_reg_221,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        col_in => col_in);

    conv2D_mul_mul_8ndEe_U10 : component conv2D_mul_mul_8ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => tmp_24_fu_570_p0,
        din1 => tmp_24_fu_570_p1,
        dout => tmp_24_fu_570_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_18_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_updateBuffer_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateBuffer_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i3_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_updateBuffer_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateBuffer_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_updateBuffer_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_buffer_1_i_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_buffer_1_i_reg_199 <= tmp_19_i_fu_451_p2;
            elsif (((tmp_i_4_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_buffer_1_i_reg_199 <= i_buffer_i_reg_176;
            end if; 
        end if;
    end process;

    i_buffer_i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_426_p2 = ap_const_lv1_0))) then 
                i_buffer_i_reg_176 <= i_buffer_reg_637;
            elsif (((tmp_18_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_buffer_i_reg_176 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_col_i5_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ik_col_i5_reg_292 <= ik_col_2_reg_699;
            elsif (((tmp_i3_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                ik_col_i5_reg_292 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_col_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ik_col_i_reg_210 <= ik_col_reg_650;
            elsif (((tmp_i_4_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ik_col_i_reg_210 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_i1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_25_i_fu_525_p2 = ap_const_lv1_0))) then 
                ik_row_i1_reg_246 <= ik_row_2_reg_691;
            elsif (((tmp_21_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ik_row_i1_reg_246 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_426_p2 = ap_const_lv1_0))) then 
                ik_row_i_reg_188 <= ik_row_reg_632;
            elsif (((tmp_18_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_row_i_reg_188 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_col_out_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_4_fu_392_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_col_out_reg_221 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_updateBuffer_fu_303_ap_done = ap_const_logic_1))) then 
                index_col_out_reg_221 <= index_col_out_1_reg_668;
            end if; 
        end if;
    end process;

    index_row_out_assign_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                index_row_out_assign_reg_153 <= index_row_out_reg_624;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_row_out_assign_reg_153 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_25_i_fu_525_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_269 <= next_mul2_reg_678;
            elsif (((tmp_21_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul1_reg_269 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul3_reg_165 <= next_mul4_reg_616;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul3_reg_165 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_25_i_fu_525_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_257 <= next_mul_reg_683;
            elsif (((tmp_21_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_257 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_1_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum_1_i_reg_280 <= sum_1_fu_565_p2;
            elsif (((tmp_i3_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_1_i_reg_280 <= sum_reg_233;
            end if; 
        end if;
    end process;

    sum_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_25_i_fu_525_p2 = ap_const_lv1_0))) then 
                sum_reg_233 <= sum_1_i_reg_280;
            elsif (((tmp_21_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_reg_233 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                buffer_load_reg_714 <= buffer_q0;
                kernel_load_reg_719 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_4_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_buffer_reg_637 <= i_buffer_fu_403_p2;
                tmp_24_reg_642 <= tmp_24_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ik_col_2_reg_699 <= ik_col_2_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ik_col_reg_650 <= ik_col_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ik_row_2_reg_691 <= ik_row_2_fu_501_p2;
                next_mul2_reg_678 <= next_mul2_fu_481_p2;
                next_mul_reg_683 <= next_mul_fu_487_p2;
                tmp_32_reg_673 <= tmp_32_fu_477_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ik_row_reg_632 <= ik_row_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                index_col_out_1_reg_668 <= index_col_out_1_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_row_out_reg_624 <= index_row_out_fu_382_p2;
                next_mul4_reg_616 <= next_mul4_fu_367_p2;
                tmp_23_reg_611 <= tmp_23_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    smax_cast_i_reg_606(30 downto 0) <= smax_cast_i_fu_359_p1(30 downto 0);
                tmp_17_reg_601 <= tmp_17_fu_335_p2;
                tmp_s_reg_596 <= tmp_s_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_30_i_reg_724 <= tmp_30_i_fu_561_p2;
            end if;
        end if;
    end process;
    smax_cast_i_reg_606(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_i_4_fu_392_p2, ap_CS_fsm_state4, tmp_17_i_fu_426_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_25_i_fu_525_p2, grp_updateBuffer_fu_303_ap_done, tmp_21_fu_466_p2, tmp_18_fu_377_p2, ap_CS_fsm_state12, tmp_i3_fu_496_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_18_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_4_fu_392_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_426_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((tmp_21_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_i3_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_25_i_fu_525_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_updateBuffer_fu_303_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_18_fu_377_p2)
    begin
        if (((tmp_18_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_18_fu_377_p2)
    begin
        if (((tmp_18_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_updateBuffer_fu_303_buffer_r_address0, ap_CS_fsm_state12, tmp_20_i_fu_457_p1, tmp_28_i_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_address0 <= tmp_28_i_fu_542_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= tmp_20_i_fu_457_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_address0 <= grp_updateBuffer_fu_303_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_updateBuffer_fu_303_buffer_r_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_ce0 <= grp_updateBuffer_fu_303_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(in_data_q0, ap_CS_fsm_state5, grp_updateBuffer_fu_303_buffer_r_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_d0 <= in_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_d0 <= grp_updateBuffer_fu_303_buffer_r_d0;
        else 
            buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state5, grp_updateBuffer_fu_303_buffer_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_we0 <= grp_updateBuffer_fu_303_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_updateBuffer_fu_303_ap_start <= grp_updateBuffer_fu_303_ap_start_reg;
    i_buffer_fu_403_p2 <= std_logic_vector(unsigned(i_buffer_i_reg_176) + unsigned(smax_cast_i_reg_606));
    ik_col_2_fu_530_p2 <= std_logic_vector(unsigned(ik_col_i5_reg_292) + unsigned(ap_const_lv31_1));
    ik_col_cast_i6_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_i5_reg_292),32));
    ik_col_cast_i_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_i_reg_210),32));
    ik_col_fu_431_p2 <= std_logic_vector(unsigned(ik_col_i_reg_210) + unsigned(ap_const_lv31_1));
    ik_row_2_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ik_row_i1_reg_246));
    ik_row_cast_i2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_i1_reg_246),32));
    ik_row_cast_i_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_i_reg_188),32));
    ik_row_fu_397_p2 <= std_logic_vector(unsigned(ik_row_i_reg_188) + unsigned(ap_const_lv31_1));

    in_data_address0_assign_proc : process(ap_CS_fsm_state4, grp_updateBuffer_fu_303_in_data_address0, ap_CS_fsm_state12, tmp_26_cast_fu_446_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_address0 <= tmp_26_cast_fu_446_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_data_address0 <= grp_updateBuffer_fu_303_in_data_address0;
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(ap_CS_fsm_state4, grp_updateBuffer_fu_303_in_data_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_data_ce0 <= grp_updateBuffer_fu_303_in_data_ce0;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_1_fu_471_p2 <= std_logic_vector(unsigned(index_col_out_reg_221) + unsigned(ap_const_lv31_1));
    index_col_out_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_col_out_reg_221),32));
    index_row_out_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_row_out_assign_reg_153),32));
    index_row_out_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(index_row_out_assign_reg_153));
    kernel_address0 <= tmp_29_cast_fu_556_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul1_reg_269));
    next_mul4_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul3_reg_165));
    next_mul_fu_487_p2 <= std_logic_vector(unsigned(phi_mul_reg_257) + unsigned(kernel_size_col));
    out_data_address0 <= tmp_28_cast_fu_516_p1(14 - 1 downto 0);

    out_data_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= sum_reg_233;

    out_data_we0_assign_proc : process(ap_CS_fsm_state7, tmp_i3_fu_496_p2)
    begin
        if (((tmp_i3_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    smax_cast_i_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_i_fu_351_p3),32));
    smax_i_fu_351_p3 <= 
        tmp_20_fu_347_p1 when (tmp_i_fu_341_p2(0) = '1') else 
        ap_const_lv31_0;
    sum_1_fu_565_p2 <= std_logic_vector(unsigned(sum_1_i_reg_280) + unsigned(tmp_30_i_reg_724));
    tmp_16_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(col_in));
    tmp_17_fu_335_p2 <= std_logic_vector(unsigned(tmp_16_fu_329_p2) - unsigned(kernel_size_col));
    tmp_17_i_fu_426_p2 <= "1" when (signed(ik_col_cast_i_fu_422_p1) < signed(kernel_size_col)) else "0";
    tmp_18_fu_377_p2 <= "1" when (signed(index_row_out_cast_fu_373_p1) < signed(tmp_s_reg_596)) else "0";
    tmp_19_i_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_buffer_1_i_reg_199));
    tmp_20_fu_347_p1 <= kernel_size_col(31 - 1 downto 0);
        tmp_20_i_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_buffer_1_i_reg_199),64));

    tmp_21_fu_466_p2 <= "1" when (signed(index_col_out_cast_fu_462_p1) < signed(tmp_17_reg_601)) else "0";
    tmp_23_fu_363_p1 <= phi_mul3_reg_165(15 - 1 downto 0);
    tmp_24_fu_570_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    tmp_24_fu_570_p1 <= std_logic_vector(unsigned(tmp_27_fu_412_p1) + unsigned(tmp_25_fu_408_p1));
    tmp_25_fu_408_p1 <= index_row_out_assign_reg_153(15 - 1 downto 0);
    tmp_25_i_fu_525_p2 <= "1" when (signed(ik_col_cast_i6_fu_521_p1) < signed(kernel_size_col)) else "0";
        tmp_26_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_441_p2),64));

    tmp_26_fu_441_p2 <= std_logic_vector(signed(tmp_24_reg_642) + signed(tmp_31_fu_437_p1));
    tmp_27_fu_412_p1 <= ik_row_i_reg_188(15 - 1 downto 0);
    tmp_27_i_fu_536_p2 <= std_logic_vector(unsigned(ik_col_cast_i6_fu_521_p1) + unsigned(phi_mul_reg_257));
    tmp_28_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_511_p2),64));
    tmp_28_fu_511_p2 <= std_logic_vector(unsigned(tmp_23_reg_611) + unsigned(tmp_33_fu_507_p1));
        tmp_28_i_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_i_fu_536_p2),64));

    tmp_29_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_551_p2),64));
    tmp_29_fu_551_p2 <= std_logic_vector(unsigned(tmp_32_reg_673) + unsigned(tmp_34_fu_547_p1));
    tmp_30_i_fu_561_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_719) * signed(buffer_load_reg_714))), 32));
    tmp_31_fu_437_p1 <= ik_col_i_reg_210(15 - 1 downto 0);
    tmp_32_fu_477_p1 <= phi_mul1_reg_269(11 - 1 downto 0);
    tmp_33_fu_507_p1 <= index_col_out_reg_221(15 - 1 downto 0);
    tmp_34_fu_547_p1 <= ik_col_i5_reg_292(11 - 1 downto 0);
    tmp_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(row_in));
    tmp_i3_fu_496_p2 <= "1" when (signed(ik_row_cast_i2_fu_492_p1) < signed(kernel_size_row)) else "0";
    tmp_i_4_fu_392_p2 <= "1" when (signed(ik_row_cast_i_fu_388_p1) < signed(kernel_size_row)) else "0";
    tmp_i_fu_341_p2 <= "1" when (signed(kernel_size_col) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_323_p2 <= std_logic_vector(unsigned(tmp_fu_317_p2) - unsigned(kernel_size_row));
end behav;
