-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D is
port (
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_we0 : OUT STD_LOGIC;
    in_data_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce1 : OUT STD_LOGIC;
    in_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_we1 : OUT STD_LOGIC;
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_we0 : OUT STD_LOGIC;
    out_data_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce1 : OUT STD_LOGIC;
    out_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_we1 : OUT STD_LOGIC;
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_we0 : OUT STD_LOGIC;
    kernel_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_we1 : OUT STD_LOGIC;
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=4791,HLS_SYN_TPT=4792,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1363,HLS_SYN_LUT=1672,HLS_VERSION=2018_3}";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Loop_Output_Row_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Output_Row_proc_U0_in_data_ce0 : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_kernel_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_Output_Row_proc_U0_kernel_ce0 : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_out_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Output_Row_proc_U0_out_data_ce0 : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_out_data_we0 : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_out_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Output_Row_proc_U0_start_write : STD_LOGIC;

    component Loop_Output_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_in : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        kernel_ce0 : OUT STD_LOGIC;
        kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_data_ce0 : OUT STD_LOGIC;
        out_data_we0 : OUT STD_LOGIC;
        out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Loop_Output_Row_proc_U0 : component Loop_Output_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Output_Row_proc_U0_ap_start,
        ap_done => Loop_Output_Row_proc_U0_ap_done,
        ap_continue => Loop_Output_Row_proc_U0_ap_continue,
        ap_idle => Loop_Output_Row_proc_U0_ap_idle,
        ap_ready => Loop_Output_Row_proc_U0_ap_ready,
        row_in => row_in,
        kernel_size_row => kernel_size_row,
        col_in => col_in,
        kernel_size_col => kernel_size_col,
        in_data_address0 => Loop_Output_Row_proc_U0_in_data_address0,
        in_data_ce0 => Loop_Output_Row_proc_U0_in_data_ce0,
        in_data_q0 => in_data_q0,
        kernel_address0 => Loop_Output_Row_proc_U0_kernel_address0,
        kernel_ce0 => Loop_Output_Row_proc_U0_kernel_ce0,
        kernel_q0 => kernel_q0,
        out_data_address0 => Loop_Output_Row_proc_U0_out_data_address0,
        out_data_ce0 => Loop_Output_Row_proc_U0_out_data_ce0,
        out_data_we0 => Loop_Output_Row_proc_U0_out_data_we0,
        out_data_d0 => Loop_Output_Row_proc_U0_out_data_d0);




    Loop_Output_Row_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Output_Row_proc_U0_ap_start <= ap_start;
    Loop_Output_Row_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Output_Row_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_Output_Row_proc_U0_ap_done;
    ap_idle <= Loop_Output_Row_proc_U0_ap_idle;
    ap_ready <= Loop_Output_Row_proc_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_Output_Row_proc_U0_ap_done;
    ap_sync_ready <= Loop_Output_Row_proc_U0_ap_ready;
    in_data_address0 <= Loop_Output_Row_proc_U0_in_data_address0;
    in_data_address1 <= ap_const_lv14_0;
    in_data_ce0 <= Loop_Output_Row_proc_U0_in_data_ce0;
    in_data_ce1 <= ap_const_logic_0;
    in_data_d0 <= ap_const_lv32_0;
    in_data_d1 <= ap_const_lv32_0;
    in_data_we0 <= ap_const_logic_0;
    in_data_we1 <= ap_const_logic_0;
    kernel_address0 <= Loop_Output_Row_proc_U0_kernel_address0;
    kernel_address1 <= ap_const_lv10_0;
    kernel_ce0 <= Loop_Output_Row_proc_U0_kernel_ce0;
    kernel_ce1 <= ap_const_logic_0;
    kernel_d0 <= ap_const_lv32_0;
    kernel_d1 <= ap_const_lv32_0;
    kernel_we0 <= ap_const_logic_0;
    kernel_we1 <= ap_const_logic_0;
    out_data_address0 <= Loop_Output_Row_proc_U0_out_data_address0;
    out_data_address1 <= ap_const_lv14_0;
    out_data_ce0 <= Loop_Output_Row_proc_U0_out_data_ce0;
    out_data_ce1 <= ap_const_logic_0;
    out_data_d0 <= Loop_Output_Row_proc_U0_out_data_d0;
    out_data_d1 <= ap_const_lv32_0;
    out_data_we0 <= Loop_Output_Row_proc_U0_out_data_we0;
    out_data_we1 <= ap_const_logic_0;
end behav;
