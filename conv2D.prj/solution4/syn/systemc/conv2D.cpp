// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv2D.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<14> conv2D::ap_const_lv14_0 = "00000000000000";
const sc_logic conv2D::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> conv2D::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<10> conv2D::ap_const_lv10_0 = "0000000000";
const sc_logic conv2D::ap_const_logic_1 = sc_dt::Log_1;

conv2D::conv2D(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Loop_Output_Row_proc_U0 = new Loop_Output_Row_proc("Loop_Output_Row_proc_U0");
    Loop_Output_Row_proc_U0->ap_clk(ap_clk);
    Loop_Output_Row_proc_U0->ap_rst(ap_rst);
    Loop_Output_Row_proc_U0->ap_start(Loop_Output_Row_proc_U0_ap_start);
    Loop_Output_Row_proc_U0->ap_done(Loop_Output_Row_proc_U0_ap_done);
    Loop_Output_Row_proc_U0->ap_continue(Loop_Output_Row_proc_U0_ap_continue);
    Loop_Output_Row_proc_U0->ap_idle(Loop_Output_Row_proc_U0_ap_idle);
    Loop_Output_Row_proc_U0->ap_ready(Loop_Output_Row_proc_U0_ap_ready);
    Loop_Output_Row_proc_U0->row_in(row_in);
    Loop_Output_Row_proc_U0->kernel_size_row(kernel_size_row);
    Loop_Output_Row_proc_U0->col_in(col_in);
    Loop_Output_Row_proc_U0->kernel_size_col(kernel_size_col);
    Loop_Output_Row_proc_U0->in_data_address0(Loop_Output_Row_proc_U0_in_data_address0);
    Loop_Output_Row_proc_U0->in_data_ce0(Loop_Output_Row_proc_U0_in_data_ce0);
    Loop_Output_Row_proc_U0->in_data_q0(in_data_q0);
    Loop_Output_Row_proc_U0->kernel_address0(Loop_Output_Row_proc_U0_kernel_address0);
    Loop_Output_Row_proc_U0->kernel_ce0(Loop_Output_Row_proc_U0_kernel_ce0);
    Loop_Output_Row_proc_U0->kernel_q0(kernel_q0);
    Loop_Output_Row_proc_U0->out_data_address0(Loop_Output_Row_proc_U0_out_data_address0);
    Loop_Output_Row_proc_U0->out_data_ce0(Loop_Output_Row_proc_U0_out_data_ce0);
    Loop_Output_Row_proc_U0->out_data_we0(Loop_Output_Row_proc_U0_out_data_we0);
    Loop_Output_Row_proc_U0->out_data_d0(Loop_Output_Row_proc_U0_out_data_d0);

    SC_METHOD(thread_Loop_Output_Row_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_Output_Row_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_Output_Row_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_Output_Row_proc_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_Output_Row_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_Output_Row_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_Output_Row_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_Output_Row_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_Output_Row_proc_U0_ap_ready );

    SC_METHOD(thread_in_data_address0);
    sensitive << ( Loop_Output_Row_proc_U0_in_data_address0 );

    SC_METHOD(thread_in_data_address1);

    SC_METHOD(thread_in_data_ce0);
    sensitive << ( Loop_Output_Row_proc_U0_in_data_ce0 );

    SC_METHOD(thread_in_data_ce1);

    SC_METHOD(thread_in_data_d0);

    SC_METHOD(thread_in_data_d1);

    SC_METHOD(thread_in_data_we0);

    SC_METHOD(thread_in_data_we1);

    SC_METHOD(thread_kernel_address0);
    sensitive << ( Loop_Output_Row_proc_U0_kernel_address0 );

    SC_METHOD(thread_kernel_address1);

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( Loop_Output_Row_proc_U0_kernel_ce0 );

    SC_METHOD(thread_kernel_ce1);

    SC_METHOD(thread_kernel_d0);

    SC_METHOD(thread_kernel_d1);

    SC_METHOD(thread_kernel_we0);

    SC_METHOD(thread_kernel_we1);

    SC_METHOD(thread_out_data_address0);
    sensitive << ( Loop_Output_Row_proc_U0_out_data_address0 );

    SC_METHOD(thread_out_data_address1);

    SC_METHOD(thread_out_data_ce0);
    sensitive << ( Loop_Output_Row_proc_U0_out_data_ce0 );

    SC_METHOD(thread_out_data_ce1);

    SC_METHOD(thread_out_data_d0);
    sensitive << ( Loop_Output_Row_proc_U0_out_data_d0 );

    SC_METHOD(thread_out_data_d1);

    SC_METHOD(thread_out_data_we0);
    sensitive << ( Loop_Output_Row_proc_U0_out_data_we0 );

    SC_METHOD(thread_out_data_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv2D_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_data_address0, "(port)in_data_address0");
    sc_trace(mVcdFile, in_data_ce0, "(port)in_data_ce0");
    sc_trace(mVcdFile, in_data_d0, "(port)in_data_d0");
    sc_trace(mVcdFile, in_data_q0, "(port)in_data_q0");
    sc_trace(mVcdFile, in_data_we0, "(port)in_data_we0");
    sc_trace(mVcdFile, in_data_address1, "(port)in_data_address1");
    sc_trace(mVcdFile, in_data_ce1, "(port)in_data_ce1");
    sc_trace(mVcdFile, in_data_d1, "(port)in_data_d1");
    sc_trace(mVcdFile, in_data_q1, "(port)in_data_q1");
    sc_trace(mVcdFile, in_data_we1, "(port)in_data_we1");
    sc_trace(mVcdFile, out_data_address0, "(port)out_data_address0");
    sc_trace(mVcdFile, out_data_ce0, "(port)out_data_ce0");
    sc_trace(mVcdFile, out_data_d0, "(port)out_data_d0");
    sc_trace(mVcdFile, out_data_q0, "(port)out_data_q0");
    sc_trace(mVcdFile, out_data_we0, "(port)out_data_we0");
    sc_trace(mVcdFile, out_data_address1, "(port)out_data_address1");
    sc_trace(mVcdFile, out_data_ce1, "(port)out_data_ce1");
    sc_trace(mVcdFile, out_data_d1, "(port)out_data_d1");
    sc_trace(mVcdFile, out_data_q1, "(port)out_data_q1");
    sc_trace(mVcdFile, out_data_we1, "(port)out_data_we1");
    sc_trace(mVcdFile, row_in, "(port)row_in");
    sc_trace(mVcdFile, col_in, "(port)col_in");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_d0, "(port)kernel_d0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, kernel_we0, "(port)kernel_we0");
    sc_trace(mVcdFile, kernel_address1, "(port)kernel_address1");
    sc_trace(mVcdFile, kernel_ce1, "(port)kernel_ce1");
    sc_trace(mVcdFile, kernel_d1, "(port)kernel_d1");
    sc_trace(mVcdFile, kernel_q1, "(port)kernel_q1");
    sc_trace(mVcdFile, kernel_we1, "(port)kernel_we1");
    sc_trace(mVcdFile, kernel_size_row, "(port)kernel_size_row");
    sc_trace(mVcdFile, kernel_size_col, "(port)kernel_size_col");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_ap_start, "Loop_Output_Row_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_ap_done, "Loop_Output_Row_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_ap_continue, "Loop_Output_Row_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_ap_idle, "Loop_Output_Row_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_ap_ready, "Loop_Output_Row_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_in_data_address0, "Loop_Output_Row_proc_U0_in_data_address0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_in_data_ce0, "Loop_Output_Row_proc_U0_in_data_ce0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_kernel_address0, "Loop_Output_Row_proc_U0_kernel_address0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_kernel_ce0, "Loop_Output_Row_proc_U0_kernel_ce0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_out_data_address0, "Loop_Output_Row_proc_U0_out_data_address0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_out_data_ce0, "Loop_Output_Row_proc_U0_out_data_ce0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_out_data_we0, "Loop_Output_Row_proc_U0_out_data_we0");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_out_data_d0, "Loop_Output_Row_proc_U0_out_data_d0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_start_full_n, "Loop_Output_Row_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_Output_Row_proc_U0_start_write, "Loop_Output_Row_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("conv2D.hdltvin.dat");
    mHdltvoutHandle.open("conv2D.hdltvout.dat");
}

conv2D::~conv2D() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Loop_Output_Row_proc_U0;
}

void conv2D::thread_Loop_Output_Row_proc_U0_ap_continue() {
    Loop_Output_Row_proc_U0_ap_continue = ap_const_logic_1;
}

void conv2D::thread_Loop_Output_Row_proc_U0_ap_start() {
    Loop_Output_Row_proc_U0_ap_start = ap_start.read();
}

void conv2D::thread_Loop_Output_Row_proc_U0_start_full_n() {
    Loop_Output_Row_proc_U0_start_full_n = ap_const_logic_1;
}

void conv2D::thread_Loop_Output_Row_proc_U0_start_write() {
    Loop_Output_Row_proc_U0_start_write = ap_const_logic_0;
}

void conv2D::thread_ap_done() {
    ap_done = Loop_Output_Row_proc_U0_ap_done.read();
}

void conv2D::thread_ap_idle() {
    ap_idle = Loop_Output_Row_proc_U0_ap_idle.read();
}

void conv2D::thread_ap_ready() {
    ap_ready = Loop_Output_Row_proc_U0_ap_ready.read();
}

void conv2D::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void conv2D::thread_ap_sync_done() {
    ap_sync_done = Loop_Output_Row_proc_U0_ap_done.read();
}

void conv2D::thread_ap_sync_ready() {
    ap_sync_ready = Loop_Output_Row_proc_U0_ap_ready.read();
}

void conv2D::thread_in_data_address0() {
    in_data_address0 = Loop_Output_Row_proc_U0_in_data_address0.read();
}

void conv2D::thread_in_data_address1() {
    in_data_address1 = ap_const_lv14_0;
}

void conv2D::thread_in_data_ce0() {
    in_data_ce0 = Loop_Output_Row_proc_U0_in_data_ce0.read();
}

void conv2D::thread_in_data_ce1() {
    in_data_ce1 = ap_const_logic_0;
}

void conv2D::thread_in_data_d0() {
    in_data_d0 = ap_const_lv32_0;
}

void conv2D::thread_in_data_d1() {
    in_data_d1 = ap_const_lv32_0;
}

void conv2D::thread_in_data_we0() {
    in_data_we0 = ap_const_logic_0;
}

void conv2D::thread_in_data_we1() {
    in_data_we1 = ap_const_logic_0;
}

void conv2D::thread_kernel_address0() {
    kernel_address0 = Loop_Output_Row_proc_U0_kernel_address0.read();
}

void conv2D::thread_kernel_address1() {
    kernel_address1 = ap_const_lv10_0;
}

void conv2D::thread_kernel_ce0() {
    kernel_ce0 = Loop_Output_Row_proc_U0_kernel_ce0.read();
}

void conv2D::thread_kernel_ce1() {
    kernel_ce1 = ap_const_logic_0;
}

void conv2D::thread_kernel_d0() {
    kernel_d0 = ap_const_lv32_0;
}

void conv2D::thread_kernel_d1() {
    kernel_d1 = ap_const_lv32_0;
}

void conv2D::thread_kernel_we0() {
    kernel_we0 = ap_const_logic_0;
}

void conv2D::thread_kernel_we1() {
    kernel_we1 = ap_const_logic_0;
}

void conv2D::thread_out_data_address0() {
    out_data_address0 = Loop_Output_Row_proc_U0_out_data_address0.read();
}

void conv2D::thread_out_data_address1() {
    out_data_address1 = ap_const_lv14_0;
}

void conv2D::thread_out_data_ce0() {
    out_data_ce0 = Loop_Output_Row_proc_U0_out_data_ce0.read();
}

void conv2D::thread_out_data_ce1() {
    out_data_ce1 = ap_const_logic_0;
}

void conv2D::thread_out_data_d0() {
    out_data_d0 = Loop_Output_Row_proc_U0_out_data_d0.read();
}

void conv2D::thread_out_data_d1() {
    out_data_d1 = ap_const_lv32_0;
}

void conv2D::thread_out_data_we0() {
    out_data_we0 = Loop_Output_Row_proc_U0_out_data_we0.read();
}

void conv2D::thread_out_data_we1() {
    out_data_we1 = ap_const_logic_0;
}

void conv2D::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"in_data_address0\" :  \"" << in_data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_ce0\" :  \"" << in_data_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_d0\" :  \"" << in_data_d0.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"in_data_q0\" :  \"" << in_data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_we0\" :  \"" << in_data_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_address1\" :  \"" << in_data_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_ce1\" :  \"" << in_data_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_d1\" :  \"" << in_data_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_q1\" :  \"" << in_data_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_data_we1\" :  \"" << in_data_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_address0\" :  \"" << out_data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_ce0\" :  \"" << out_data_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_d0\" :  \"" << out_data_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_data_q0\" :  \"" << out_data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_we0\" :  \"" << out_data_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_address1\" :  \"" << out_data_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_ce1\" :  \"" << out_data_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_d1\" :  \"" << out_data_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_data_q1\" :  \"" << out_data_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_we1\" :  \"" << out_data_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"row_in\" :  \"" << row_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"col_in\" :  \"" << col_in.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_address0\" :  \"" << kernel_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_ce0\" :  \"" << kernel_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_d0\" :  \"" << kernel_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_q0\" :  \"" << kernel_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_we0\" :  \"" << kernel_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_address1\" :  \"" << kernel_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_ce1\" :  \"" << kernel_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_d1\" :  \"" << kernel_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_q1\" :  \"" << kernel_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_we1\" :  \"" << kernel_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_size_row\" :  \"" << kernel_size_row.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_size_col\" :  \"" << kernel_size_col.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

