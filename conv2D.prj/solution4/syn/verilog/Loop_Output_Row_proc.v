// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Output_Row_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        row_in,
        kernel_size_row,
        col_in,
        kernel_size_col,
        in_data_address0,
        in_data_ce0,
        in_data_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        out_data_address0,
        out_data_ce0,
        out_data_we0,
        out_data_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] row_in;
input  [31:0] kernel_size_row;
input  [31:0] col_in;
input  [31:0] kernel_size_col;
output  [13:0] in_data_address0;
output   in_data_ce0;
input  [31:0] in_data_q0;
output  [9:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [13:0] out_data_address0;
output   out_data_ce0;
output   out_data_we0;
output  [31:0] out_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] in_data_address0;
reg in_data_ce0;
reg kernel_ce0;
reg out_data_ce0;
reg out_data_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [31:0] tmp_s_fu_323_p2;
reg   [31:0] tmp_s_reg_596;
wire   [31:0] tmp_17_fu_335_p2;
reg   [31:0] tmp_17_reg_601;
wire   [31:0] smax_cast_i_fu_359_p1;
reg   [31:0] smax_cast_i_reg_606;
wire   [14:0] tmp_23_fu_363_p1;
reg   [14:0] tmp_23_reg_611;
wire    ap_CS_fsm_state2;
wire   [37:0] next_mul4_fu_367_p2;
reg   [37:0] next_mul4_reg_616;
wire   [30:0] index_row_out_fu_382_p2;
reg   [30:0] index_row_out_reg_624;
wire   [30:0] ik_row_fu_397_p2;
reg   [30:0] ik_row_reg_632;
wire    ap_CS_fsm_state3;
wire   [31:0] i_buffer_fu_403_p2;
reg   [31:0] i_buffer_reg_637;
wire   [0:0] tmp_i_4_fu_392_p2;
wire  signed [14:0] tmp_24_fu_570_p2;
reg  signed [14:0] tmp_24_reg_642;
wire   [30:0] ik_col_fu_431_p2;
reg   [30:0] ik_col_reg_650;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_17_i_fu_426_p2;
wire   [31:0] tmp_19_i_fu_451_p2;
wire    ap_CS_fsm_state5;
wire   [30:0] index_col_out_1_fu_471_p2;
reg   [30:0] index_col_out_1_reg_668;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_32_fu_477_p1;
reg   [10:0] tmp_32_reg_673;
wire    ap_CS_fsm_state7;
wire   [37:0] next_mul2_fu_481_p2;
reg   [37:0] next_mul2_reg_678;
wire   [31:0] next_mul_fu_487_p2;
reg   [31:0] next_mul_reg_683;
wire   [30:0] ik_row_2_fu_501_p2;
reg   [30:0] ik_row_2_reg_691;
wire   [30:0] ik_col_2_fu_530_p2;
reg   [30:0] ik_col_2_reg_699;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_25_i_fu_525_p2;
wire   [31:0] buffer_q0;
reg  signed [31:0] buffer_load_reg_714;
wire    ap_CS_fsm_state9;
reg  signed [31:0] kernel_load_reg_719;
wire   [31:0] tmp_30_i_fu_561_p2;
reg   [31:0] tmp_30_i_reg_724;
wire    ap_CS_fsm_state10;
wire   [31:0] sum_1_fu_565_p2;
wire    ap_CS_fsm_state11;
reg   [4:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [31:0] buffer_d0;
wire    grp_updateBuffer_fu_303_ap_start;
wire    grp_updateBuffer_fu_303_ap_done;
wire    grp_updateBuffer_fu_303_ap_idle;
wire    grp_updateBuffer_fu_303_ap_ready;
wire   [4:0] grp_updateBuffer_fu_303_buffer_r_address0;
wire    grp_updateBuffer_fu_303_buffer_r_ce0;
wire    grp_updateBuffer_fu_303_buffer_r_we0;
wire   [31:0] grp_updateBuffer_fu_303_buffer_r_d0;
wire   [13:0] grp_updateBuffer_fu_303_in_data_address0;
wire    grp_updateBuffer_fu_303_in_data_ce0;
reg   [30:0] index_row_out_assign_reg_153;
wire   [0:0] tmp_21_fu_466_p2;
reg   [37:0] phi_mul3_reg_165;
reg   [31:0] i_buffer_i_reg_176;
wire   [0:0] tmp_18_fu_377_p2;
reg   [30:0] ik_row_i_reg_188;
reg  signed [31:0] i_buffer_1_i_reg_199;
reg   [30:0] ik_col_i_reg_210;
reg   [30:0] index_col_out_reg_221;
wire    ap_CS_fsm_state12;
reg   [31:0] sum_reg_233;
reg   [30:0] ik_row_i1_reg_246;
reg   [31:0] phi_mul_reg_257;
reg   [37:0] phi_mul1_reg_269;
reg   [31:0] sum_1_i_reg_280;
wire   [0:0] tmp_i3_fu_496_p2;
reg   [30:0] ik_col_i5_reg_292;
reg    grp_updateBuffer_fu_303_ap_start_reg;
wire  signed [63:0] tmp_26_cast_fu_446_p1;
wire  signed [63:0] tmp_20_i_fu_457_p1;
wire   [63:0] tmp_28_cast_fu_516_p1;
wire  signed [63:0] tmp_28_i_fu_542_p1;
wire   [63:0] tmp_29_cast_fu_556_p1;
wire   [31:0] tmp_fu_317_p2;
wire   [31:0] tmp_16_fu_329_p2;
wire   [0:0] tmp_i_fu_341_p2;
wire   [30:0] tmp_20_fu_347_p1;
wire   [30:0] smax_i_fu_351_p3;
wire   [31:0] index_row_out_cast_fu_373_p1;
wire   [31:0] ik_row_cast_i_fu_388_p1;
wire   [14:0] tmp_27_fu_412_p1;
wire   [14:0] tmp_25_fu_408_p1;
wire   [31:0] ik_col_cast_i_fu_422_p1;
wire   [14:0] tmp_31_fu_437_p1;
(* use_dsp48 = "no" *) wire   [14:0] tmp_26_fu_441_p2;
wire   [31:0] index_col_out_cast_fu_462_p1;
wire   [31:0] ik_row_cast_i2_fu_492_p1;
wire   [14:0] tmp_33_fu_507_p1;
wire   [14:0] tmp_28_fu_511_p2;
wire   [31:0] ik_col_cast_i6_fu_521_p1;
wire   [31:0] tmp_27_i_fu_536_p2;
wire   [10:0] tmp_34_fu_547_p1;
wire   [10:0] tmp_29_fu_551_p2;
wire   [7:0] tmp_24_fu_570_p0;
wire  signed [14:0] tmp_24_fu_570_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 grp_updateBuffer_fu_303_ap_start_reg = 1'b0;
end

Loop_Output_Row_pcud #(
    .DataWidth( 32 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .q0(buffer_q0)
);

updateBuffer grp_updateBuffer_fu_303(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_updateBuffer_fu_303_ap_start),
    .ap_done(grp_updateBuffer_fu_303_ap_done),
    .ap_idle(grp_updateBuffer_fu_303_ap_idle),
    .ap_ready(grp_updateBuffer_fu_303_ap_ready),
    .buffer_r_address0(grp_updateBuffer_fu_303_buffer_r_address0),
    .buffer_r_ce0(grp_updateBuffer_fu_303_buffer_r_ce0),
    .buffer_r_we0(grp_updateBuffer_fu_303_buffer_r_we0),
    .buffer_r_d0(grp_updateBuffer_fu_303_buffer_r_d0),
    .buffer_r_q0(buffer_q0),
    .in_data_address0(grp_updateBuffer_fu_303_in_data_address0),
    .in_data_ce0(grp_updateBuffer_fu_303_in_data_ce0),
    .in_data_q0(in_data_q0),
    .index_row_out(index_row_out_assign_reg_153),
    .index_col_out(index_col_out_reg_221),
    .kernel_size_row(kernel_size_row),
    .kernel_size_col(kernel_size_col),
    .col_in(col_in)
);

conv2D_mul_mul_8ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
conv2D_mul_mul_8ndEe_U10(
    .din0(tmp_24_fu_570_p0),
    .din1(tmp_24_fu_570_p1),
    .dout(tmp_24_fu_570_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_18_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_updateBuffer_fu_303_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_i3_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_updateBuffer_fu_303_ap_start_reg <= 1'b1;
        end else if ((grp_updateBuffer_fu_303_ap_ready == 1'b1)) begin
            grp_updateBuffer_fu_303_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_buffer_1_i_reg_199 <= tmp_19_i_fu_451_p2;
    end else if (((tmp_i_4_fu_392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_buffer_1_i_reg_199 <= i_buffer_i_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_17_i_fu_426_p2 == 1'd0))) begin
        i_buffer_i_reg_176 <= i_buffer_reg_637;
    end else if (((tmp_18_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_buffer_i_reg_176 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ik_col_i5_reg_292 <= ik_col_2_reg_699;
    end else if (((tmp_i3_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ik_col_i5_reg_292 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ik_col_i_reg_210 <= ik_col_reg_650;
    end else if (((tmp_i_4_fu_392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ik_col_i_reg_210 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_25_i_fu_525_p2 == 1'd0))) begin
        ik_row_i1_reg_246 <= ik_row_2_reg_691;
    end else if (((tmp_21_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ik_row_i1_reg_246 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_17_i_fu_426_p2 == 1'd0))) begin
        ik_row_i_reg_188 <= ik_row_reg_632;
    end else if (((tmp_18_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ik_row_i_reg_188 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_4_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        index_col_out_reg_221 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (grp_updateBuffer_fu_303_ap_done == 1'b1))) begin
        index_col_out_reg_221 <= index_col_out_1_reg_668;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_21_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        index_row_out_assign_reg_153 <= index_row_out_reg_624;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_row_out_assign_reg_153 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_25_i_fu_525_p2 == 1'd0))) begin
        phi_mul1_reg_269 <= next_mul2_reg_678;
    end else if (((tmp_21_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul1_reg_269 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_21_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul3_reg_165 <= next_mul4_reg_616;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul3_reg_165 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_25_i_fu_525_p2 == 1'd0))) begin
        phi_mul_reg_257 <= next_mul_reg_683;
    end else if (((tmp_21_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_257 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_1_i_reg_280 <= sum_1_fu_565_p2;
    end else if (((tmp_i3_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_1_i_reg_280 <= sum_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_25_i_fu_525_p2 == 1'd0))) begin
        sum_reg_233 <= sum_1_i_reg_280;
    end else if (((tmp_21_fu_466_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_reg_233 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_load_reg_714 <= buffer_q0;
        kernel_load_reg_719 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_4_fu_392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_buffer_reg_637 <= i_buffer_fu_403_p2;
        tmp_24_reg_642 <= tmp_24_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ik_col_2_reg_699 <= ik_col_2_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ik_col_reg_650 <= ik_col_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ik_row_2_reg_691 <= ik_row_2_fu_501_p2;
        next_mul2_reg_678 <= next_mul2_fu_481_p2;
        next_mul_reg_683 <= next_mul_fu_487_p2;
        tmp_32_reg_673 <= tmp_32_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ik_row_reg_632 <= ik_row_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        index_col_out_1_reg_668 <= index_col_out_1_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        index_row_out_reg_624 <= index_row_out_fu_382_p2;
        next_mul4_reg_616 <= next_mul4_fu_367_p2;
        tmp_23_reg_611 <= tmp_23_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        smax_cast_i_reg_606[30 : 0] <= smax_cast_i_fu_359_p1[30 : 0];
        tmp_17_reg_601 <= tmp_17_fu_335_p2;
        tmp_s_reg_596 <= tmp_s_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_30_i_reg_724 <= tmp_30_i_fu_561_p2;
    end
end

always @ (*) begin
    if (((tmp_18_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_18_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_address0 = tmp_28_i_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = tmp_20_i_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_address0 = grp_updateBuffer_fu_303_buffer_r_address0;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_ce0 = grp_updateBuffer_fu_303_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_d0 = in_data_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_d0 = grp_updateBuffer_fu_303_buffer_r_d0;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_we0 = grp_updateBuffer_fu_303_buffer_r_we0;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_data_address0 = tmp_26_cast_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        in_data_address0 = grp_updateBuffer_fu_303_in_data_address0;
    end else begin
        in_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        in_data_ce0 = grp_updateBuffer_fu_303_in_data_ce0;
    end else begin
        in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_data_ce0 = 1'b1;
    end else begin
        out_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i3_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        out_data_we0 = 1'b1;
    end else begin
        out_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_18_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_i_4_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_17_i_fu_426_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_21_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_i3_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_25_i_fu_525_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_updateBuffer_fu_303_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_updateBuffer_fu_303_ap_start = grp_updateBuffer_fu_303_ap_start_reg;

assign i_buffer_fu_403_p2 = (i_buffer_i_reg_176 + smax_cast_i_reg_606);

assign ik_col_2_fu_530_p2 = (ik_col_i5_reg_292 + 31'd1);

assign ik_col_cast_i6_fu_521_p1 = ik_col_i5_reg_292;

assign ik_col_cast_i_fu_422_p1 = ik_col_i_reg_210;

assign ik_col_fu_431_p2 = (ik_col_i_reg_210 + 31'd1);

assign ik_row_2_fu_501_p2 = (31'd1 + ik_row_i1_reg_246);

assign ik_row_cast_i2_fu_492_p1 = ik_row_i1_reg_246;

assign ik_row_cast_i_fu_388_p1 = ik_row_i_reg_188;

assign ik_row_fu_397_p2 = (ik_row_i_reg_188 + 31'd1);

assign index_col_out_1_fu_471_p2 = (index_col_out_reg_221 + 31'd1);

assign index_col_out_cast_fu_462_p1 = index_col_out_reg_221;

assign index_row_out_cast_fu_373_p1 = index_row_out_assign_reg_153;

assign index_row_out_fu_382_p2 = (31'd1 + index_row_out_assign_reg_153);

assign kernel_address0 = tmp_29_cast_fu_556_p1;

assign next_mul2_fu_481_p2 = (38'd100 + phi_mul1_reg_269);

assign next_mul4_fu_367_p2 = (38'd100 + phi_mul3_reg_165);

assign next_mul_fu_487_p2 = (phi_mul_reg_257 + kernel_size_col);

assign out_data_address0 = tmp_28_cast_fu_516_p1;

assign out_data_d0 = sum_reg_233;

assign smax_cast_i_fu_359_p1 = smax_i_fu_351_p3;

assign smax_i_fu_351_p3 = ((tmp_i_fu_341_p2[0:0] === 1'b1) ? tmp_20_fu_347_p1 : 31'd0);

assign sum_1_fu_565_p2 = (sum_1_i_reg_280 + tmp_30_i_reg_724);

assign tmp_16_fu_329_p2 = (32'd1 + col_in);

assign tmp_17_fu_335_p2 = (tmp_16_fu_329_p2 - kernel_size_col);

assign tmp_17_i_fu_426_p2 = (($signed(ik_col_cast_i_fu_422_p1) < $signed(kernel_size_col)) ? 1'b1 : 1'b0);

assign tmp_18_fu_377_p2 = (($signed(index_row_out_cast_fu_373_p1) < $signed(tmp_s_reg_596)) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_451_p2 = ($signed(32'd1) + $signed(i_buffer_1_i_reg_199));

assign tmp_20_fu_347_p1 = kernel_size_col[30:0];

assign tmp_20_i_fu_457_p1 = i_buffer_1_i_reg_199;

assign tmp_21_fu_466_p2 = (($signed(index_col_out_cast_fu_462_p1) < $signed(tmp_17_reg_601)) ? 1'b1 : 1'b0);

assign tmp_23_fu_363_p1 = phi_mul3_reg_165[14:0];

assign tmp_24_fu_570_p0 = 15'd100;

assign tmp_24_fu_570_p1 = (tmp_27_fu_412_p1 + tmp_25_fu_408_p1);

assign tmp_25_fu_408_p1 = index_row_out_assign_reg_153[14:0];

assign tmp_25_i_fu_525_p2 = (($signed(ik_col_cast_i6_fu_521_p1) < $signed(kernel_size_col)) ? 1'b1 : 1'b0);

assign tmp_26_cast_fu_446_p1 = $signed(tmp_26_fu_441_p2);

assign tmp_26_fu_441_p2 = ($signed(tmp_24_reg_642) + $signed(tmp_31_fu_437_p1));

assign tmp_27_fu_412_p1 = ik_row_i_reg_188[14:0];

assign tmp_27_i_fu_536_p2 = (ik_col_cast_i6_fu_521_p1 + phi_mul_reg_257);

assign tmp_28_cast_fu_516_p1 = tmp_28_fu_511_p2;

assign tmp_28_fu_511_p2 = (tmp_23_reg_611 + tmp_33_fu_507_p1);

assign tmp_28_i_fu_542_p1 = $signed(tmp_27_i_fu_536_p2);

assign tmp_29_cast_fu_556_p1 = tmp_29_fu_551_p2;

assign tmp_29_fu_551_p2 = (tmp_32_reg_673 + tmp_34_fu_547_p1);

assign tmp_30_i_fu_561_p2 = ($signed(kernel_load_reg_719) * $signed(buffer_load_reg_714));

assign tmp_31_fu_437_p1 = ik_col_i_reg_210[14:0];

assign tmp_32_fu_477_p1 = phi_mul1_reg_269[10:0];

assign tmp_33_fu_507_p1 = index_col_out_reg_221[14:0];

assign tmp_34_fu_547_p1 = ik_col_i5_reg_292[10:0];

assign tmp_fu_317_p2 = (32'd1 + row_in);

assign tmp_i3_fu_496_p2 = (($signed(ik_row_cast_i2_fu_492_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

assign tmp_i_4_fu_392_p2 = (($signed(ik_row_cast_i_fu_388_p1) < $signed(kernel_size_row)) ? 1'b1 : 1'b0);

assign tmp_i_fu_341_p2 = (($signed(kernel_size_col) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_323_p2 = (tmp_fu_317_p2 - kernel_size_row);

always @ (posedge ap_clk) begin
    smax_cast_i_reg_606[31] <= 1'b0;
end

endmodule //Loop_Output_Row_proc
