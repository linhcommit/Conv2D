-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=4791,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1362,HLS_SYN_LUT=1636,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_i_cast_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_i_cast_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_365_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_613 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul4_fu_369_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul4_reg_618 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_row_out_fu_384_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_reg_626 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_fu_399_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_reg_634 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_buffer_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_buffer_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_4_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_572_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_reg_644 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_reg_652 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_17_i_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal index_col_out_1_fu_473_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_1_reg_670 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_32_fu_479_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_reg_675 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul2_fu_483_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul2_reg_680 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_2_fu_503_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_row_2_reg_693 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_2_fu_532_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_2_reg_701 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_28_i_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_load_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal kernel_load_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sum_1_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_305_ap_start : STD_LOGIC;
    signal grp_updateBuffer_fu_305_ap_done : STD_LOGIC;
    signal grp_updateBuffer_fu_305_ap_idle : STD_LOGIC;
    signal grp_updateBuffer_fu_305_ap_ready : STD_LOGIC;
    signal grp_updateBuffer_fu_305_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_updateBuffer_fu_305_buffer_r_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_305_buffer_r_we0 : STD_LOGIC;
    signal grp_updateBuffer_fu_305_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_305_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateBuffer_fu_305_in_data_ce0 : STD_LOGIC;
    signal index_row_out_assign_reg_155 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul3_reg_167 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_buffer_i_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_row_i_reg_190 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_1_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_i_reg_212 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_reg_223 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_i5_reg_248 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_271 : STD_LOGIC_VECTOR (37 downto 0);
    signal sum_1_i_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_col_i8_reg_294 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_updateBuffer_fu_305_ap_start_reg : STD_LOGIC := '0';
    signal tmp_26_cast_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_i_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_349_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_i_fu_353_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_assign_1_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_i_cast_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_414_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_410_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_i_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_439_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_443_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_26_fu_443_p2 : signal is "no";
    signal index_col_out_cast_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_i5_cast_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_509_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_513_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ik_col_i8_cast_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_549_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_553_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_572_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_572_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component updateBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        index_col_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_mul_mul_8ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component conv2D_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component conv2D_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0);

    grp_updateBuffer_fu_305 : component updateBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateBuffer_fu_305_ap_start,
        ap_done => grp_updateBuffer_fu_305_ap_done,
        ap_idle => grp_updateBuffer_fu_305_ap_idle,
        ap_ready => grp_updateBuffer_fu_305_ap_ready,
        buffer_r_address0 => grp_updateBuffer_fu_305_buffer_r_address0,
        buffer_r_ce0 => grp_updateBuffer_fu_305_buffer_r_ce0,
        buffer_r_we0 => grp_updateBuffer_fu_305_buffer_r_we0,
        buffer_r_d0 => grp_updateBuffer_fu_305_buffer_r_d0,
        buffer_r_q0 => buffer_q0,
        in_data_address0 => grp_updateBuffer_fu_305_in_data_address0,
        in_data_ce0 => grp_updateBuffer_fu_305_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_assign_reg_155,
        index_col_out => index_col_out_reg_223,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        col_in => col_in);

    conv2D_mul_mul_8ncud_U10 : component conv2D_mul_mul_8ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => tmp_24_fu_572_p0,
        din1 => tmp_24_fu_572_p1,
        dout => tmp_24_fu_572_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_updateBuffer_fu_305_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateBuffer_fu_305_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i6_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_updateBuffer_fu_305_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateBuffer_fu_305_ap_ready = ap_const_logic_1)) then 
                    grp_updateBuffer_fu_305_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_buffer_1_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_buffer_1_i_reg_201 <= tmp_19_i_fu_453_p2;
            elsif (((tmp_i_4_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_buffer_1_i_reg_201 <= i_buffer_i_reg_178;
            end if; 
        end if;
    end process;

    i_buffer_i_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_428_p2 = ap_const_lv1_0))) then 
                i_buffer_i_reg_178 <= i_buffer_reg_639;
            elsif (((tmp_18_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_buffer_i_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_col_i8_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ik_col_i8_reg_294 <= ik_col_2_reg_701;
            elsif (((tmp_i6_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                ik_col_i8_reg_294 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_col_i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ik_col_i_reg_212 <= ik_col_reg_652;
            elsif (((tmp_i_4_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ik_col_i_reg_212 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_i5_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_28_i_fu_527_p2 = ap_const_lv1_0))) then 
                ik_row_i5_reg_248 <= ik_row_2_reg_693;
            elsif (((tmp_21_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ik_row_i5_reg_248 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_428_p2 = ap_const_lv1_0))) then 
                ik_row_i_reg_190 <= ik_row_reg_634;
            elsif (((tmp_18_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ik_row_i_reg_190 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_col_out_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_4_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_col_out_reg_223 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_updateBuffer_fu_305_ap_done = ap_const_logic_1))) then 
                index_col_out_reg_223 <= index_col_out_1_reg_670;
            end if; 
        end if;
    end process;

    index_row_out_assign_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                index_row_out_assign_reg_155 <= index_row_out_reg_626;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_row_out_assign_reg_155 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_28_i_fu_527_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_271 <= next_mul2_reg_680;
            elsif (((tmp_21_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul1_reg_271 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul3_reg_167 <= next_mul4_reg_618;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul3_reg_167 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_28_i_fu_527_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_259 <= next_mul_reg_685;
            elsif (((tmp_21_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_259 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_1_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum_1_i_reg_282 <= sum_1_fu_567_p2;
            elsif (((tmp_i6_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_1_i_reg_282 <= sum_reg_235;
            end if; 
        end if;
    end process;

    sum_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_28_i_fu_527_p2 = ap_const_lv1_0))) then 
                sum_reg_235 <= sum_1_i_reg_282;
            elsif (((tmp_21_fu_468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_reg_235 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                buffer_load_reg_716 <= buffer_q0;
                kernel_load_reg_721 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_4_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_buffer_reg_639 <= i_buffer_fu_405_p2;
                tmp_24_reg_644 <= tmp_24_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ik_col_2_reg_701 <= ik_col_2_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ik_col_reg_652 <= ik_col_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ik_row_2_reg_693 <= ik_row_2_fu_503_p2;
                next_mul2_reg_680 <= next_mul2_fu_483_p2;
                next_mul_reg_685 <= next_mul_fu_489_p2;
                tmp_32_reg_675 <= tmp_32_fu_479_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ik_row_reg_634 <= ik_row_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                index_col_out_1_reg_670 <= index_col_out_1_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_row_out_reg_626 <= index_row_out_fu_384_p2;
                next_mul4_reg_618 <= next_mul4_fu_369_p2;
                tmp_23_reg_613 <= tmp_23_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    smax_i_cast_reg_608(30 downto 0) <= smax_i_cast_fu_361_p1(30 downto 0);
                tmp_17_reg_603 <= tmp_17_fu_337_p2;
                tmp_s_reg_598 <= tmp_s_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_32_i_reg_726 <= tmp_32_i_fu_563_p2;
            end if;
        end if;
    end process;
    smax_i_cast_reg_608(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_i_4_fu_394_p2, ap_CS_fsm_state4, tmp_17_i_fu_428_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_28_i_fu_527_p2, grp_updateBuffer_fu_305_ap_done, tmp_21_fu_468_p2, tmp_18_fu_379_p2, ap_CS_fsm_state12, tmp_i6_fu_498_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_18_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_4_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_17_i_fu_428_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((tmp_21_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_i6_fu_498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_28_i_fu_527_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_updateBuffer_fu_305_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_18_fu_379_p2)
    begin
        if (((tmp_18_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_18_fu_379_p2)
    begin
        if (((tmp_18_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_updateBuffer_fu_305_buffer_r_address0, ap_CS_fsm_state12, tmp_20_i_fu_459_p1, tmp_30_i_fu_544_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_address0 <= tmp_30_i_fu_544_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= tmp_20_i_fu_459_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_address0 <= grp_updateBuffer_fu_305_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_updateBuffer_fu_305_buffer_r_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_ce0 <= grp_updateBuffer_fu_305_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(in_data_q0, ap_CS_fsm_state5, grp_updateBuffer_fu_305_buffer_r_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_d0 <= in_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_d0 <= grp_updateBuffer_fu_305_buffer_r_d0;
        else 
            buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state5, grp_updateBuffer_fu_305_buffer_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_we0 <= grp_updateBuffer_fu_305_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_updateBuffer_fu_305_ap_start <= grp_updateBuffer_fu_305_ap_start_reg;
    i_buffer_fu_405_p2 <= std_logic_vector(unsigned(i_buffer_i_reg_178) + unsigned(smax_i_cast_reg_608));
    ik_col_2_fu_532_p2 <= std_logic_vector(unsigned(ik_col_i8_reg_294) + unsigned(ap_const_lv31_1));
    ik_col_fu_433_p2 <= std_logic_vector(unsigned(ik_col_i_reg_212) + unsigned(ap_const_lv31_1));
    ik_col_i8_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_i8_reg_294),32));
    ik_col_i_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_i_reg_212),32));
    ik_row_2_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ik_row_i5_reg_248));
    ik_row_fu_399_p2 <= std_logic_vector(unsigned(ik_row_i_reg_190) + unsigned(ap_const_lv31_1));
    ik_row_i5_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_i5_reg_248),32));
    ik_row_i_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_row_i_reg_190),32));

    in_data_address0_assign_proc : process(ap_CS_fsm_state4, grp_updateBuffer_fu_305_in_data_address0, ap_CS_fsm_state12, tmp_26_cast_fu_448_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_address0 <= tmp_26_cast_fu_448_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_data_address0 <= grp_updateBuffer_fu_305_in_data_address0;
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(ap_CS_fsm_state4, grp_updateBuffer_fu_305_in_data_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_data_ce0 <= grp_updateBuffer_fu_305_in_data_ce0;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_1_fu_473_p2 <= std_logic_vector(unsigned(index_col_out_reg_223) + unsigned(ap_const_lv31_1));
    index_col_out_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_col_out_reg_223),32));
    index_row_out_assign_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_row_out_assign_reg_155),32));
    index_row_out_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(index_row_out_assign_reg_155));
    kernel_address0 <= tmp_29_cast_fu_558_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul1_reg_271));
    next_mul4_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul3_reg_167));
    next_mul_fu_489_p2 <= std_logic_vector(unsigned(phi_mul_reg_259) + unsigned(kernel_size_col));
    out_data_address0 <= tmp_28_cast_fu_518_p1(14 - 1 downto 0);

    out_data_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= sum_reg_235;

    out_data_we0_assign_proc : process(ap_CS_fsm_state7, tmp_i6_fu_498_p2)
    begin
        if (((tmp_i6_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    smax_i_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_i_fu_353_p3),32));
    smax_i_fu_353_p3 <= 
        tmp_20_fu_349_p1 when (tmp_i_fu_343_p2(0) = '1') else 
        ap_const_lv31_0;
    sum_1_fu_567_p2 <= std_logic_vector(unsigned(sum_1_i_reg_282) + unsigned(tmp_32_i_reg_726));
    tmp_16_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(col_in));
    tmp_17_fu_337_p2 <= std_logic_vector(unsigned(tmp_16_fu_331_p2) - unsigned(kernel_size_col));
    tmp_17_i_fu_428_p2 <= "1" when (signed(ik_col_i_cast_fu_424_p1) < signed(kernel_size_col)) else "0";
    tmp_18_fu_379_p2 <= "1" when (signed(index_row_out_assign_1_fu_375_p1) < signed(tmp_s_reg_598)) else "0";
    tmp_19_i_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_buffer_1_i_reg_201));
    tmp_20_fu_349_p1 <= kernel_size_col(31 - 1 downto 0);
        tmp_20_i_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_buffer_1_i_reg_201),64));

    tmp_21_fu_468_p2 <= "1" when (signed(index_col_out_cast_fu_464_p1) < signed(tmp_17_reg_603)) else "0";
    tmp_23_fu_365_p1 <= phi_mul3_reg_167(15 - 1 downto 0);
    tmp_24_fu_572_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    tmp_24_fu_572_p1 <= std_logic_vector(unsigned(tmp_27_fu_414_p1) + unsigned(tmp_25_fu_410_p1));
    tmp_25_fu_410_p1 <= ik_row_i_reg_190(15 - 1 downto 0);
        tmp_26_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_443_p2),64));

    tmp_26_fu_443_p2 <= std_logic_vector(signed(tmp_24_reg_644) + signed(tmp_31_fu_439_p1));
    tmp_27_fu_414_p1 <= index_row_out_assign_reg_155(15 - 1 downto 0);
    tmp_28_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_513_p2),64));
    tmp_28_fu_513_p2 <= std_logic_vector(unsigned(tmp_23_reg_613) + unsigned(tmp_33_fu_509_p1));
    tmp_28_i_fu_527_p2 <= "1" when (signed(ik_col_i8_cast_fu_523_p1) < signed(kernel_size_col)) else "0";
    tmp_29_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_553_p2),64));
    tmp_29_fu_553_p2 <= std_logic_vector(unsigned(tmp_32_reg_675) + unsigned(tmp_34_fu_549_p1));
    tmp_29_i_fu_538_p2 <= std_logic_vector(unsigned(ik_col_i8_cast_fu_523_p1) + unsigned(phi_mul_reg_259));
        tmp_30_i_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_i_fu_538_p2),64));

    tmp_31_fu_439_p1 <= ik_col_i_reg_212(15 - 1 downto 0);
    tmp_32_fu_479_p1 <= phi_mul1_reg_271(11 - 1 downto 0);
    tmp_32_i_fu_563_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_721) * signed(buffer_load_reg_716))), 32));
    tmp_33_fu_509_p1 <= index_col_out_reg_223(15 - 1 downto 0);
    tmp_34_fu_549_p1 <= ik_col_i8_reg_294(11 - 1 downto 0);
    tmp_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(row_in));
    tmp_i6_fu_498_p2 <= "1" when (signed(ik_row_i5_cast_fu_494_p1) < signed(kernel_size_row)) else "0";
    tmp_i_4_fu_394_p2 <= "1" when (signed(ik_row_i_cast_fu_390_p1) < signed(kernel_size_row)) else "0";
    tmp_i_fu_343_p2 <= "1" when (signed(kernel_size_col) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_325_p2 <= std_logic_vector(unsigned(tmp_fu_319_p2) - unsigned(kernel_size_row));
end behav;
