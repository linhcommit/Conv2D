-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_data_ce0 : OUT STD_LOGIC;
    out_data_we0 : OUT STD_LOGIC;
    out_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    row_in : IN STD_LOGIC_VECTOR (31 downto 0);
    col_in : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=2606,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=6998,HLS_SYN_LUT=9891,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_261 : STD_LOGIC_VECTOR (63 downto 0);
    signal ik_row_i_reg_272 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_1_i_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_i_reg_296 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_21_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1543 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_679_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_reg_1548 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound_fu_691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1553 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_697_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_reg_1558 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_fu_701_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_reg_1563 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_row_out_1_fu_716_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_row_out_1_reg_1571 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_23_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal index_col_out_1_fu_956_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_col_out_1_reg_1580 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1585_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1585_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1585_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_976_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_27_i_mid2_v_fu_996_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_27_i_mid2_v_reg_1594 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_1004_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_reg_1599 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_1008_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_reg_1604 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_1012_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_reg_1609 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_fu_1016_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_reg_1614 : STD_LOGIC_VECTOR (10 downto 0);
    signal ik_col_fu_1020_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1340_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_t_i_reg_1624 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_28_fu_1030_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_updateBuffer_fu_307_ap_start : STD_LOGIC;
    signal grp_updateBuffer_fu_307_ap_done : STD_LOGIC;
    signal grp_updateBuffer_fu_307_ap_idle : STD_LOGIC;
    signal grp_updateBuffer_fu_307_ap_ready : STD_LOGIC;
    signal grp_updateBuffer_fu_307_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_updateBuffer_fu_307_in_data_ce0 : STD_LOGIC;
    signal grp_updateBuffer_fu_307_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateBuffer_fu_307_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_start : STD_LOGIC;
    signal grp_initializeBuffer_fu_345_ap_done : STD_LOGIC;
    signal grp_initializeBuffer_fu_345_ap_idle : STD_LOGIC;
    signal grp_initializeBuffer_fu_345_ap_ready : STD_LOGIC;
    signal grp_initializeBuffer_fu_345_in_data_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_initializeBuffer_fu_345_in_data_ce0 : STD_LOGIC;
    signal grp_initializeBuffer_fu_345_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeBuffer_fu_345_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_row_out_reg_226 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_238 : STD_LOGIC_VECTOR (37 downto 0);
    signal index_col_out_reg_249 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_ik_row_i_phi_fu_276_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_updateBuffer_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal grp_initializeBuffer_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal tmp_31_cast_fu_1026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_2_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_3_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_4_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_5_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_6_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_7_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_8_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_9_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_10_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_11_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_12_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_13_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_14_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_15_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_16_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_17_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_18_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_19_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_20_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_21_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_22_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_23_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_24_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_691_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_row_out_cast_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_col_out_cast_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_i_cast_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ik_row_fu_982_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_i_mid2_fu_988_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1333_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_1094_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_1098_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1333_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_691_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_691_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component updateBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_18_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_19_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_20_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_21_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_22_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_23_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_24_read : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        index_col_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        col_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component initializeBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_18_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_19_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_20_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_21_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_22_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_23_read : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_24_read : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_data_ce0 : OUT STD_LOGIC;
        in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
        kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_mux_255_32cud_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2D_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component conv2D_mac_muladdg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_updateBuffer_fu_307 : component updateBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateBuffer_fu_307_ap_start,
        ap_done => grp_updateBuffer_fu_307_ap_done,
        ap_idle => grp_updateBuffer_fu_307_ap_idle,
        ap_ready => grp_updateBuffer_fu_307_ap_ready,
        buffer_0_read => reg_505,
        buffer_1_read => reg_511,
        buffer_2_read => reg_517,
        buffer_3_read => reg_523,
        buffer_4_read => reg_529,
        buffer_5_read => reg_535,
        buffer_6_read => reg_541,
        buffer_7_read => reg_547,
        buffer_8_read => reg_553,
        buffer_9_read => reg_559,
        buffer_10_read => reg_565,
        buffer_11_read => reg_571,
        buffer_12_read => reg_577,
        buffer_13_read => reg_583,
        buffer_14_read => reg_589,
        buffer_15_read => reg_595,
        buffer_16_read => reg_601,
        buffer_17_read => reg_607,
        buffer_18_read => reg_613,
        buffer_19_read => reg_619,
        buffer_20_read => reg_625,
        buffer_21_read => reg_631,
        buffer_22_read => reg_637,
        buffer_23_read => reg_643,
        buffer_24_read => reg_649,
        in_data_address0 => grp_updateBuffer_fu_307_in_data_address0,
        in_data_ce0 => grp_updateBuffer_fu_307_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_226,
        index_col_out => index_col_out_reg_249,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        col_in => col_in,
        ap_return_0 => grp_updateBuffer_fu_307_ap_return_0,
        ap_return_1 => grp_updateBuffer_fu_307_ap_return_1,
        ap_return_2 => grp_updateBuffer_fu_307_ap_return_2,
        ap_return_3 => grp_updateBuffer_fu_307_ap_return_3,
        ap_return_4 => grp_updateBuffer_fu_307_ap_return_4,
        ap_return_5 => grp_updateBuffer_fu_307_ap_return_5,
        ap_return_6 => grp_updateBuffer_fu_307_ap_return_6,
        ap_return_7 => grp_updateBuffer_fu_307_ap_return_7,
        ap_return_8 => grp_updateBuffer_fu_307_ap_return_8,
        ap_return_9 => grp_updateBuffer_fu_307_ap_return_9,
        ap_return_10 => grp_updateBuffer_fu_307_ap_return_10,
        ap_return_11 => grp_updateBuffer_fu_307_ap_return_11,
        ap_return_12 => grp_updateBuffer_fu_307_ap_return_12,
        ap_return_13 => grp_updateBuffer_fu_307_ap_return_13,
        ap_return_14 => grp_updateBuffer_fu_307_ap_return_14,
        ap_return_15 => grp_updateBuffer_fu_307_ap_return_15,
        ap_return_16 => grp_updateBuffer_fu_307_ap_return_16,
        ap_return_17 => grp_updateBuffer_fu_307_ap_return_17,
        ap_return_18 => grp_updateBuffer_fu_307_ap_return_18,
        ap_return_19 => grp_updateBuffer_fu_307_ap_return_19,
        ap_return_20 => grp_updateBuffer_fu_307_ap_return_20,
        ap_return_21 => grp_updateBuffer_fu_307_ap_return_21,
        ap_return_22 => grp_updateBuffer_fu_307_ap_return_22,
        ap_return_23 => grp_updateBuffer_fu_307_ap_return_23,
        ap_return_24 => grp_updateBuffer_fu_307_ap_return_24);

    grp_initializeBuffer_fu_345 : component initializeBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initializeBuffer_fu_345_ap_start,
        ap_done => grp_initializeBuffer_fu_345_ap_done,
        ap_idle => grp_initializeBuffer_fu_345_ap_idle,
        ap_ready => grp_initializeBuffer_fu_345_ap_ready,
        buffer_0_read => reg_505,
        buffer_1_read => reg_511,
        buffer_2_read => reg_517,
        buffer_3_read => reg_523,
        buffer_4_read => reg_529,
        buffer_5_read => reg_535,
        buffer_6_read => reg_541,
        buffer_7_read => reg_547,
        buffer_8_read => reg_553,
        buffer_9_read => reg_559,
        buffer_10_read => reg_565,
        buffer_11_read => reg_571,
        buffer_12_read => reg_577,
        buffer_13_read => reg_583,
        buffer_14_read => reg_589,
        buffer_15_read => reg_595,
        buffer_16_read => reg_601,
        buffer_17_read => reg_607,
        buffer_18_read => reg_613,
        buffer_19_read => reg_619,
        buffer_20_read => reg_625,
        buffer_21_read => reg_631,
        buffer_22_read => reg_637,
        buffer_23_read => reg_643,
        buffer_24_read => reg_649,
        in_data_address0 => grp_initializeBuffer_fu_345_in_data_address0,
        in_data_ce0 => grp_initializeBuffer_fu_345_in_data_ce0,
        in_data_q0 => in_data_q0,
        index_row_out => index_row_out_reg_226,
        kernel_size_row => kernel_size_row,
        kernel_size_col => kernel_size_col,
        ap_return_0 => grp_initializeBuffer_fu_345_ap_return_0,
        ap_return_1 => grp_initializeBuffer_fu_345_ap_return_1,
        ap_return_2 => grp_initializeBuffer_fu_345_ap_return_2,
        ap_return_3 => grp_initializeBuffer_fu_345_ap_return_3,
        ap_return_4 => grp_initializeBuffer_fu_345_ap_return_4,
        ap_return_5 => grp_initializeBuffer_fu_345_ap_return_5,
        ap_return_6 => grp_initializeBuffer_fu_345_ap_return_6,
        ap_return_7 => grp_initializeBuffer_fu_345_ap_return_7,
        ap_return_8 => grp_initializeBuffer_fu_345_ap_return_8,
        ap_return_9 => grp_initializeBuffer_fu_345_ap_return_9,
        ap_return_10 => grp_initializeBuffer_fu_345_ap_return_10,
        ap_return_11 => grp_initializeBuffer_fu_345_ap_return_11,
        ap_return_12 => grp_initializeBuffer_fu_345_ap_return_12,
        ap_return_13 => grp_initializeBuffer_fu_345_ap_return_13,
        ap_return_14 => grp_initializeBuffer_fu_345_ap_return_14,
        ap_return_15 => grp_initializeBuffer_fu_345_ap_return_15,
        ap_return_16 => grp_initializeBuffer_fu_345_ap_return_16,
        ap_return_17 => grp_initializeBuffer_fu_345_ap_return_17,
        ap_return_18 => grp_initializeBuffer_fu_345_ap_return_18,
        ap_return_19 => grp_initializeBuffer_fu_345_ap_return_19,
        ap_return_20 => grp_initializeBuffer_fu_345_ap_return_20,
        ap_return_21 => grp_initializeBuffer_fu_345_ap_return_21,
        ap_return_22 => grp_initializeBuffer_fu_345_ap_return_22,
        ap_return_23 => grp_initializeBuffer_fu_345_ap_return_23,
        ap_return_24 => grp_initializeBuffer_fu_345_ap_return_24);

    conv2D_mux_255_32cud_x_U118 : component conv2D_mux_255_32cud_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => buffer_0_fu_76,
        din1 => buffer_1_fu_80,
        din2 => buffer_2_fu_84,
        din3 => buffer_3_fu_88,
        din4 => buffer_4_fu_92,
        din5 => buffer_5_fu_96,
        din6 => buffer_6_fu_100,
        din7 => buffer_7_fu_104,
        din8 => buffer_8_fu_108,
        din9 => buffer_9_fu_112,
        din10 => buffer_10_fu_116,
        din11 => buffer_11_fu_120,
        din12 => buffer_12_fu_124,
        din13 => buffer_13_fu_128,
        din14 => buffer_14_fu_132,
        din15 => buffer_15_fu_136,
        din16 => buffer_16_fu_140,
        din17 => buffer_17_fu_144,
        din18 => buffer_18_fu_148,
        din19 => buffer_19_fu_152,
        din20 => buffer_20_fu_156,
        din21 => buffer_21_fu_160,
        din22 => buffer_22_fu_164,
        din23 => buffer_23_fu_168,
        din24 => buffer_24_fu_172,
        din25 => tmp_29_t_i_reg_1624,
        dout => tmp_28_fu_1030_p27);

    conv2D_mac_muladdfYi_U119 : component conv2D_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1333_p0,
        din1 => tmp_33_reg_1599,
        din2 => tmp_36_reg_1614,
        dout => grp_fu_1333_p3);

    conv2D_mac_muladdg8j_U120 : component conv2D_mac_muladdg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => tmp_34_reg_1604,
        din1 => tmp_26_reg_1548,
        din2 => tmp_35_reg_1609,
        dout => grp_fu_1340_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initializeBuffer_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initializeBuffer_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_21_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_initializeBuffer_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initializeBuffer_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_initializeBuffer_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateBuffer_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateBuffer_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_updateBuffer_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateBuffer_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_updateBuffer_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_0_fu_76 <= grp_updateBuffer_fu_307_ap_return_0;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_0_fu_76 <= grp_initializeBuffer_fu_345_ap_return_0;
            end if; 
        end if;
    end process;

    buffer_10_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_10_fu_116 <= grp_updateBuffer_fu_307_ap_return_10;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_10_fu_116 <= grp_initializeBuffer_fu_345_ap_return_10;
            end if; 
        end if;
    end process;

    buffer_11_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_11_fu_120 <= grp_updateBuffer_fu_307_ap_return_11;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_11_fu_120 <= grp_initializeBuffer_fu_345_ap_return_11;
            end if; 
        end if;
    end process;

    buffer_12_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_12_fu_124 <= grp_updateBuffer_fu_307_ap_return_12;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_12_fu_124 <= grp_initializeBuffer_fu_345_ap_return_12;
            end if; 
        end if;
    end process;

    buffer_13_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_13_fu_128 <= grp_updateBuffer_fu_307_ap_return_13;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_13_fu_128 <= grp_initializeBuffer_fu_345_ap_return_13;
            end if; 
        end if;
    end process;

    buffer_14_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_14_fu_132 <= grp_updateBuffer_fu_307_ap_return_14;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_14_fu_132 <= grp_initializeBuffer_fu_345_ap_return_14;
            end if; 
        end if;
    end process;

    buffer_15_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_15_fu_136 <= grp_updateBuffer_fu_307_ap_return_15;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_15_fu_136 <= grp_initializeBuffer_fu_345_ap_return_15;
            end if; 
        end if;
    end process;

    buffer_16_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_16_fu_140 <= grp_updateBuffer_fu_307_ap_return_16;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_16_fu_140 <= grp_initializeBuffer_fu_345_ap_return_16;
            end if; 
        end if;
    end process;

    buffer_17_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_17_fu_144 <= grp_updateBuffer_fu_307_ap_return_17;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_17_fu_144 <= grp_initializeBuffer_fu_345_ap_return_17;
            end if; 
        end if;
    end process;

    buffer_18_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_18_fu_148 <= grp_updateBuffer_fu_307_ap_return_18;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_18_fu_148 <= grp_initializeBuffer_fu_345_ap_return_18;
            end if; 
        end if;
    end process;

    buffer_19_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_19_fu_152 <= grp_updateBuffer_fu_307_ap_return_19;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_19_fu_152 <= grp_initializeBuffer_fu_345_ap_return_19;
            end if; 
        end if;
    end process;

    buffer_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_1_fu_80 <= grp_updateBuffer_fu_307_ap_return_1;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_1_fu_80 <= grp_initializeBuffer_fu_345_ap_return_1;
            end if; 
        end if;
    end process;

    buffer_20_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_20_fu_156 <= grp_updateBuffer_fu_307_ap_return_20;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_20_fu_156 <= grp_initializeBuffer_fu_345_ap_return_20;
            end if; 
        end if;
    end process;

    buffer_21_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_21_fu_160 <= grp_updateBuffer_fu_307_ap_return_21;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_21_fu_160 <= grp_initializeBuffer_fu_345_ap_return_21;
            end if; 
        end if;
    end process;

    buffer_22_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_22_fu_164 <= grp_updateBuffer_fu_307_ap_return_22;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_22_fu_164 <= grp_initializeBuffer_fu_345_ap_return_22;
            end if; 
        end if;
    end process;

    buffer_23_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_23_fu_168 <= grp_updateBuffer_fu_307_ap_return_23;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_23_fu_168 <= grp_initializeBuffer_fu_345_ap_return_23;
            end if; 
        end if;
    end process;

    buffer_24_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_24_fu_172 <= grp_updateBuffer_fu_307_ap_return_24;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_24_fu_172 <= grp_initializeBuffer_fu_345_ap_return_24;
            end if; 
        end if;
    end process;

    buffer_2_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_2_fu_84 <= grp_updateBuffer_fu_307_ap_return_2;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_2_fu_84 <= grp_initializeBuffer_fu_345_ap_return_2;
            end if; 
        end if;
    end process;

    buffer_3_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_3_fu_88 <= grp_updateBuffer_fu_307_ap_return_3;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_3_fu_88 <= grp_initializeBuffer_fu_345_ap_return_3;
            end if; 
        end if;
    end process;

    buffer_4_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_4_fu_92 <= grp_updateBuffer_fu_307_ap_return_4;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_4_fu_92 <= grp_initializeBuffer_fu_345_ap_return_4;
            end if; 
        end if;
    end process;

    buffer_5_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_5_fu_96 <= grp_updateBuffer_fu_307_ap_return_5;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_5_fu_96 <= grp_initializeBuffer_fu_345_ap_return_5;
            end if; 
        end if;
    end process;

    buffer_6_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_6_fu_100 <= grp_updateBuffer_fu_307_ap_return_6;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_6_fu_100 <= grp_initializeBuffer_fu_345_ap_return_6;
            end if; 
        end if;
    end process;

    buffer_7_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_7_fu_104 <= grp_updateBuffer_fu_307_ap_return_7;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_7_fu_104 <= grp_initializeBuffer_fu_345_ap_return_7;
            end if; 
        end if;
    end process;

    buffer_8_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_8_fu_108 <= grp_updateBuffer_fu_307_ap_return_8;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_8_fu_108 <= grp_initializeBuffer_fu_345_ap_return_8;
            end if; 
        end if;
    end process;

    buffer_9_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                buffer_9_fu_112 <= grp_updateBuffer_fu_307_ap_return_9;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_9_fu_112 <= grp_initializeBuffer_fu_345_ap_return_9;
            end if; 
        end if;
    end process;

    ik_col_i_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_971_p2 = ap_const_lv1_0))) then 
                ik_col_i_reg_296 <= ik_col_fu_1020_p2;
            elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ik_col_i_reg_296 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1585 = ap_const_lv1_0))) then 
                ik_row_i_reg_272 <= tmp_27_i_mid2_v_reg_1594;
            elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ik_row_i_reg_272 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_col_out_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                index_col_out_reg_249 <= index_col_out_1_reg_1580;
            elsif (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_col_out_reg_249 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_row_out_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_23_fu_951_p2 = ap_const_lv1_0))) then 
                index_row_out_reg_226 <= index_row_out_1_reg_1571;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_row_out_reg_226 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_971_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_261 <= indvar_flatten_next_fu_976_p2;
            elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_reg_261 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_23_fu_951_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_238 <= next_mul_reg_1563;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_238 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    sum_1_i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (exitcond_flatten_reg_1585_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_1_i_reg_283 <= sum_fu_1089_p2;
            elsif (((tmp_23_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_1_i_reg_283 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_1553 <= bound_fu_691_p2;
                tmp_20_reg_1543 <= tmp_20_fu_673_p2;
                tmp_26_reg_1548 <= tmp_26_fu_679_p1;
                tmp_s_reg_1538 <= tmp_s_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_1585 <= exitcond_flatten_fu_971_p2;
                exitcond_flatten_reg_1585_pp0_iter1_reg <= exitcond_flatten_reg_1585;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_1585_pp0_iter2_reg <= exitcond_flatten_reg_1585_pp0_iter1_reg;
                exitcond_flatten_reg_1585_pp0_iter3_reg <= exitcond_flatten_reg_1585_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                index_col_out_1_reg_1580 <= index_col_out_1_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_row_out_1_reg_1571 <= index_row_out_1_fu_716_p2;
                next_mul_reg_1563 <= next_mul_fu_701_p2;
                tmp_27_reg_1558 <= tmp_27_fu_697_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1585_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_load_reg_1639 <= kernel_q0;
                tmp_28_reg_1634 <= tmp_28_fu_1030_p27;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((tmp_21_fu_711_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_505 <= buffer_0_fu_76;
                reg_511 <= buffer_1_fu_80;
                reg_517 <= buffer_2_fu_84;
                reg_523 <= buffer_3_fu_88;
                reg_529 <= buffer_4_fu_92;
                reg_535 <= buffer_5_fu_96;
                reg_541 <= buffer_6_fu_100;
                reg_547 <= buffer_7_fu_104;
                reg_553 <= buffer_8_fu_108;
                reg_559 <= buffer_9_fu_112;
                reg_565 <= buffer_10_fu_116;
                reg_571 <= buffer_11_fu_120;
                reg_577 <= buffer_12_fu_124;
                reg_583 <= buffer_13_fu_128;
                reg_589 <= buffer_14_fu_132;
                reg_595 <= buffer_15_fu_136;
                reg_601 <= buffer_16_fu_140;
                reg_607 <= buffer_17_fu_144;
                reg_613 <= buffer_18_fu_148;
                reg_619 <= buffer_19_fu_152;
                reg_625 <= buffer_20_fu_156;
                reg_631 <= buffer_21_fu_160;
                reg_637 <= buffer_22_fu_164;
                reg_643 <= buffer_23_fu_168;
                reg_649 <= buffer_24_fu_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_971_p2 = ap_const_lv1_0))) then
                tmp_27_i_mid2_v_reg_1594 <= tmp_27_i_mid2_v_fu_996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1585 = ap_const_lv1_0))) then
                tmp_29_t_i_reg_1624 <= grp_fu_1340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1585_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_32_i_reg_1644 <= tmp_32_i_fu_1085_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_971_p2 = ap_const_lv1_0))) then
                tmp_33_reg_1599 <= tmp_33_fu_1004_p1;
                tmp_34_reg_1604 <= tmp_34_fu_1008_p1;
                tmp_35_reg_1609 <= tmp_35_fu_1012_p1;
                tmp_36_reg_1614 <= tmp_36_fu_1016_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_21_fu_711_p2, tmp_23_fu_951_p2, ap_CS_fsm_state4, exitcond_flatten_fu_971_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, grp_updateBuffer_fu_307_ap_done, grp_initializeBuffer_fu_345_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_21_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_initializeBuffer_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_23_fu_951_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_971_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten_fu_971_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_updateBuffer_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond_flatten_fu_971_p2)
    begin
        if ((exitcond_flatten_fu_971_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_21_fu_711_p2)
    begin
        if (((tmp_21_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ik_row_i_phi_fu_276_p4_assign_proc : process(ik_row_i_reg_272, exitcond_flatten_reg_1585, ap_CS_fsm_pp0_stage0, tmp_27_i_mid2_v_reg_1594, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1585 = ap_const_lv1_0))) then 
            ap_phi_mux_ik_row_i_phi_fu_276_p4 <= tmp_27_i_mid2_v_reg_1594;
        else 
            ap_phi_mux_ik_row_i_phi_fu_276_p4 <= ik_row_i_reg_272;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_21_fu_711_p2)
    begin
        if (((tmp_21_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_691_p0 <= bound_fu_691_p00(32 - 1 downto 0);
    bound_fu_691_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_col),64));
    bound_fu_691_p1 <= bound_fu_691_p10(32 - 1 downto 0);
    bound_fu_691_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_row),64));
    bound_fu_691_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_691_p0) * unsigned(bound_fu_691_p1), 64));
    exitcond_flatten_fu_971_p2 <= "1" when (indvar_flatten_reg_261 = bound_reg_1553) else "0";
    grp_fu_1333_p0 <= ap_const_lv11_64(8 - 1 downto 0);
    grp_initializeBuffer_fu_345_ap_start <= grp_initializeBuffer_fu_345_ap_start_reg;
    grp_updateBuffer_fu_307_ap_start <= grp_updateBuffer_fu_307_ap_start_reg;
    ik_col_fu_1020_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ik_col_i_mid2_fu_988_p3));
    ik_col_i_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_i_reg_296),32));
    ik_col_i_mid2_fu_988_p3 <= 
        ik_col_i_reg_296 when (tmp_28_i_fu_966_p2(0) = '1') else 
        ap_const_lv31_0;
    ik_row_fu_982_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_ik_row_i_phi_fu_276_p4));

    in_data_address0_assign_proc : process(grp_updateBuffer_fu_307_in_data_address0, grp_initializeBuffer_fu_345_in_data_address0, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_address0 <= grp_initializeBuffer_fu_345_in_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_data_address0 <= grp_updateBuffer_fu_307_in_data_address0;
        else 
            in_data_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(grp_updateBuffer_fu_307_in_data_ce0, grp_initializeBuffer_fu_345_in_data_ce0, ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= grp_initializeBuffer_fu_345_in_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_data_ce0 <= grp_updateBuffer_fu_307_in_data_ce0;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_col_out_1_fu_956_p2 <= std_logic_vector(unsigned(index_col_out_reg_249) + unsigned(ap_const_lv31_1));
    index_col_out_cast_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_col_out_reg_249),32));
    index_row_out_1_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(index_row_out_reg_226));
    index_row_out_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_row_out_reg_226),32));
    indvar_flatten_next_fu_976_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_261) + unsigned(ap_const_lv64_1));
    kernel_address0 <= tmp_31_cast_fu_1026_p1(10 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_701_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul_reg_238));
    out_data_address0 <= tmp_29_cast_fu_1103_p1(14 - 1 downto 0);

    out_data_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_data_ce0 <= ap_const_logic_1;
        else 
            out_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_d0 <= sum_1_i_reg_283;

    out_data_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_data_we0 <= ap_const_logic_1;
        else 
            out_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_1089_p2 <= std_logic_vector(unsigned(tmp_32_i_reg_1644) + unsigned(sum_1_i_reg_283));
    tmp_19_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(col_in));
    tmp_20_fu_673_p2 <= std_logic_vector(unsigned(tmp_19_fu_667_p2) - unsigned(kernel_size_col));
    tmp_21_fu_711_p2 <= "1" when (signed(index_row_out_cast_fu_707_p1) < signed(tmp_s_reg_1538)) else "0";
    tmp_23_fu_951_p2 <= "1" when (signed(index_col_out_cast_fu_947_p1) < signed(tmp_20_reg_1543)) else "0";
    tmp_25_fu_1098_p2 <= std_logic_vector(unsigned(tmp_27_reg_1558) + unsigned(tmp_32_fu_1094_p1));
    tmp_26_fu_679_p1 <= kernel_size_col(5 - 1 downto 0);
    tmp_27_fu_697_p1 <= phi_mul_reg_238(15 - 1 downto 0);
    tmp_27_i_mid2_v_fu_996_p3 <= 
        ap_phi_mux_ik_row_i_phi_fu_276_p4 when (tmp_28_i_fu_966_p2(0) = '1') else 
        ik_row_fu_982_p2;
    tmp_28_i_fu_966_p2 <= "1" when (signed(ik_col_i_cast_fu_962_p1) < signed(kernel_size_col)) else "0";
    tmp_29_cast_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1098_p2),64));
        tmp_31_cast_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1333_p3),64));

    tmp_32_fu_1094_p1 <= index_col_out_reg_249(15 - 1 downto 0);
    tmp_32_i_fu_1085_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_1639) * signed(tmp_28_reg_1634))), 32));
    tmp_33_fu_1004_p1 <= tmp_27_i_mid2_v_fu_996_p3(11 - 1 downto 0);
    tmp_34_fu_1008_p1 <= tmp_27_i_mid2_v_fu_996_p3(5 - 1 downto 0);
    tmp_35_fu_1012_p1 <= ik_col_i_mid2_fu_988_p3(5 - 1 downto 0);
    tmp_36_fu_1016_p1 <= ik_col_i_mid2_fu_988_p3(11 - 1 downto 0);
    tmp_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(row_in));
    tmp_s_fu_661_p2 <= std_logic_vector(unsigned(tmp_fu_655_p2) - unsigned(kernel_size_row));
end behav;
