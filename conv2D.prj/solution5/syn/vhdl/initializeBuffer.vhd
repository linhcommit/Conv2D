-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity initializeBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_10_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_11_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_12_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_13_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_14_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_15_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_16_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_17_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_18_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_19_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_20_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_21_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_22_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_23_read : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_24_read : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    index_row_out : IN STD_LOGIC_VECTOR (30 downto 0);
    kernel_size_row : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_size_col : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of initializeBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_533 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_buffer_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_reg_555 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_1_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_reg_577 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_cast_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_2037 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_2042 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_763_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_15_mid2_v_v_v_fu_796_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_mid2_v_v_v_reg_2056 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_fu_809_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_reg_2061 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_buffer_mid2_fu_813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_821_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_reg_2071 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_825_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_831_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_reg_2081 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_reg_2081_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ik_col_2_fu_835_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_ik_row_phi_fu_559_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_17_cast_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer24_1_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal write_flag_1_fu_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag78_1_fu_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer23_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag75_1_fu_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer22_1_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag4_1_fu_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag72_1_fu_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer21_1_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer16_1_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag69_1_fu_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer20_1_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag8_1_fu_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag66_1_fu_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer19_1_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer2_1_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag63_1_fu_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer18_1_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag11_1_fu_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag60_1_fu_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer17_1_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer3_1_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag57_1_fu_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer1655_1_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag14_1_fu_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag53_1_fu_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer1550_1_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer4_1_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag48_1_fu_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer14_1_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag17_1_fu_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag44_1_fu_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer13_1_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer5_1_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag41_1_fu_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer12_1_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag20_1_fu_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag38_1_fu_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer11_1_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer6_1_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag35_1_fu_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer10_1_fu_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag23_1_fu_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag32_1_fu_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer9_1_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer7_1_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag29_1_fu_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer8_1_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag26_1_fu_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_594_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_598_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_618_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_col_cast_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_buffer_2_dup_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ik_row_2_fu_769_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_804_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ik_col_mid2_fu_788_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_buffer_1_mid2_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1570_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal buffer_0_write_assi_fu_1245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_write_assi_fu_1252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_2_write_assi_fu_1259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_3_write_assi_fu_1266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_4_write_assi_fu_1273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_5_write_assi_fu_1280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_6_write_assi_fu_1287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_7_write_assi_fu_1294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_8_write_assi_fu_1301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_9_write_assi_fu_1308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_10_write_ass_fu_1315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_11_write_ass_fu_1322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_12_write_ass_fu_1329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_13_write_ass_fu_1336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_14_write_ass_fu_1343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_15_write_ass_fu_1350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_16_write_ass_fu_1357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_17_write_ass_fu_1364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_18_write_ass_fu_1371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_19_write_ass_fu_1378_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_20_write_ass_fu_1385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_21_write_ass_fu_1392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_22_write_ass_fu_1399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_23_write_ass_fu_1406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_24_write_ass_fu_1413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1570_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_618_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_618_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component conv2D_mac_muladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    conv2D_mac_muladdbkb_U1 : component conv2D_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1570_p0,
        din1 => tmp_21_reg_2061,
        din2 => tmp_22_reg_2071,
        dout => grp_fu_1570_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_buffer_1_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then 
                i_buffer_1_reg_566 <= tmp_18_fu_825_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_buffer_1_reg_566 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_buffer_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then 
                i_buffer_reg_544 <= i_buffer_mid2_fu_813_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_buffer_reg_544 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ik_col_reg_577_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then 
                ik_col_reg_577 <= ik_col_2_fu_835_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ik_col_reg_577 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ik_row_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_2047 = ap_const_lv1_0))) then 
                ik_row_reg_555 <= tmp_15_mid2_v_v_v_reg_2056;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ik_row_reg_555 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_533 <= indvar_flatten_next_fu_763_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_533 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    write_flag11_1_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag11_1_fu_228 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag11_1_fu_228 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag14_1_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag14_1_fu_252 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag14_1_fu_252 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag17_1_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag17_1_fu_276 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag17_1_fu_276 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag20_1_fu_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag20_1_fu_300 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag20_1_fu_300 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag23_1_fu_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag23_1_fu_324 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag23_1_fu_324 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag26_1_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag26_1_fu_348 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag26_1_fu_348 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag29_1_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag29_1_fu_340 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag29_1_fu_340 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag32_1_fu_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag32_1_fu_328 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag32_1_fu_328 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag35_1_fu_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag35_1_fu_316 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag35_1_fu_316 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag38_1_fu_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag38_1_fu_304 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag38_1_fu_304 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag41_1_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag41_1_fu_292 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag41_1_fu_292 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag44_1_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag44_1_fu_280 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag44_1_fu_280 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag48_1_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag48_1_fu_268 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag48_1_fu_268 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag4_1_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag4_1_fu_180 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag4_1_fu_180 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag53_1_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag53_1_fu_256 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag53_1_fu_256 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag57_1_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag57_1_fu_244 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag57_1_fu_244 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag60_1_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag60_1_fu_232 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag60_1_fu_232 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag63_1_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_13) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag63_1_fu_220 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag63_1_fu_220 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag66_1_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_14) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag66_1_fu_208 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag66_1_fu_208 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag69_1_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_15) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag69_1_fu_196 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag69_1_fu_196 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag72_1_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_16) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag72_1_fu_184 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag72_1_fu_184 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag75_1_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_17) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag75_1_fu_172 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag75_1_fu_172 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag78_1_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_18) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_19) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1A) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1B) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1C) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1D) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1E) or (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1F)))))))))) then 
                write_flag78_1_fu_160 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag78_1_fu_160 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag8_1_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag8_1_fu_204 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag8_1_fu_204 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_1_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                write_flag_1_fu_156 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag_1_fu_156 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_2042 <= bound_fu_618_p2;
                    smax_cast_reg_2037(30 downto 0) <= smax_cast_fu_606_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer10_1_fu_320 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer11_1_fu_308 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer12_1_fu_296 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer13_1_fu_284 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer14_1_fu_272 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer1550_1_fu_260 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer1655_1_fu_248 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer16_1_fu_192 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer17_1_fu_236 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer18_1_fu_224 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_13) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer19_1_fu_212 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_14) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer20_1_fu_200 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_15) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer21_1_fu_188 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_16) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer22_1_fu_176 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_17) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer23_1_fu_164 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_18) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_19) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1A) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1B) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1C) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1D) or ((tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1E) or (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_1F)))))))))) then
                buffer24_1_fu_152 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer2_1_fu_216 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer3_1_fu_240 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer4_1_fu_264 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer5_1_fu_288 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer6_1_fu_312 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer7_1_fu_336 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer8_1_fu_344 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer9_1_fu_332 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_23_reg_2081_pp0_iter1_reg = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer_1_fu_168 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_2047 <= exitcond_flatten_fu_758_p2;
                tmp_23_reg_2081_pp0_iter1_reg <= tmp_23_reg_2081;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then
                tmp_15_mid2_v_v_v_reg_2056 <= tmp_15_mid2_v_v_v_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_0))) then
                tmp_21_reg_2061 <= tmp_21_fu_809_p1;
                tmp_22_reg_2071 <= tmp_22_fu_821_p1;
                tmp_23_reg_2081 <= tmp_23_fu_831_p1;
            end if;
        end if;
    end process;
    smax_cast_reg_2037(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_758_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_758_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_758_p2)
    begin
        if ((exitcond_flatten_fu_758_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ik_row_phi_fu_559_p4_assign_proc : process(ik_row_reg_555, exitcond_flatten_reg_2047, ap_CS_fsm_pp0_stage0, tmp_15_mid2_v_v_v_reg_2056, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_2047 = ap_const_lv1_0))) then 
            ap_phi_mux_ik_row_phi_fu_559_p4 <= tmp_15_mid2_v_v_v_reg_2056;
        else 
            ap_phi_mux_ik_row_phi_fu_559_p4 <= ik_row_reg_555;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= buffer_0_write_assi_fu_1245_p3;
    ap_return_1 <= buffer_1_write_assi_fu_1252_p3;
    ap_return_10 <= buffer_10_write_ass_fu_1315_p3;
    ap_return_11 <= buffer_11_write_ass_fu_1322_p3;
    ap_return_12 <= buffer_12_write_ass_fu_1329_p3;
    ap_return_13 <= buffer_13_write_ass_fu_1336_p3;
    ap_return_14 <= buffer_14_write_ass_fu_1343_p3;
    ap_return_15 <= buffer_15_write_ass_fu_1350_p3;
    ap_return_16 <= buffer_16_write_ass_fu_1357_p3;
    ap_return_17 <= buffer_17_write_ass_fu_1364_p3;
    ap_return_18 <= buffer_18_write_ass_fu_1371_p3;
    ap_return_19 <= buffer_19_write_ass_fu_1378_p3;
    ap_return_2 <= buffer_2_write_assi_fu_1259_p3;
    ap_return_20 <= buffer_20_write_ass_fu_1385_p3;
    ap_return_21 <= buffer_21_write_ass_fu_1392_p3;
    ap_return_22 <= buffer_22_write_ass_fu_1399_p3;
    ap_return_23 <= buffer_23_write_ass_fu_1406_p3;
    ap_return_24 <= buffer_24_write_ass_fu_1413_p3;
    ap_return_3 <= buffer_3_write_assi_fu_1266_p3;
    ap_return_4 <= buffer_4_write_assi_fu_1273_p3;
    ap_return_5 <= buffer_5_write_assi_fu_1280_p3;
    ap_return_6 <= buffer_6_write_assi_fu_1287_p3;
    ap_return_7 <= buffer_7_write_assi_fu_1294_p3;
    ap_return_8 <= buffer_8_write_assi_fu_1301_p3;
    ap_return_9 <= buffer_9_write_assi_fu_1308_p3;
    bound_fu_618_p0 <= bound_fu_618_p00(32 - 1 downto 0);
    bound_fu_618_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_col),64));
    bound_fu_618_p1 <= bound_fu_618_p10(32 - 1 downto 0);
    bound_fu_618_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_row),64));
    bound_fu_618_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_618_p0) * unsigned(bound_fu_618_p1), 64));
    buffer_0_write_assi_fu_1245_p3 <= 
        buffer_1_fu_168 when (write_flag_1_fu_156(0) = '1') else 
        buffer_0_read;
    buffer_10_write_ass_fu_1315_p3 <= 
        buffer10_1_fu_320 when (write_flag32_1_fu_328(0) = '1') else 
        buffer_10_read;
    buffer_11_write_ass_fu_1322_p3 <= 
        buffer11_1_fu_308 when (write_flag35_1_fu_316(0) = '1') else 
        buffer_11_read;
    buffer_12_write_ass_fu_1329_p3 <= 
        buffer12_1_fu_296 when (write_flag38_1_fu_304(0) = '1') else 
        buffer_12_read;
    buffer_13_write_ass_fu_1336_p3 <= 
        buffer13_1_fu_284 when (write_flag41_1_fu_292(0) = '1') else 
        buffer_13_read;
    buffer_14_write_ass_fu_1343_p3 <= 
        buffer14_1_fu_272 when (write_flag44_1_fu_280(0) = '1') else 
        buffer_14_read;
    buffer_15_write_ass_fu_1350_p3 <= 
        buffer1550_1_fu_260 when (write_flag48_1_fu_268(0) = '1') else 
        buffer_15_read;
    buffer_16_write_ass_fu_1357_p3 <= 
        buffer1655_1_fu_248 when (write_flag53_1_fu_256(0) = '1') else 
        buffer_16_read;
    buffer_17_write_ass_fu_1364_p3 <= 
        buffer17_1_fu_236 when (write_flag57_1_fu_244(0) = '1') else 
        buffer_17_read;
    buffer_18_write_ass_fu_1371_p3 <= 
        buffer18_1_fu_224 when (write_flag60_1_fu_232(0) = '1') else 
        buffer_18_read;
    buffer_19_write_ass_fu_1378_p3 <= 
        buffer19_1_fu_212 when (write_flag63_1_fu_220(0) = '1') else 
        buffer_19_read;
    buffer_1_write_assi_fu_1252_p3 <= 
        buffer16_1_fu_192 when (write_flag4_1_fu_180(0) = '1') else 
        buffer_1_read;
    buffer_20_write_ass_fu_1385_p3 <= 
        buffer20_1_fu_200 when (write_flag66_1_fu_208(0) = '1') else 
        buffer_20_read;
    buffer_21_write_ass_fu_1392_p3 <= 
        buffer21_1_fu_188 when (write_flag69_1_fu_196(0) = '1') else 
        buffer_21_read;
    buffer_22_write_ass_fu_1399_p3 <= 
        buffer22_1_fu_176 when (write_flag72_1_fu_184(0) = '1') else 
        buffer_22_read;
    buffer_23_write_ass_fu_1406_p3 <= 
        buffer23_1_fu_164 when (write_flag75_1_fu_172(0) = '1') else 
        buffer_23_read;
    buffer_24_write_ass_fu_1413_p3 <= 
        buffer24_1_fu_152 when (write_flag78_1_fu_160(0) = '1') else 
        buffer_24_read;
    buffer_2_write_assi_fu_1259_p3 <= 
        buffer2_1_fu_216 when (write_flag8_1_fu_204(0) = '1') else 
        buffer_2_read;
    buffer_3_write_assi_fu_1266_p3 <= 
        buffer3_1_fu_240 when (write_flag11_1_fu_228(0) = '1') else 
        buffer_3_read;
    buffer_4_write_assi_fu_1273_p3 <= 
        buffer4_1_fu_264 when (write_flag14_1_fu_252(0) = '1') else 
        buffer_4_read;
    buffer_5_write_assi_fu_1280_p3 <= 
        buffer5_1_fu_288 when (write_flag17_1_fu_276(0) = '1') else 
        buffer_5_read;
    buffer_6_write_assi_fu_1287_p3 <= 
        buffer6_1_fu_312 when (write_flag20_1_fu_300(0) = '1') else 
        buffer_6_read;
    buffer_7_write_assi_fu_1294_p3 <= 
        buffer7_1_fu_336 when (write_flag23_1_fu_324(0) = '1') else 
        buffer_7_read;
    buffer_8_write_assi_fu_1301_p3 <= 
        buffer8_1_fu_344 when (write_flag26_1_fu_348(0) = '1') else 
        buffer_8_read;
    buffer_9_write_assi_fu_1308_p3 <= 
        buffer9_1_fu_332 when (write_flag29_1_fu_340(0) = '1') else 
        buffer_9_read;
    exitcond_flatten_fu_758_p2 <= "1" when (indvar_flatten_reg_533 = bound_reg_2042) else "0";
    grp_fu_1570_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    i_buffer_1_mid2_fu_780_p3 <= 
        i_buffer_1_reg_566 when (tmp_s_fu_753_p2(0) = '1') else 
        i_buffer_2_dup_fu_775_p2;
    i_buffer_2_dup_fu_775_p2 <= std_logic_vector(unsigned(i_buffer_reg_544) + unsigned(smax_cast_reg_2037));
    i_buffer_mid2_fu_813_p3 <= 
        i_buffer_reg_544 when (tmp_s_fu_753_p2(0) = '1') else 
        i_buffer_2_dup_fu_775_p2;
    ik_col_2_fu_835_p2 <= std_logic_vector(unsigned(ik_col_mid2_fu_788_p3) + unsigned(ap_const_lv31_1));
    ik_col_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ik_col_reg_577),32));
    ik_col_mid2_fu_788_p3 <= 
        ik_col_reg_577 when (tmp_s_fu_753_p2(0) = '1') else 
        ap_const_lv31_0;
    ik_row_2_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_ik_row_phi_fu_559_p4));
    in_data_address0 <= tmp_17_cast_fu_841_p1(14 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_763_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_533) + unsigned(ap_const_lv64_1));
    smax_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_598_p3),32));
    smax_fu_598_p3 <= 
        tmp_19_fu_594_p1 when (tmp_fu_588_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_15_mid2_v_v_v_fu_796_p3 <= 
        ap_phi_mux_ik_row_phi_fu_559_p4 when (tmp_s_fu_753_p2(0) = '1') else 
        ik_row_2_fu_769_p2;
        tmp_17_cast_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1570_p3),64));

    tmp_18_fu_825_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_buffer_1_mid2_fu_780_p3));
    tmp_19_fu_594_p1 <= kernel_size_col(31 - 1 downto 0);
    tmp_20_fu_804_p2 <= std_logic_vector(unsigned(tmp_15_mid2_v_v_v_fu_796_p3) + unsigned(index_row_out));
    tmp_21_fu_809_p1 <= tmp_20_fu_804_p2(15 - 1 downto 0);
    tmp_22_fu_821_p1 <= ik_col_mid2_fu_788_p3(15 - 1 downto 0);
    tmp_23_fu_831_p1 <= i_buffer_1_mid2_fu_780_p3(5 - 1 downto 0);
    tmp_fu_588_p2 <= "1" when (signed(kernel_size_col) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_753_p2 <= "1" when (signed(ik_col_cast_fu_749_p1) < signed(kernel_size_col)) else "0";
end behav;
